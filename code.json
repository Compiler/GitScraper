"/**\n     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: org.netbeans.enterprise.bpel.asynchronoussampleschemanamespace\n     * \n     */"}}
{"code": {"body": "    public TypeA createTypeA() {\n        return new TypeA();\n    }", "comment": "/**\n     * Create an instance of {@link TypeA }\n     * \n     */"}}
{"code": {"body": "    public TypeB createTypeB() {\n        return new TypeB();\n    }", "comment": "/**\n     * Create an instance of {@link TypeB }\n     * \n     */"}}
{"code": {"body": "        public void onServiceConnected(ComponentName name, IBinder service) {\n            mIMyAidlInterface = IMyAidlInterface.Stub.asInterface(service);\n            try {\n                String string = mIMyAidlInterface.getString();\n                System.out.println(string);\n            } catch (RemoteException e) {\n                e.printStackTrace();\n            }\n        }", "comment": "/*    60                 Intent intent = new Intent();\n        61                 intent.setAction(\"com.example.service.MyService\");\n        62                 //\u4ece Android 5.0\u5f00\u59cb \u9690\u5f0fIntent\u7ed1\u5b9a\u670d\u52a1\u7684\u65b9\u5f0f\u5df2\u4e0d\u80fd\u4f7f\u7528,\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u8bbe\u7f6eService\u6240\u5728\u670d\u52a1\u7aef\u7684\u5305\u540d\n        63                 intent.setPackage(\"com.example.service\");\n        64                 bindService(intent, connection, BIND_AUTO_CREATE);*/"}}
{"code": {"body": "        public void onServiceDisconnected(ComponentName name) {\n\n        }", "comment": "/*    60                 Intent intent = new Intent();\n        61                 intent.setAction(\"com.example.service.MyService\");\n        62                 //\u4ece Android 5.0\u5f00\u59cb \u9690\u5f0fIntent\u7ed1\u5b9a\u670d\u52a1\u7684\u65b9\u5f0f\u5df2\u4e0d\u80fd\u4f7f\u7528,\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u8bbe\u7f6eService\u6240\u5728\u670d\u52a1\u7aef\u7684\u5305\u540d\n        63                 intent.setPackage(\"com.example.service\");\n        64                 bindService(intent, connection, BIND_AUTO_CREATE);*/"}}
{"code": {"body": "    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }", "comment": "/*    60                 Intent intent = new Intent();\n        61                 intent.setAction(\"com.example.service.MyService\");\n        62                 //\u4ece Android 5.0\u5f00\u59cb \u9690\u5f0fIntent\u7ed1\u5b9a\u670d\u52a1\u7684\u65b9\u5f0f\u5df2\u4e0d\u80fd\u4f7f\u7528,\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u8bbe\u7f6eService\u6240\u5728\u670d\u52a1\u7aef\u7684\u5305\u540d\n        63                 intent.setPackage(\"com.example.service\");\n        64                 bindService(intent, connection, BIND_AUTO_CREATE);*/"}}
{"code": {"body": "    public void start(View view) {\n        Intent intent = new Intent(\"\");\n        intent.setPackage(\"\");\n        bindService(intent, conn, BIND_AUTO_CREATE);\n    \n    }", "comment": "/*    60                 Intent intent = new Intent();\n        61                 intent.setAction(\"com.example.service.MyService\");\n        62                 //\u4ece Android 5.0\u5f00\u59cb \u9690\u5f0fIntent\u7ed1\u5b9a\u670d\u52a1\u7684\u65b9\u5f0f\u5df2\u4e0d\u80fd\u4f7f\u7528,\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u8bbe\u7f6eService\u6240\u5728\u670d\u52a1\u7aef\u7684\u5305\u540d\n        63                 intent.setPackage(\"com.example.service\");\n        64                 bindService(intent, connection, BIND_AUTO_CREATE);*/"}}
{"code": {"body": "\tpublic void init(FilterConfig config) throws ServletException {\n\n\t}", "comment": "/**\n\t * \u8bbe\u7f6e\u5e94\u7528\u4fe1\u606f\n\t */"}}
{"code": {"body": "\tpublic static void main(String[] args) {\n\t\t\n\t\tSystem.out.println(\"\");\n\n\t\tApplication.launch(MyApplication.class, args);\n\t}", "comment": "/**\n\t * Main function.\n\t * Start application GUI.\n\t *\n\t * @param args Input arguments, unused.\n\t */"}}
{"code": {"body": "    public void process(List<Mat> src, List<Mat> dst, Mat times, Mat response) {\n        Mat src_mat = Converters.vector_Mat_to_Mat(src);\n        Mat dst_mat = Converters.vector_Mat_to_Mat(dst);\n        process_0(nativeObj, src_mat.nativeObj, dst_mat.nativeObj, times.nativeObj, response.nativeObj);\n    }", "comment": "/**\n     * Aligns images\n     *\n     *     @param src vector of input images\n     *     @param dst vector of aligned images\n     *     @param times vector of exposure time values for each image\n     *     @param response 256x1 matrix with inverse camera response function for each pixel value, it should\n     *     have the same number of channels as images.\n     */"}}
{"code": {"body": "    public static boolean initOpenCV(String Version, final Context AppContext,\n            final LoaderCallbackInterface Callback)\n    {\n        AsyncServiceHelper helper = new AsyncServiceHelper(Version, AppContext, Callback);\n        Intent intent = new Intent(\"\");\n        intent.setPackage(\"\");\n        if (AppContext.bindService(intent, helper.mServiceConnection, Context.BIND_AUTO_CREATE))\n        {\n            return true;\n        }\n        else\n        {\n            AppContext.unbindService(helper.mServiceConnection);\n            InstallService(AppContext, Callback);\n            return false;\n        }\n    }", "comment": "/**\n     *  URL of OpenCV Manager page on Google Play Market.\n     */"}}
{"code": {"body": "    protected static boolean InstallServiceQuiet(Context context)\n    {\n        boolean result = true;\n        try\n        {\n            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(OPEN_CV_SERVICE_URL));\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            context.startActivity(intent);\n        }\n        catch(Exception e)\n        {\n            result = false;\n        }\n\n        return result;\n    }", "comment": "/**\n     *  URL of OpenCV Manager page on Google Play Market.\n     */"}}
{"code": {"body": "    protected static void InstallService(final Context AppContext, final LoaderCallbackInterface Callback)\n    {\n        if (!mServiceInstallationProgress)\n        {\n                Log.d(TAG, \"\");\n                InstallCallbackInterface InstallQuery = new InstallCallbackInterface() {\n                private LoaderCallbackInterface mUserAppCallback = Callback;\n                public String getPackageName()\n                {\n                    return \"\";\n                }\n                public void install() {\n                    Log.d(TAG, \"\");\n\n                    boolean result = InstallServiceQuiet(AppContext);\n                    if (result)\n                    {\n                        mServiceInstallationProgress = true;\n                        Log.d(TAG, \"\");\n                    }\n                    else\n                    {\n                        Log.d(TAG, \"\");\n                        int Status = LoaderCallbackInterface.MARKET_ERROR;\n                        Log.d(TAG, \"\" + Status);\n                        Log.d(TAG, \"\");\n                        Log.d(TAG, \"\");\n                        mUserAppCallback.onManagerConnected(Status);\n                    }\n                }\n\n                public void cancel()\n                {\n                    Log.d(TAG, \"\");\n                    int Status = LoaderCallbackInterface.INSTALL_CANCELED;\n                    Log.d(TAG, \"\" + Status);\n                    Log.d(TAG, \"\");\n                    mUserAppCallback.onManagerConnected(Status);\n                }\n\n                public void wait_install()\n                {\n                    Log.e(TAG, \"\");\n                }\n            };\n\n            Callback.onPackageInstall(InstallCallbackInterface.NEW_INSTALLATION, InstallQuery);\n        }\n        else\n        {\n            Log.d(TAG, \"\");\n            InstallCallbackInterface WaitQuery = new InstallCallbackInterface() {\n                private LoaderCallbackInterface mUserAppCallback = Callback;\n                public String getPackageName()\n                {\n                    return \"\";\n                }\n                public void install()\n                {\n                    Log.e(TAG, \"\");\n                }\n                public void cancel()\n                {\n                    Log.d(TAG, \"\");\n                    mServiceInstallationProgress = false;\n                    int Status = LoaderCallbackInterface.INSTALL_CANCELED;\n                    Log.d(TAG, \"\" + Status);\n                    Log.d(TAG, \"\");\n                    mUserAppCallback.onManagerConnected(Status);\n                }\n                public void wait_install()\n                {\n                     InstallServiceQuiet(AppContext);\n                }\n            };\n\n            Callback.onPackageInstall(InstallCallbackInterface.INSTALLATION_PROGRESS, WaitQuery);\n        }\n    }", "comment": "/**\n     *  URL of OpenCV Manager page on Google Play Market.\n     */"}}
{"code": {"body": "\tpublic static void main(String[] args) {\n\t\t\n\t\t\n\t\tint k = 1;\n\t\tNaiveBayes nb = new NaiveBayes(false, 1);\n\t\tSystem.out.println(\"\" + nb.determineError(k));\n\t\t\n\t\t\n\t}", "comment": "/*\n\t\tString errorMessage = \"Incorrect input, follow directions above.\";\n\t\tScanner in = new Scanner(System.in);\n\t\tString[] splitInputString;\n\t\tSystem.out.println(\"Please specify image set: [f]aces or [d]igits\\n\"\n\t\t\t\t+ \"Please specify classification algorithm: [p]erceptron, [n]aive-bayes or [o]ther\\n\"\n\t\t\t\t+ \"Please specify percent of training data to use: 0 -> 100\\n\"\n\t\t\t\t+ \"Enter parameters in the order they appear above. Here is an example:\\n\"\n\t\t\t\t+ \"f p 50\\n\"\n\t\t\t\t+ \"this will use the faces image set, classify using perceptron and use 50% of\\n\"\n\t\t\t\t+ \"the training data\");\n\t\tsplitInputString = in.nextLine().split(\" \");\n\t\tif (splitInputString.length >= 3){\n\t\t\tif (!(splitInputString[0].equalsIgnoreCase(\"f\") || splitInputString[0].equalsIgnoreCase(\"d\"))){\n\t\t\t\tSystem.out.println(\"[0] \" + errorMessage);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!(splitInputString[1].equalsIgnoreCase(\"p\") || splitInputString[1].equalsIgnoreCase(\"n\") \n\t\t\t\t\t|| splitInputString[1].equalsIgnoreCase(\"o\"))){\n\t\t\t\tSystem.out.println(\"[1] \" + errorMessage);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (Integer.parseInt(splitInputString[2]) < 0 || Integer.parseInt(splitInputString[2]) > 100){\n\t\t\t\tSystem.out.println(\"[2] \" + errorMessage);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(errorMessage);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (splitInputString[1].equalsIgnoreCase(\"p\")){\n\t\t\t//perceptron(splitInputString[0], Double.parseDouble(splitInputString[2])/100)\n\t\t}\n\t\telse if (splitInputString[1].equalsIgnoreCase(\"n\")){\n\t\t\t//naiveBayes(splitInputString[0], Double.parseDouble(splitInputString[2])/100)\n\t\t}\n\t\telse{\n\t\t\t//use other classification algorithm here\n\t\t}\n\t\t*/"}}
{"code": {"body": "    private void initializeAndFix() {\n        \n        mPatchManager = new PatchManager(this);\n        mPatchManager.init(VSERSION_NAME);\n        Log.e(Log.TAG, \"\");\n\n        \n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    }", "comment": "/**\n     * \u521d\u59cb\u5316AndFix\n     */"}}
