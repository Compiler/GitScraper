{"code": {"body": "public static ArrayList<InsuranceScore> memberScoreAsessor(ArrayList<Health> memberData)\n{\n\tArrayList<InsuranceScore> assessment = new ArrayList<InsuranceScore>();\n\t\n\tfor (Health h: memberData) \n\t{\n\t\t\n\t\tInsuranceScore assess = new InsuranceScore(h.getFname().trim(),h.getLname().trim(),addScoreForMembers(h)); \n\t\tassessment.add(assess);\n\t}\n\t\n\treturn assessment;\n}", "comment": "/**memberScoreAssessor will assess risk score for each member. \n * \n * @param memberData\n * @return\n */"}}
{"code": {"body": "public static int addScoreForMembers(Health h) \n{\n\t\nint riskLevel =0; \ndouble bmi=0;\n\nbmi = ((double)(h.getWeight())/ (h.getHeight()* h.getHeight()))*703;\n\n{\n\tif (bmi>=18.5 && bmi <= 24.9)\n\t  {\n\t\t\triskLevel = riskLevel +0;\t\n\t  }\n\t\t\t\n\telse if (bmi>=25.0 && bmi <= 29.9) \n\t  {\n\t\t\t\triskLevel = riskLevel +30;\n\t  }\n\telse \n\t  {\n\t\t\t\triskLevel = riskLevel + 75;\n\t  }\n\t}\t     \n\t    \n\t\n{   \t\n\tif (h.getBpSystolic() < 120 && h.getBpDiastolic() <80)\n\t  {\n\t\triskLevel = riskLevel + 0;\n\t  }\n\telse if ((h.getBpSystolic() >= 120 && h.getBpSystolic() <=129) && h.getBpDiastolic() < 80)\n\t  {\n\t\t\n\t\triskLevel = riskLevel + 15;\n\t  }\n\telse if (h.getBpSystolic() >= 130 && h.getBpSystolic() <=139 || \n\t(h.getBpDiastolic() >=80 && h.getBpDiastolic() <=89))\n\t  {\n\t\triskLevel = riskLevel+ 30;\n\t  }\n\telse if (h.getBpSystolic() >= 140 || h.getBpDiastolic() >=90) \n\t  {\n\t\triskLevel = riskLevel+ 75;\n\t  }\n\n\telse if (h.getBpSystolic() >= 180 || h.getBpDiastolic() >=120)\n\t{\n\t\triskLevel = riskLevel+100;\n\t}\n\t     }\n\t     {\n\t    \t \n\t if(h.getAge() >= 30 && h.getAge() < 45) \n\t    {\n\t\triskLevel = riskLevel+10;\n\t    }\n\t else if (h.getAge() >= 45&& h.getAge() < 60) \n\t    {\n\t\t riskLevel = riskLevel+20;\n\t    }\n\t else if (h.getAge()>=60)\n\t    {\n\t\t riskLevel = riskLevel+30;\n\t     }\n\t     }\n\t     {\n\t  if (h.getCancer().contentEquals(\"\")) \n\t    \t {\n\t    \t\t riskLevel = riskLevel+10;\n\t    \t }\n\t   if (h.getDiabetes().contentEquals(\"\")) \n\t    \t {\n\t    \t\t riskLevel = riskLevel + 10;\n\t    \t }\n\t   if (h.getAlzheimers().contentEquals(\"\")) \n\t    \t {\n\t    \t\t riskLevel = riskLevel + 10;\n\t    \t } \n\t     }\n\t     return riskLevel;\n\t\t}", "comment": "/**\n * This addScoreForMembers will assign penalty points to members based on their age, blood pressure, BMI and disease in family (if any).\n * @\n */"}}
{"code": {"body": "    public Optional<Client> get(long id) {\n        return Optional.ofNullable(clients.get((int)id));\n    }", "comment": "/*client.setNumClient(Object.requireNonNull(params[0], \"Le num\u00e9ro client ne peut etre null\"));   //   Numero Client\n        client.setNomClient(Object.requireNonNull(params[1], \"Le nom client ne peut etre null\"));   // Nom du client\n        client.setNom(Object.requireNonNull(params[2], \"L'adresse client ne peut etre null\"));    // Adresse\n\n        clients.add(client);*/"}}
{"code": {"body": "    public List<Client> getAll() {\n        return clients;\n    }", "comment": "/*client.setNumClient(Object.requireNonNull(params[0], \"Le num\u00e9ro client ne peut etre null\"));   //   Numero Client\n        client.setNomClient(Object.requireNonNull(params[1], \"Le nom client ne peut etre null\"));   // Nom du client\n        client.setNom(Object.requireNonNull(params[2], \"L'adresse client ne peut etre null\"));    // Adresse\n\n        clients.add(client);*/"}}
{"code": {"body": "    public void save(Client client) {\n        clients.add(client);\n    }", "comment": "/*client.setNumClient(Object.requireNonNull(params[0], \"Le num\u00e9ro client ne peut etre null\"));   //   Numero Client\n        client.setNomClient(Object.requireNonNull(params[1], \"Le nom client ne peut etre null\"));   // Nom du client\n        client.setNom(Object.requireNonNull(params[2], \"L'adresse client ne peut etre null\"));    // Adresse\n\n        clients.add(client);*/"}}
{"code": {"body": "    public void update(Client client, String[] params) {\n        \n    }", "comment": "/*client.setNumClient(Object.requireNonNull(params[0], \"Le num\u00e9ro client ne peut etre null\"));   //   Numero Client\n        client.setNomClient(Object.requireNonNull(params[1], \"Le nom client ne peut etre null\"));   // Nom du client\n        client.setNom(Object.requireNonNull(params[2], \"L'adresse client ne peut etre null\"));    // Adresse\n\n        clients.add(client);*/"}}
{"code": {"body": "\tpublic static Image loadImage(String path) {\n\t\tURL imgUrl = Utils.class.getClassLoader().getResource(path);\n\t\treturn Toolkit.getDefaultToolkit().createImage(imgUrl);\n\t}", "comment": "/**\n\t * Reads an image from a file inside the current classpath.\n\t * \n\t * @return the image; can be displayed and used in ImageIcons.\n\t */"}}
{"code": {"body": "\tpublic static String extractMatch(String pattern, String source) {\n\t\tMatcher m = Pattern.compile(pattern).matcher(source);\n\t\tif (m.find()) {\n\t\t\treturn m.group(1);\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"\" + pattern + \"\" + source);\n\t\t}\n\t}", "comment": "/**\n\t * Extracts the first match of a pattern against a string.\n\t * \n\t * @param pattern\n\t *            to use, which MUST contain parenthesis. For example, to\n\t *            extract 15 from <code>\"a: 12, b: 15, c: -8\"</code>, the\n\t *            pattern <code>\"b: ([0-9-]+)\"</code> could be used.\n\t * @param source\n\t *            string, which is expected to contain the pattern\n\t * @return the first match; or an exception if no matches are found.\n\t */"}}
{"code": {"body": "\tpublic static Iterator<Color> colorsGenerator() {\n\n\t\tIterator<Color> i = new Iterator<Color>() {\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tprivate Random r = new Random(314159265);\n\n\t\t\t@Override\n\t\t\tpublic Color next() {\n\t\t\t\treturn new Color(r.nextInt(256), r.nextInt(256), r.nextInt(256));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean hasNext() {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void remove() {\n\t\t\t\tthrow new UnsupportedOperationException(\"\");\n\t\t\t}\n\t\t};\n\n\t\treturn i;\n\n\t}", "comment": "/**\n\t * Generates an iterator for generating random colors. It generates the same\n\t * sequences of colors over different runs since it always uses the same\n\t * seed.\n\t * \n\t * \n\t * @return An iterator for generating random colors.\n\t */"}}
{"code": {"body": "\tprivate static GameTable<?, ?> createGame(String juego) {\n\t\t\n\t\tGameState<?, ?> initialState;\n\t\tGameTable<?, ?> gameTable;\n\t\tif(juego.equalsIgnoreCase(\"\")) {\n\t\t\tinitialState = new TttState(3);\n\t\t\tgameTable = new GameTable(initialState);\n\t\t}\n\t\telse if (juego.equalsIgnoreCase(\"\")){\n\t\t\tinitialState = new WolfAndSheepState();\n\t\t\tgameTable = new GameTable(initialState);\n\t\t}\n\t\telse return null;\n\t\treturn gameTable;\n\t}", "comment": "/**\n\t * Crea el estado inicial del juego\n\t * @param juego\n\t * @return initialState juego creado o null si no es valido\n\t */"}}
{"code": {"body": "\tpublic static GameState<?,?> createInitialState(String juego) {\n\t\tGameState<?, ?> initialState;\n\t\tif(juego.equalsIgnoreCase(\"\")) {\n\t\t\tSystem.out.println(\"\");\n\t\t\tint dim = in.nextInt();\n\t\t\tinitialState = new TttState(dim);\n\t\t}\n\t\telse if (juego.equalsIgnoreCase(\"\")) initialState = new WolfAndSheepState();\n\t\telse return null;\n\t\treturn initialState;\n\t}", "comment": "/**\n\t * Crea el estado inicial del juego\n\t * @param juego\n\t * @return initialState juego creado o null si no es valido\n\t */"}}
{"code": {"body": "\tpublic static GamePlayer createPlayer(String gameName, String playerType, String playerName) {\n\t\tGamePlayer jugador;\n\t\tif(playerType.equalsIgnoreCase(\"\")) jugador = new ConsolePlayer(playerName, in);\n\t\telse if (playerType.equalsIgnoreCase(\"\"))jugador = new SmartPlayer(playerName, 5);\n\t\telse if (playerType.equalsIgnoreCase(\"\")) jugador = new RandomPlayer(playerName);\n\t\telse return null;\n\t\treturn jugador;\n\t\t\n\t}", "comment": "/**\n\t * Crea el jugador\n\t * @param gameName nombre del juego\n\t * @param playerType tipo de jugador\n\t * @param playerName nombre del jugador\n\t * @return jugador creado o null si no es valido\n\t */"}}
{"code": {"body": "\tpublic static void main(String[] args) {\n\t\tif (args.length < 2) {\n\t\t\tusage();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\tGameTable<?, ?> game = createGame(args[0]);\n\t\tif (game == null) {\n\t\t\tSystem.err.println(\"\");\n\t\t\tusage();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\tString[] otherArgs = Arrays.copyOfRange(args, 2, args.length);\n\t\tswitch (args[1]) {\n\t\t case \"\":\n\t\t\tstartConsoleMode(args[0], game, otherArgs);\n\t\t\tbreak;\n\t\t case \"\":\n\t\t\tstartGuiMode(args[0],game);\n\t\t\tbreak;\n\t\t default:\n\t\t\tSystem.err.println(\"\"+args[1]);\n\t\t\tusage();\n\t\t\tSystem.exit(1);\n\t\t}\n\t}", "comment": "/**\n\t * Main\n\t * @param args\n\t */"}}
{"code": {"body": "\tpublic static String printArray(int[] arr){\n\t\tif(arr==null){\n\t\t\tSystem.out.println(\"\");\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tStringBuffer sb = new StringBuffer();\n\t\tfor(int i=0;i<arr.length;i++){\n\t\t\tsb.append(arr[i]+\"\");\n\t\t}\n\t\t\n\t\treturn sb.toString();\n\t}", "comment": "/**\n\t * \u8f93\u51fa\u6570\u7ec4\u5143\u7d20\n\t * @param arr\n\t * @return\n\t */"}}
{"code": {"body": "\tpublic static <T> void binaryTreeMirror(BinaryTreeNode<T> root){\n\t\t\n\t\tif(root==null)\n\t\t\treturn;\n\t\t\n\t\t\n\t\tif(root.left==null && root.right==null)\n\t\t\treturn;\n\t\t\n\t\t\n\t\t{\n\t\t\t\n\t\t\tBinaryTreeNode<T> temp = root.left;\n\t\t\troot.left = root.right;\n\t\t\troot.right = temp;\n\t\t}\n\t\t\n\t\t\n\t\t{\n\t\t\tif(root.left!=null)\n\t\t\t\tbinaryTreeMirror(root.left);\n\t\t\tif(root.right!=null)\n\t\t\t\tbinaryTreeMirror(root.right);\n\t\t}\n\t}", "comment": "/**\n\t * \u4e8c\u53c9\u6811\u955c\u50cf\u51fd\u6570\n\t * @param root \u8f93\u5165\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\n\t */"}}
{"code": {"body": "\tpublic static <T> void preOrder(BinaryTreeNode<T> root){\n\t\t\n\t\tif(root==null)\n\t\t\treturn;\n\t\t\n\t\t\n\t\t{\n\t\t\tpreOrder(root.left);\n\t\t\tSystem.out.print(root.data+\"\");\n\t\t\tpreOrder(root.right);\n\t\t}\n\t}", "comment": "/**\n\t * \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\n\t * @param root \u8f93\u5165\u7684\u4e8c\u53c9\u6811\u7684\u6839\n\t */"}}
{"code": {"body": "\tpublic static boolean getMinKNumber(int[] a,int k){\n\t\t\n\t\tif(a==null || a.length<=0){\n\t\t\tSystem.out.println(\"\");\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t\n\t\tif(k>a.length){\n\t\t\tSystem.out.println(\"\");\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tTwoWayNode<Integer> first = new TwoWayNode<Integer>();\n\t\t{\n\t\t\tfirst.data = a[0];\n\t\t\t\n\t\t\tint link_node = 1;\n\t\t\t\n\t\t\tTwoWayNode<Integer> last = first;\n\t\t\t\n\t\t\tfor(int i=1;i<a.length;i++){\n\t\t\t\t\n\t\t\t\tif(a[i]<=last.data){\n\t\t\t\t\tSystem.out.println(\"\"+i+\"\"+a[i]+\"\");\n\t\t\t\t\t\n\t\t\t\t\tTwoWayNode<Integer> p = last.pre;\n\t\t\t\t\twhile(p!=null && p.data>a[i])\n\t\t\t\t\t\tp = p.pre;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tTwoWayNode<Integer> node = new TwoWayNode<Integer>();\n\t\t\t\t\tnode.data = a[i];\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tnode.next = p.next;\n\t\t\t\t\tnode.next.pre = node;\n\t\t\t\t\tp.next = node;\n\t\t\t\t\tnode.pre = p;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tlink_node++;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif(link_node==4){\n\t\t\t\t\t\t\n\t\t\t\t\t\tlast.pre.next = null;\n\t\t\t\t\t\tlast.pre = null;\n\t\t\t\t\t\t\n\t\t\t\t\t\tlink_node--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tTwoWayNode<Integer> node = first;\n\t\t\twhile(node!=null){\n\t\t\t\tSystem.out.print(node.data+\"\");\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}", "comment": "/**\n\t * \u83b7\u53d6\u6570\u7ec4a\u4e2d\u6700\u5c0f\u7684k\u4e2a\u6574\u6570\n\t * @param a \u8f93\u5165\u7684\u6570\u7ec4\n\t * @param k \u9700\u8981\u6253\u5370\u7684\u6700\u5c0f\u6570\u7684\u4e2a\u6570\n\t * @return \u8fd4\u56de\u7b97\u6cd5\u6267\u884c\u7ed3\u679c\n\t */"}}
{"code": {"body": "\tpublic static boolean getMinKNumber2(int[] a,int k){\n\t\t\n\t\tif(a==null || a.length<=0){\n\t\t\tSystem.out.println(\"\");\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t\n\t\tif(k>a.length){\n\t\t\tSystem.out.println(\"\");\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t\n\t\tTwoWayNode<Integer> first = new TwoWayNode<Integer>();\n\t\tfirst.next = first.pre = null;\n\t\tfirst.data = a[0];\n\t\t\n\t\tint node_count = 1;\n\t\t\n\t\tTwoWayNode<Integer> last = first;\n\t\t\n\t\t\n\t\tfor(int i=1;i<a.length;i++){\n\t\t\t\n\t\t\tif(node_count<k){\n\t\t\t\t\n\t\t\t\tinsertNodeByOrder(a[i],first,last);\n\t\t\t\t\n\t\t\t\tnode_count++;\n\n\t\t\t}\n\t\t\t\n\t\t\telse if(node_count>=k && a[i]<=last.data){\n\t\t\t\t\n\t\t\t\tinsertNodeByOrder(a[i],first,last);\n\t\t\t\t\n\t\t\t\tnode_count++;\n\t\t\t\t\n\t\t\t\tif(node_count>k){\n\t\t\t\t\t\n\t\t\t\t\tlast.pre.next = null;\n\t\t\t\t\tlast.pre = null;\n\t\t\t\t\t\n\t\t\t\t\tnode_count--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tTwoWayNode<Integer> p = first;\n\t\twhile(p!=null){\n\t\t\tSystem.out.print(p.data+\"\");\n\t\t\tp = p.next;\n\t\t}\n\t\tSystem.out.println(\"\");\n\t\treturn true;\n\t}", "comment": "/**\n\t * \u83b7\u53d6\u6570\u7ec4a\u4e2d\u6700\u5c0f\u7684k\u4e2a\u6574\u6570\n\t * @param a \u8f93\u5165\u7684\u6570\u7ec4\n\t * @param k \u9700\u8981\u6253\u5370\u7684\u6700\u5c0f\u6570\u7684\u4e2a\u6570\n\t * @return \u8fd4\u56de\u7b97\u6cd5\u6267\u884c\u7ed3\u679c\n\t */"}}
{"code": {"body": "\tprivate static void insertNodeByOrder(int a, TwoWayNode<Integer> first, TwoWayNode<Integer> last) {\n\t\t\n\t\tTwoWayNode<Integer> node = new TwoWayNode<Integer>();\n\t\tnode.data = a;\n\t\t\n\t\t\n\t\tif(last==null){\n\t\t\tlast = node;\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t\n\t\tTwoWayNode<Integer> p = last;\n\t\tSystem.out.println(\"\"+p!=null && p.data>a);\n\t\twhile(p!=null && p.data>a){\n\t\t\tp = p.pre;\n\t\t}\n\t\tSystem.out.println(\"\"+p.next);\n\t\t\n\t\t\n\t\tif(p==null){\n\t\t\tSystem.out.println(a+\"\"+first.data+\"\");\n\t\t\tfirst.pre = node;\n\t\t\tnode.next = first;\n\t\t\tfirst = node;\n\t\t}\n\t\t\n\t\t\n\t\telse if(p.next==null){\n\n\n\n\t\t\tnode.pre = last;\n\t\t\tlast.next = node;\n\t\t\tlast = node;\n\t\t\tSystem.out.println(\"\");\n\t\t}\n\t\t\n\t\t\n\t\telse{\n\t\t\tnode.next = p.next;\n\t\t\tp.next.pre = node;\n\t\t\tnode.pre = p;\n\t\t\tp.next = node;\n\t\t\tSystem.out.println(\"\");\n\t\t}\n\t\t\n\t\t\n\t\tTwoWayNode<Integer> t = first;\n\t\twhile(t!=null){\n\t\t\tSystem.out.print(t.data);\n\t\t\tt = t.next;\n\t\t}\n\t\tSystem.out.println(\"\");\n\n\t}", "comment": "/**\n\t * \u5411\u53cc\u5411\u94fe\u8868\u4e2d\u6309\u7167\u9012\u589e\u987a\u5e8f\u63d2\u5165\u4e00\u4e2a\u7ed3\u70b9\n\t * @param a \u5e26\u63d2\u5165\u7684\u7ed3\u70b9\u7684\u6570\u503c\n\t * @param first \u53cc\u5411\u94fe\u8868\u7684\u5934\u7ed3\u70b9\n\t * @param last \u53cc\u5411\u94fe\u8868\u7684\u5c3e\u7ed3\u70b9\n\t */"}}
{"code": {"body": "\tpublic static void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7};\n\t\tgetMinKNumber2(a,4);\n\t}", "comment": "/**\n\t * \u6d4b\u8bd5\n\t */"}}
{"code": {"body": "    public static void askToProm(String date_name) {\n\n        try {\n            Class<?> asking        = Class.forName(date_name);\n            Method   cheesy_poster = asking.getMethod(askMethod, Micah.class);\n            \n            \n            cheesy_poster.invoke(null, Micah.class.newInstance());            \n        \n        } catch (ClassNotFoundException e) {\n            mood = \"\";\n        } catch (NoSuchMethodException e) {\n            mood = \"\";\n        } catch (IllegalAccessException e) {\n            mood = \"\";\n        } catch (InvocationTargetException e) {\n            mood = \"\";\n        } catch (Throwable t) {\n            System.err.println(\"\"+t);\n        }\n    }", "comment": "/* please be Hannah */"}}
{"code": {"body": "    public static void askedToPromBy(Micah m) { answer = \"\"; }", "comment": "/* decided to give Micah the win here in accordance with the poster itself */"}}
{"code": {"body": "public CustomStack(int s) {\n        arr = new int[s];\n        size = s;\n        \n        top = -1;\n    }", "comment": "/**\n     * Constructor to initialize the stack.\n     *\n     * @param s - the size of the stack\n     */"}}
{"code": {"body": "    public boolean push(int value) {\n        if (isFull()) {\n            System.out.println(\"\");\n            return false;\n        } else {\n            System.out.println(\"\" + value);\n            top++;\n            arr[top] = value;\n            return true;\n        }\n    }", "comment": "/**\n     * Method that adds a new element to the stack.\n     *\n     * @param value - the value to be added\n     * @return - true if the value was inserted successfully and false otherwise\n     */"}}
{"code": {"body": "    public int pop() {\n        if (isEmpty()) {\n            System.out.println(\"\");\n            return 0;\n        }\n        int valueToReturn = arr[top];\n        System.out.println(\"\" + valueToReturn);\n        top--;\n        return valueToReturn;\n    }", "comment": "/**\n     * Method that returns end removes the top element from the stack. Program will close if the stack is empty.\n     *\n     * @return - the top element from the stack\n     */"}}
{"code": {"body": "    public int peek() {\n        if (isEmpty()) {\n            System.out.println(\"\");\n            return 0;\n        } else {\n            return arr[top];\n        }\n    }", "comment": "/**\n     * @return - the top element from the stack without removing it.\n     */"}}
{"code": {"body": "    public boolean isEmpty() {\n        if (top < 0) {\n            return true;\n        }\n        return false;\n    }", "comment": "/**\n     * Method that checks if the stack is empty.\n     *\n     * @return - true if the stack is empty and false otherwise.\n     */"}}
{"code": {"body": "    public boolean isFull() {\n        if (top == size - 1) {\n            return true;\n        }\n        return false;\n    }", "comment": "/**\n     * Method that check if the stack is full.\n     *\n     * @return - true if the stack is full and false otherwise\n     */"}}
{"code": {"body": "\tpublic static void main(String[] args) {\n\t\t\n\t\t\n\t\t\n\t\tSystem.out.println(\"\");\n\t\t\n\t}", "comment": "/**\n\t\t * Create a simple Java program PrintHometown.java (console application)\n\t\t * to print the name of your hometown, compile and run it. \n\t\t */"}}
{"code": {"body": "public Login_Form() {\n        initComponents();\n        this.setLocationRelativeTo(null); \n    }", "comment": "/**\n     * Creates new form Login_Form\n     */"}}
{"code": {"body": "    public static void main(String args[]) {\n        \n        \n        \n        try {\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n                if (\"\".equals(info.getName())) {\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                    break;\n                }\n            }\n        } catch (ClassNotFoundException ex) {\n            java.util.logging.Logger.getLogger(Login_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (InstantiationException ex) {\n            java.util.logging.Logger.getLogger(Login_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (IllegalAccessException ex) {\n            java.util.logging.Logger.getLogger(Login_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n            java.util.logging.Logger.getLogger(Login_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        }\n        \n\n        \n        java.awt.EventQueue.invokeLater(new Runnable() {\n            public void run() {\n                new Login_Form().setVisible(true);\n            }\n        });\n    }", "comment": "/**\n     * @param args the command line arguments\n     */"}}
{"code": {"body": "public BCodec() {\n        this(Charsets.UTF_8);\n    }", "comment": "/**\n     * Default constructor.\n     */"}}
{"code": {"body": "public BCodec(final Charset charset) {\n        this.charset = charset;\n    }", "comment": "/**\n     * Constructor which allows for the selection of a default charset\n     *\n     * @param charset\n     *            the default string charset to use.\n     *\n     * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     * @since 1.7\n     */"}}
{"code": {"body": "public BCodec(final String charsetName) {\n        this(Charset.forName(charsetName));\n    }", "comment": "/**\n     * Constructor which allows for the selection of a default charset\n     *\n     * @param charsetName\n     *            the default charset to use.\n     * @throws java.nio.charset.UnsupportedCharsetException\n     *             If the named charset is unavailable\n     * @since 1.7 throws UnsupportedCharsetException if the named charset is unavailable\n     * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n     */"}}
{"code": {"body": "    public Charset getCharset() {\n        return this.charset;\n    }", "comment": "/**\n     * Gets the default charset name used for string decoding and encoding.\n     *\n     * @return the default charset name\n     * @since 1.7\n     */"}}
{"code": {"body": "    public String getDefaultCharset() {\n        return this.charset.name();\n    }", "comment": "/**\n     * Gets the default charset name used for string decoding and encoding.\n     *\n     * @return the default charset name\n     */"}}
{"code": {"body": "    public static void close() {\n        if (!isInitialized) initialize();\n        try {\n            in.close();\n            isInitialized = false;\n        }\n        catch (IOException ioe) {\n            throw new IllegalStateException(\"\", ioe);\n        }\n    }", "comment": "/**\n     * Close this input stream and release any associated system resources.\n     */"}}
{"code": {"body": "    public static boolean isEmpty() {\n        if (!isInitialized) initialize();\n        return buffer == EOF;\n    }", "comment": "/**\n     * Returns true if standard input is empty.\n     * @return true if and only if standard input is empty\n     */"}}
{"code": {"body": "    public static boolean readBoolean() {\n        if (isEmpty()) throw new NoSuchElementException(\"\");\n        n--;\n        boolean bit = ((buffer >> n) & 1) == 1;\n        if (n == 0) fillBuffer();\n        return bit;\n    }", "comment": "/**\n     * Reads the next bit of data from standard input and return as a boolean.\n     *\n     * @return the next bit of data from standard input as a {@code boolean}\n     * @throws NoSuchElementException if standard input is empty\n     */"}}
{"code": {"body": "    public static char readChar(int r) {\n        if (r < 1 || r > 16) throw new IllegalArgumentException(\"\" + r);\n\n        \n        if (r == 8) return readChar();\n\n        char x = 0;\n        for (int i = 0; i < r; i++) {\n            x <<= 1;\n            boolean bit = readBoolean();\n            if (bit) x |= 1;\n        }\n        return x;\n    }", "comment": "/**\n     * Reads the next r bits from standard input and return as an r-bit character.\n     *\n     * @param  r number of bits to read.\n     * @return the next r bits of data from standard input as a {@code char}\n     * @throws NoSuchElementException if there are fewer than {@code r} bits available on standard input\n     * @throws IllegalArgumentException unless {@code 1 <= r <= 16}\n     */"}}
{"code": {"body": "    public static String readString() {\n        if (isEmpty()) throw new NoSuchElementException(\"\");\n\n        StringBuilder sb = new StringBuilder();\n        while (!isEmpty()) {\n            char c = readChar();\n            sb.append(c);\n        }\n        return sb.toString();\n    }", "comment": "/**\n     * Reads the remaining bytes of data from standard input and return as a string. \n     *\n     * @return the remaining bytes of data from standard input as a {@code String}\n     * @throws NoSuchElementException if standard input is empty or if the number of bits\n     *         available on standard input is not a multiple of 8 (byte-aligned)\n     */"}}
{"code": {"body": "    public static short readShort() {\n        short x = 0;\n        for (int i = 0; i < 2; i++) {\n            char c = readChar();\n            x <<= 8;\n            x |= c;\n        }\n        return x;\n    }", "comment": "/**\n     * Reads the next 16 bits from standard input and return as a 16-bit short.\n     *\n     * @return the next 16 bits of data from standard input as a {@code short}\n     * @throws NoSuchElementException if there are fewer than 16 bits available on standard input\n     */"}}
{"code": {"body": "    public static int readInt(int r) {\n        if (r < 1 || r > 32) throw new IllegalArgumentException(\"\" + r);\n\n        \n        if (r == 32) return readInt();\n\n        int x = 0;\n        for (int i = 0; i < r; i++) {\n            x <<= 1;\n            boolean bit = readBoolean();\n            if (bit) x |= 1;\n        }\n        return x;\n    }", "comment": "/**\n     * Reads the next r bits from standard input and return as an r-bit int.\n     *\n     * @param  r number of bits to read.\n     * @return the next r bits of data from standard input as a {@code int}\n     * @throws NoSuchElementException if there are fewer than {@code r} bits available on standard input\n     * @throws IllegalArgumentException unless {@code 1 <= r <= 32}\n     */"}}
{"code": {"body": "    public static long readLong() {\n        long x = 0;\n        for (int i = 0; i < 8; i++) {\n            char c = readChar();\n            x <<= 8;\n            x |= c;\n        }\n        return x;\n    }", "comment": "/**\n     * Reads the next 64 bits from standard input and return as a 64-bit long.\n     *\n     * @return the next 64 bits of data from standard input as a {@code long}\n     * @throws NoSuchElementException if there are fewer than 64 bits available on standard input\n     */"}}
{"code": {"body": "    public static double readDouble() {\n        return Double.longBitsToDouble(readLong());\n    }", "comment": "/**\n     * Reads the next 64 bits from standard input and return as a 64-bit double.\n     *\n     * @return the next 64 bits of data from standard input as a {@code double}\n     * @throws NoSuchElementException if there are fewer than 64 bits available on standard input\n     */"}}
{"code": {"body": "    public static float readFloat() {\n        return Float.intBitsToFloat(readInt());\n    }", "comment": "/**\n     * Reads the next 32 bits from standard input and return as a 32-bit float.\n     *\n     * @return the next 32 bits of data from standard input as a {@code float}\n     * @throws NoSuchElementException if there are fewer than 32 bits available on standard input\n     */"}}
{"code": {"body": "    public static byte readByte() {\n        char c = readChar();\n        return (byte) (c & 0xff);\n    }", "comment": "/**\n     * Reads the next 8 bits from standard input and return as an 8-bit byte.\n     *\n     * @return the next 8 bits of data from standard input as a {@code byte}\n     * @throws NoSuchElementException if there are fewer than 8 bits available on standard input\n     */"}}
{"code": {"body": "    public static void main(String[] args) {\n\n        \n        while (!BinaryStdIn.isEmpty()) {\n            char c = BinaryStdIn.readChar();\n            BinaryStdOut.write(c);\n        }\n        BinaryStdOut.flush();\n    }", "comment": "/**\n     * Test client. Reads in a binary input file from standard input and writes\n     * it to standard output.\n     *\n     * @param args the command-line arguments\n     */"}}
{"code": {"body": "    public static void close() {\n        if (!isInitialized) initialize();\n        try {\n            in.close();\n            isInitialized = false;\n        }\n        catch (IOException ioe) {\n            throw new IllegalStateException(\"\", ioe);\n        }\n    }", "comment": "/**\n     * Close this input stream and release any associated system resources.\n     */"}}
{"code": {"body": "    public static boolean isEmpty() {\n        if (!isInitialized) initialize();\n        return buffer == EOF;\n    }", "comment": "/**\n     * Returns true if standard input is empty.\n     * @return true if and only if standard input is empty\n     */"}}
{"code": {"body": "    public static boolean readBoolean() {\n        if (isEmpty()) throw new NoSuchElementException(\"\");\n        n--;\n        boolean bit = ((buffer >> n) & 1) == 1;\n        if (n == 0) fillBuffer();\n        return bit;\n    }", "comment": "/**\n     * Reads the next bit of data from standard input and return as a boolean.\n     *\n     * @return the next bit of data from standard input as a {@code boolean}\n     * @throws NoSuchElementException if standard input is empty\n     */"}}
{"code": {"body": "    public static char readChar(int r) {\n        if (r < 1 || r > 16) throw new IllegalArgumentException(\"\" + r);\n\n        \n        if (r == 8) return readChar();\n\n        char x = 0;\n        for (int i = 0; i < r; i++) {\n            x <<= 1;\n            boolean bit = readBoolean();\n            if (bit) x |= 1;\n        }\n        return x;\n    }", "comment": "/**\n     * Reads the next r bits from standard input and return as an r-bit character.\n     *\n     * @param  r number of bits to read.\n     * @return the next r bits of data from standard input as a {@code char}\n     * @throws NoSuchElementException if there are fewer than {@code r} bits available on standard input\n     * @throws IllegalArgumentException unless {@code 1 <= r <= 16}\n     */"}}
{"code": {"body": "    public static String readString() {\n        if (isEmpty()) throw new NoSuchElementException(\"\");\n\n        StringBuilder sb = new StringBuilder();\n        while (!isEmpty()) {\n            char c = readChar();\n            sb.append(c);\n        }\n        return sb.toString();\n    }", "comment": "/**\n     * Reads the remaining bytes of data from standard input and return as a string. \n     *\n     * @return the remaining bytes of data from standard input as a {@code String}\n     * @throws NoSuchElementException if standard input is empty or if the number of bits\n     *         available on standard input is not a multiple of 8 (byte-aligned)\n     */"}}
{"code": {"body": "    public static short readShort() {\n        short x = 0;\n        for (int i = 0; i < 2; i++) {\n            char c = readChar();\n            x <<= 8;\n            x |= c;\n        }\n        return x;\n    }", "comment": "/**\n     * Reads the next 16 bits from standard input and return as a 16-bit short.\n     *\n     * @return the next 16 bits of data from standard input as a {@code short}\n     * @throws NoSuchElementException if there are fewer than 16 bits available on standard input\n     */"}}
{"code": {"body": "    public static int readInt(int r) {\n        if (r < 1 || r > 32) throw new IllegalArgumentException(\"\" + r);\n\n        \n        if (r == 32) return readInt();\n\n        int x = 0;\n        for (int i = 0; i < r; i++) {\n            x <<= 1;\n            boolean bit = readBoolean();\n            if (bit) x |= 1;\n        }\n        return x;\n    }", "comment": "/**\n     * Reads the next r bits from standard input and return as an r-bit int.\n     *\n     * @param  r number of bits to read.\n     * @return the next r bits of data from standard input as a {@code int}\n     * @throws NoSuchElementException if there are fewer than {@code r} bits available on standard input\n     * @throws IllegalArgumentException unless {@code 1 <= r <= 32}\n     */"}}
{"code": {"body": "    public static long readLong() {\n        long x = 0;\n        for (int i = 0; i < 8; i++) {\n            char c = readChar();\n            x <<= 8;\n            x |= c;\n        }\n        return x;\n    }", "comment": "/**\n     * Reads the next 64 bits from standard input and return as a 64-bit long.\n     *\n     * @return the next 64 bits of data from standard input as a {@code long}\n     * @throws NoSuchElementException if there are fewer than 64 bits available on standard input\n     */"}}
{"code": {"body": "    public static double readDouble() {\n        return Double.longBitsToDouble(readLong());\n    }", "comment": "/**\n     * Reads the next 64 bits from standard input and return as a 64-bit double.\n     *\n     * @return the next 64 bits of data from standard input as a {@code double}\n     * @throws NoSuchElementException if there are fewer than 64 bits available on standard input\n     */"}}
{"code": {"body": "    public static float readFloat() {\n        return Float.intBitsToFloat(readInt());\n    }", "comment": "/**\n     * Reads the next 32 bits from standard input and return as a 32-bit float.\n     *\n     * @return the next 32 bits of data from standard input as a {@code float}\n     * @throws NoSuchElementException if there are fewer than 32 bits available on standard input\n     */"}}
{"code": {"body": "    public static byte readByte() {\n        char c = readChar();\n        return (byte) (c & 0xff);\n    }", "comment": "/**\n     * Reads the next 8 bits from standard input and return as an 8-bit byte.\n     *\n     * @return the next 8 bits of data from standard input as a {@code byte}\n     * @throws NoSuchElementException if there are fewer than 8 bits available on standard input\n     */"}}
{"code": {"body": "    public static void main(String[] args) {\n\n        \n        while (!BinaryStdIn.isEmpty()) {\n            char c = BinaryStdIn.readChar();\n            BinaryStdOut.write(c);\n        }\n        BinaryStdOut.flush();\n    }", "comment": "/**\n     * Test client. Reads in a binary input file from standard input and writes\n     * it to standard output.\n     *\n     * @param args the command-line arguments\n     */"}}
{"code": {"body": "    public String getUserName() {\n        return userName;\n    }", "comment": "/**\n     * Gets the user name.\n     *\n     * @return the user name\n     */"}}
{"code": {"body": "    public void setUserName(String userName) {\n        this.userName = userName;\n    }", "comment": "/**\n     * Sets the user name.\n     *\n     * @param userName\n     *            the new user name\n     */"}}
{"code": {"body": "    public String getPassword() {\n        return password;\n    }", "comment": "/**\n     * Gets the password.\n     *\n     * @return the password\n     */"}}
{"code": {"body": "    public void setPassword(String password) {\n        this.password = password;\n    }", "comment": "/**\n     * Sets the password.\n     *\n     * @param password\n     *            the new password\n     */"}}
{"code": {"body": "\tpublic static Arg arg( Param param, Object value, String external ) {\n\t\treturn new Arg( param, value, external );\n\t}", "comment": "/**\n\t * as entered (externally) - not parsed into the internal form.\n\t */"}}
{"code": {"body": "    public static void main(String[] args) {\n        PApplet.main(new String[]{\"\"});\n    }", "comment": "/**\n     * @param args the command line arguments\n     */"}}
{"code": {"body": "    public long diff(ttyHeader h)\n    {\n\tlong t \n\t    = (tv_sec*1000 + tv_usec/1000) - (h.tv_sec*1000 + h.tv_usec/1000);\n\treturn t;\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    void print()\n    {\n\tSystem.out.println(\"\" + tv_sec + \"\" + tv_usec);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    private int toInt(byte b[], int i)\n    {\n\tint  n = 0;\n\tint  f = 1;\n\tfor (int k = 0; k < 4; k++){\n\t    n = n + f * bconv(b[i+k]);\n\t    f = f * 0x100;\n\t}\n\treturn n;\n\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    private int bconv(byte b)\n    {\n\tif (b < 0)\n\t    return b + 256;\n\treturn b;\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void init(URL codeBase, Graphics g, boolean toolbar)\n    {\n\tgr  = g;\n\tmode_reverse_video = false;\n\tif (toolbar)\n\t    toolbar_space = 16;\n\tfont_ank = new ttyFont(codeBase, \n\t\t\t       \"\",     ttyFont.TYPE94); \n\tfont_knj = new ttyFont(codeBase, \n\t\t\t       \"\", ttyFont.TYPE94x94);\n\n\tpalette = new Color[16];\n\tpalette[ 0] = new Color(  0,  0,  0);\n\tpalette[ 1] = new Color(192,  0,  0);\n\tpalette[ 2] = new Color(  0,192,  0);\n\tpalette[ 3] = new Color(192,192,  0);\n\tpalette[ 4] = new Color(  0,  0,192);\n\tpalette[ 5] = new Color(192,  0,192);\n\tpalette[ 6] = new Color(  0,192,192);\n\tpalette[ 7] = new Color(255,255,255);\n\tpalette[ 8] = new Color(  0,  0,  0);\n\tpalette[ 9] = new Color(255,  0,  0);\n\tpalette[10] = new Color(  0,255,  0);\n\tpalette[11] = new Color(255,255,  0);\n\tpalette[12] = new Color(  0,  0,255);\n\tpalette[13] = new Color(255,  0,255);\n\tpalette[14] = new Color(  0,255,255);\n\tpalette[15] = new Color(192,192,192);\n\treset();\n\tif (toolbar)\n\t    gToolbar();\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void start()\n    {\n\tSystem.out.println(\"\");\n\tif (runner == null){\n\t    runner = new Thread(this);\n\t    runner.start();\n\t}\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void stop()\n    {\n\tSystem.out.println(\"\");\n\trunner = null;\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void destroy()\n    {\n\tSystem.out.println(\"\");\n\trunner = null;\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void update(Graphics g)\n    {\n\t\n\tpaint(g);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void paint(Graphics g)\n    {\n\t\n\tg.drawImage(ofsImage, 0, 0, this);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void run()\n    {\n\t\n\n\tString   s_ttyfile, s_ttyurl;\n\tString   s_speed, s_rvvideo, s_repeat, s_toolbar;\n\tboolean  p_repeat  = false;\n\tboolean  p_toolbar = false;\n\tURL url;\n\tInputStream tty;\n\tGZIPInputStream gtty;\n\n\ttry {\n\t    s_ttyfile = getParameter(\"\");\n\t    s_ttyurl  = getParameter(\"\");\n\t    if ((s_ttyfile == null) && (s_ttyurl == null)){\n\t\tSystem.out.println(\"\");\n\t\tthrow new IOException(\"\");\n\t    }\n\t    s_speed = getParameter(\"\");\n\t    if ((s_speed != null) && \n\t\t(new Double(s_speed).doubleValue() > 0.01))\n\t\tspeed = speed * new Double(s_speed).doubleValue();\n\t    s_rvvideo = getParameter(\"\");\n\t    if ((s_rvvideo != null) && (s_rvvideo.equals(\"\")))\n\t\tscreen.set_mode_reverse_video(true);\n\t    s_repeat = getParameter(\"\");\n\t    if ((s_repeat != null) && (s_repeat.equals(\"\")))\n\t\tp_repeat = true;\n\t    s_toolbar = getParameter(\"\");\n\t    if ((s_toolbar != null) && (s_toolbar.equals(\"\")))\n\t\tp_toolbar = true;\n\n\t    screen = new ttyScreen(getCodeBase(), \n\t\t\t\t   ofsImage.getGraphics(), p_toolbar);\n\n\t    do {\n\t\tString  name   = s_ttyfile;\n\t\tboolean zipped = false;\n\t\tif (s_ttyfile != null){\n\t\t    name   = s_ttyfile;\n\t\t    url = new URL(getDocumentBase(), name);\n\t\t} else {\n\t\t    name   = s_ttyurl;\n\t\t    url = new URL(name);\n\t\t} \n\t\tif ((name.length() > 3) &&\n\t\t    name.regionMatches(name.length()-3, \"\", 0, 3)){\n\t\t    tty = new GZIPInputStream(url.openStream());\n\t\t} else {\n\t\t    tty = new DataInputStream(url.openStream());\n\t\t}\n\t\ttry {\n\t\t    screen.reset();\n\t\t    ttyHeader ohdr = null;\n\t\t    int  lineno = 0;\n\t\t    int  disp_skipped = 0; \n\t\t    while (runner == Thread.currentThread()){\n\t\t\tlineno++;\n\t\t\tttyHeader hdr = new ttyHeader(tty);\n\t\t\tif (hdr.len < 0)\n\t\t\t    break;\n\t\t\tbyte[] data = readData(hdr, tty);\n\t\t\tif (ohdr == null)\n\t\t\t    ohdr = hdr;\n\t\t\tlong xt = (long)(hdr.diff(ohdr)/speed);\n\t\t\t\n\t\t\txt = xt - 50;\n\t\t\tif (xt > 0){\n\t\t\t    repaint();\n\t\t\t    disp_skipped = 0;\n\t\t\t    Thread.sleep(xt);\n\t\t\t} else {\n\t\t\t    if (++disp_skipped > 5){\n\t\t\t\trepaint();\n\t\t\t\tdisp_skipped = 0;\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tscreen.drawData(data);\n\t\t\tohdr = hdr;\n\t\t    }\n\t\t} catch (IOException e){\n\t\t    throw e;\n\t\t} catch (InterruptedException e){\n\t\t    ;\n\t\t} catch (Exception e){\n\t\t    e.printStackTrace();\n\t\t} finally {\n\t\t    tty.close();\n\t\t} \n\t\tif (runner == null)\n\t\t  break;\n\t    } while (p_repeat);\n\t} catch (IOException e){\n\t    e.printStackTrace();\n\t    stop();\n\t} \n\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    private byte[] readData(ttyHeader hdr, InputStream st)\n\tthrows IOException\n    {\n\tint  pos = 0;\n\tbyte[] buff = new byte[hdr.len];\n\twhile (pos < hdr.len){\n\t    int len = st.read(buff, pos, hdr.len-pos);\n\t    pos = pos + len;\n\t}\n\treturn buff;\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void processMouseEvent(MouseEvent e)\n    {\n\tif (e.getID() == MouseEvent.MOUSE_PRESSED){\n\t    System.out.println(\"\" \n\t\t\t       + e.getX() + \"\" + e.getY()); \n\t} else {\n\t    super.processMouseEvent(e);\n\t}\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void set_mode_reverse_video(boolean mode){\n\tmode_reverse_video = mode; \n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void reset()\n    {\n\tstate = STATE_0;\n\tst_ch = 0;\n\tst_mode_insert = false;\n\tst_mode_autolf = false;\t\n\tst_scroll_top = 1;\n\tst_scroll_bot = MAX_Y;\n\tcurs_x = 0; \n\tcurs_y = 0;\n\tif (mode_reverse_video){\n\t    def_text = col_text = 7;\n\t    def_back = col_back = 0;\n\t} else {\n\t    def_text = col_text = 0;\n\t    def_back = col_back = 7;\n\t}\n\tcls();\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void gToolbar()\n    {\n\tColor col[]  = new Color[2];\n\tcol[0] = new Color(224,224,224);\n\tcol[1] = new Color(  0,  0,  0);\n\t\n\tgr.setColor(col[0]);\n\tgr.fillRect(0, 0, MAX_X*CHAR_W, toolbar_space);\n\n\tint m = 2;\n\tint r = m+2;\n\tgr.setColor(col[1]);\n\tgr.drawRect(m+4, m, toolbar_space-2*m-1, toolbar_space-2*m-1);\n\tgr.drawRect(r+4, r, toolbar_space-2*r-1, toolbar_space-2*r-1);\n\n\tint g = 0;\n\tgr.setColor(col[1]);\n\tfor (int x = 16+8; x < MAX_X*CHAR_W; x++){\n\t    for (int y = g; y < toolbar_space-g; y++){\n\t\tif (((x+y)%2) == 0)\n\t\t    gr.drawLine(x, y, x, y); \n\t    }\t    \n\t}\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void gClear(int x1, int y1, int x2, int y2)\n    {\n\tgr.setColor(palette[col_back]);\n\tgr.fillRect(CHAR_W*x1,         toolbar_space + CHAR_H*y1, \n\t\t    CHAR_W*(x2-x1+1),  CHAR_H*(y2-y1+1)); \n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void gCopyArea(int y1, int y2, int d)\n    {\n\t\n\tgr.setColor(palette[col_back]);\n\tgr.copyArea(0, toolbar_space + CHAR_H*y1, \n\t\t    CHAR_W*MAX_X,  CHAR_H*(y2-y1+1),\n\t\t    0, CHAR_H*d); \n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public int gDrawChar(int x, int y)\n    {\n\treturn gDrawChar(x, y, false);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void gCursDraw()\n    {\n\tif (curs_x < MAX_X)\n\t    gDrawChar(curs_x, curs_y, true);\n\telse \n\t    gDrawChar(MAX_X-1, curs_y, true);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void gCursClear()\n    {\n\tif (curs_x < MAX_X)\n\t    gDrawChar(curs_x, curs_y, false);\n\telse \n\t    gDrawChar(MAX_X-1, curs_y, false);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void curs_goto(int y, int x)\n    {\n\t\n\tcurs_y = y-1;\n\tcurs_x = x-1;\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void curs_goto_x(int x)\n    {\n\t\n\tif (x > MAX_X)\n\t    x = MAX_X;\n\tcurs_x = x-1;\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void curs_goto_y(int y)\n    {\n\t\n\tcurs_y = y-1;\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void curs_rgoto_x(int dx)\n    {\n\tcurs_x += dx;\n\tif (curs_x < 0)\n\t    curs_x = 0;\n\tif (curs_x > MAX_X)\n\t    curs_x = MAX_X;\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void curs_rgoto_y(int dy)\n    {\n\tcurs_y += dy;\n\tif (curs_y < 0)\n\t    curs_y = 0;\n\tif (curs_y >= MAX_Y)\n\t    curs_y = MAX_Y-1;\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void curs_up(int n)\n    {\n\tcurs_rgoto_y(-n);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void curs_down(int n)\n    {\n\tcurs_rgoto_y(n);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void curs_right(int n)\n    {\n\tcurs_rgoto_x(n);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void curs_left(int n)\n    {\n\tcurs_rgoto_x(-n);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void set_text_col(int c)\n    {\n\tcol_text = c;\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void set_back_col(int c)\n    {\n\tcol_back = c;\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void set_attr(int attr)\n    {\n\t\n\tif (attr == 0){\n\t    col_text = def_text;\n\t    col_back = def_back;\n\t} else if (attr == 1){\n\t    \n\t} else if (attr == 22){\n\t    \n\t} else if (attr == 4){\n\t    \n\t} else if (attr == 24){\n\t    \n\t} else if (attr == 5){\n\t    \n\t    int tmp = col_text;\n\t    col_text = col_back;\n\t    col_back = tmp;\n\t} else if (attr == 25){\n\t    \n\t    int tmp = col_text;\n\t    col_text = col_back;\n\t    col_back = tmp;\n\t} else if (attr == 7){\n\t    int tmp = col_text;\n\t    col_text = col_back;\n\t    col_back = tmp;\n\t} else if (attr == 27){\n\t    int tmp = col_text;\n\t    col_text = col_back;\n\t    col_back = tmp;\n\t} else if ((30 <= attr) && (attr <= 37)){\n\t    col_text = attr - 30;\n\t} else if (attr == 39){\n\t    col_text = def_text;\n\t} else if ((40 <= attr) && (attr <= 47)){\n\t    col_back = attr - 40;\n\t} else if (attr == 49){\n\t    col_back = def_back;\n\t}\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void set_char(int x, int y, int ch, int ctext, int cback)\n    {\n\tint och = w_char[x][y];\n\n\tw_char[x][y] = ch;\n\tw_colt[x][y] = ctext;\n\tw_colb[x][y] = cback;\n\tif ((och >= 0x80) && (x < MAX_X-1)){\n\t    w_char[x+1][y] = '';\n\t    w_colt[x+1][y] = ctext;\n\t    w_colb[x+1][y] = cback;\n\t}\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void ins_char(int ch, int ctext, int cback)\n    {\n\tfor (int x = MAX_X-1; x > curs_x; x--){\n\t    w_char[x][curs_y] = w_char[x-1][curs_y];\n\t    w_colt[x][curs_y] = w_colt[x-1][curs_y];\n\t    w_colb[x][curs_y] = w_colb[x-1][curs_y];\n\t}\n\tw_char[curs_x][curs_y] = ch;\n\tw_colt[curs_x][curs_y] = ctext;\n\tw_colb[curs_x][curs_y] = cback;\n\tfor (int x = curs_x; x < MAX_X; )\n\t    x += gDrawChar(x, curs_y);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void ins_char2(int ch1, int ch2, int ctext, int cback)\n    {\n\tfor (int x = MAX_X-1; x > curs_x+1; x--){\n\t    w_char[x][curs_y] = w_char[x-2][curs_y];\n\t    w_colt[x][curs_y] = w_colt[x-2][curs_y];\n\t    w_colb[x][curs_y] = w_colb[x-2][curs_y];\n\t}\n\tw_char[curs_x+0][curs_y] = ch1;\n\tw_colt[curs_x+0][curs_y] = ctext;\n\tw_colb[curs_x+0][curs_y] = cback;\n\tw_char[curs_x+1][curs_y] = ch2;\n\tw_colt[curs_x+1][curs_y] = ctext;\n\tw_colb[curs_x+1][curs_y] = cback;\n\tfor (int x = curs_x; x < MAX_X; )\n\t    x += gDrawChar(x, curs_y);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void ins_spaces(int n, int ctext, int cback)\n    {\t\n\tif (n == PARAM_DEFAULT)\n\t    n = 1;\n\tfor (int i = 0; i < n; i++){\n\t    for (int x = MAX_X-1; x > curs_x; x--){\n\t\tw_char[x][curs_y] = w_char[x-1][curs_y];\n\t\tw_colt[x][curs_y] = w_colt[x-1][curs_y];\n\t\tw_colb[x][curs_y] = w_colb[x-1][curs_y];\n\t    }\n\t    w_char[curs_x][curs_y] = '';\n\t    w_colt[curs_x][curs_y] = ctext;\n\t    w_colb[curs_x][curs_y] = cback;\n\t}\n\tfor (int x = curs_x; x < MAX_X; )\n\t    x += gDrawChar(x, curs_y);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void lf()\n    {\n\t\n\tif (curs_y < st_scroll_bot-1){\n\t    curs_rgoto_y(1);\n\t} else {\n\t    for (int y = st_scroll_top; y < st_scroll_bot-1; y++){\n\t\tfor (int x = 0; x < MAX_X; x++)\n\t\t    set_char(x, y, w_char[x][y+1],\n\t\t\t     w_colt[x][y+1], w_colb[x][y+1]);\n\t    }\n\t    for (int x = 0; x < MAX_X; x++)\n\t\tset_char(x, st_scroll_bot-1, '', col_text, col_back);\n\t    gCopyArea(st_scroll_top, st_scroll_bot-1, -1);\n\t    gClear(0, st_scroll_bot-1, MAX_X-1, st_scroll_bot-1);\n\t}\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void tab(int n)\n    {\n\tif (n == PARAM_DEFAULT)\n\t    n = 1;\n\ttab2(n);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void back_tab(int n)\n    {\n\tif (n == PARAM_DEFAULT)\n\t    n = -1;\n\ttab2(-n);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void tab2(int n)\n    {\n\tif (n == 0)\n\t    return;\n\tint t = ((curs_x + n*TAB_STOP) / TAB_STOP) * TAB_STOP;\n\t\n\tif (t >= 1)\n\t    curs_goto_x(t + 1);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void put_spaces(int n)\n    {\n\tSystem.out.println(\"\" + (n)); \n\tfor (int i = 0; i < n; i++){\n\t    set_char(curs_x, curs_y, '' , col_text, col_back);\n\t    gDrawChar(curs_x, curs_y);\n\t    curs_x++;\n\t}\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void cls()\n    {\n\terase_display(2);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void erase_display(int n)\n    {\n\tif (n == PARAM_DEFAULT)\n\t    n = 0;\n\n\tint yb = 0;\n\tint ye = MAX_Y-1;\n\tif (n == 0){\n\t    yb = curs_y+1;\n\t    ye = MAX_Y-1;\n\t} else if (n == 1){\n\t    yb = 0;\n\t    ye = curs_y-1;\n\t} else if (n == 2){\n\t    yb = 0;\n\t    ye = MAX_Y-1;\n\t} \n\tfor (int y = yb; y <= ye; y++){\n\t    for (int x = 0; x < MAX_X; x++)\n\t\tset_char(x, y, '', col_text, col_back);\n\t}\n\tgClear(0, yb, MAX_X-1, ye);\n\terase_line(n);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void erase_line(int n)\n    {\n\tif (n == PARAM_DEFAULT)\n\t    n = 0;\n\n\tint xb = curs_x;\n\tint xe = MAX_X-1;\n\tif (n == 0){\n\t    xb = curs_x;\n\t    xe = MAX_X-1;\n\t} else if (n == 1){\n\t    xb = 0;\n\t    xe = curs_x;\n\t} else if (n == 2){\n\t    xb = 0;\n\t    xe = MAX_X-1;\n\t} \n\tfor (int x = xb; x <= xe; x++)\n\t    set_char(x, curs_y, '', col_text, col_back);\n\tgClear(xb, curs_y, xe, curs_y);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void erase_nchars(int n)\n    {\n\tif (n == PARAM_DEFAULT)\n\t    n = 1;\n\tfor (int i = 0; i < n; i++){\n\t    set_char(curs_x+i, curs_y, '', col_text, col_back);\n\t    gDrawChar(curs_x+i, curs_y);\n\t}\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void delete_nchars(int n)\n    {\n\tif (n == PARAM_DEFAULT)\n\t    n = 1;\n\tfor (int x = curs_x+n; x < MAX_X; x++){\n\t    set_char(x-n, curs_y, w_char[x][curs_y],\n\t\t     w_colt[x][curs_y], w_colb[x][curs_y]);\n\t}\n\tfor (int x = MAX_X; x < MAX_X+n; x++)\n\t    set_char(x-n, curs_y, '', col_text, col_back);\n\tfor (int x = curs_x; x < MAX_X; )\n\t    x += gDrawChar(x, curs_y);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void delete_lines(int n)\n    {   \n\tif (n == PARAM_DEFAULT)\n\t    n = 1;\n\tfor (int y = curs_y; y <= st_scroll_bot-1; y++){\n\t    if (y+n <= st_scroll_bot-1){\n\t\tfor (int x = 0; x < MAX_X; x++)\n\t\t    set_char(x, y, w_char[x][y+n], \n\t\t\t     w_colt[x][y+n], w_colb[x][y+n]);\n\t    } else {\n\t\tfor (int x = 0; x < MAX_X; x++)\n\t\t    set_char(x, y, '', col_text, col_back);\n\t    }\n\t}\n\tgCopyArea(curs_y+n, st_scroll_bot, -n);\n\tgClear(0, st_scroll_bot - n, MAX_X-1, st_scroll_bot - 1);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void insert_lines(int n)\n    {   \n\tif (n == PARAM_DEFAULT)\n\t    n = 1;\n\tfor (int y = st_scroll_bot-1; y >= curs_y; y--){\n\t    if (y-n >= curs_y){\n\t\tfor (int x = 0; x < MAX_X; x++)\n\t\t    set_char(x, y, w_char[x][y-n], \n\t\t\t     w_colt[x][y-n], w_colb[x][y-n]);\n\t    } else {\n\t\tfor (int x = 0; x < MAX_X; x++)\n\t\t    set_char(x, y, '', col_text, col_back);\n\t    }\n\t}\n\tgCopyArea(curs_y, st_scroll_bot-1-n, n);\n\tgClear(0, curs_y, MAX_X-1, curs_y+n-1);\n    }", "comment": "/* BEL */"}}
{"code": {"body": "    public void drawData(byte[] data)\n    {\n\tint  i = 0;\n\n\tgCursClear();\n\n\tfor (i = 0; i < data.length; i++){\n  \t    byte  db = data[i];\n\t    int   d = db;\n\t    if (db < 0)\n\t      d = db + 256;\n\n\t    \n\n\t    if (state == STATE_0){\n\t\tif (d == 0x07){           \n\t\t    ;\n\t\t} else if (d == 0x08){    \n\t\t    \n\t\t    if (curs_x > 0)\n\t\t\tcurs_rgoto_x(-1);\n\t\t} else if (d == 0x09){    \n\t\t    \n\t\t    tab(1);\n\t\t} else if (d == 0x0a){    \n\t\t    \n\t\t    lf();\n\t\t} else if (d == 0x0d){    \n\t\t    \n\t\t    curs_goto_x(1);\n\t\t} else if (d == 0x1b){    \n\t\t    state = STATE_ESC;\n\t\t    st_nparams = 0;\n\t\t    st_params[st_nparams] = PARAM_DEFAULT;\n\t\t} else if (d <= 0x1f){    \n\t\t    state = STATE_0;\n\t\t    System.out.println(\"\" + d + \"\");\n\t\t} else if (d >= 0x80){    \n\t\t    st_ch = d;\n\t\t    state = STATE_1;\n\t\t} else {\n\t\t    \n\t\t    if (curs_x >= MAX_X){\n\t\t\tcurs_goto_x(1);\n\t\t\tlf();\n\t\t    }\n\t\t    if (st_mode_insert){\n\t\t\tins_char(d, col_text, col_back);\n\t\t    } else {\n\t\t\tset_char(curs_x, curs_y, d, col_text, col_back);\n\t\t\tgDrawChar(curs_x, curs_y);\n\t\t    }\n\t\t    curs_rgoto_x(1);\n\t\t    if (st_mode_autolf && (curs_x >= MAX_X)){\n\t\t\tcurs_goto_x(1);\n\t\t\tlf();\n\t\t    }\n\t\t}\n\n\t    } else if (state == STATE_1){\n\t\tstate = STATE_0;\n\t\tif (curs_x >= MAX_X){\n\t\t    curs_goto_x(1);\n\t\t    lf();\n\t\t}\n\t\t\n\t\t\n\t\tif (st_mode_insert){\n\t\t    ins_char2(st_ch, d, col_text, col_back);\n\t\t} else {\n\t\t    set_char(curs_x+0, curs_y, st_ch, col_text, col_back);\n\t\t    set_char(curs_x+1, curs_y, d,     col_text, col_back);\n\t\t    gDrawChar(curs_x, curs_y);\n\t\t}\n\t\tcurs_rgoto_x(2);\n\t\tif (st_mode_autolf && (curs_x >= MAX_X)){\n\t\t    curs_goto_x(1);\n\t\t    lf();\n\t\t}\n\t\t\n\t    } else if (state == STATE_ESC){\n\t\tif (d == ''){            \n\t\t    state = STATE_ESC_BRO;   \n\t\t} else if (d == ''){\n\t\t    state = STATE_ESC_BRC;\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\");\n\t\t    put_spaces(1);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\");\n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\");\n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    curs_down(1);\n\t\t    curs_goto_x(1);\n\t\t} else if ((d == '') ||  \n\t\t\t   (d == '')){   \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\");\n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\");\n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    reset();\n\t\t} else if (d == ''){     \n\t\t    state = STATE_ESC_CS;    \n\t\t    st_prefix = d;\n\t\t} else if (d == ''){     \n\t\t    state = STATE_ESC_CS;    \n\t\t    st_prefix = d;\n\t\t} else if (d == ''){     \n\t\t    state = STATE_ESC_CS;    \n\t\t    st_prefix = d;\n\t\t} else if (d == ''){     \n\t\t    state = STATE_ESC_CS;    \n\t\t    st_prefix = d;\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\");\n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\");\n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\");\n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\");\n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\");\n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\");\n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\");\n\t\t    \n\t\t} else { \n\t\t    state = STATE_0;  \n\t\t    System.out.println(\"\" + (char)d + \"\");\n\t\t}\n\t\t\n\t    } else if (state == STATE_ESC_CS){\n\t\tstate = STATE_0; \n\t\t\n\t\t\n\n\t    } else if (state == STATE_ESC_BRO){\n\t\tif (d == ''){            \n\t\t    state = STATE_0;         \n\t\t    \n\t\t    ins_spaces(st_params[0], col_text, col_back);\n\t\t} else if ((d == '') ||\n\t\t\t   (d == '')){   \n\t\t    state = STATE_0;         \n\t\t    if (st_params[0] == PARAM_DEFAULT)\n\t\t\tcurs_up(1);\n\t\t    else\n\t\t\tcurs_up(st_params[0]);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    if (st_params[0] == PARAM_DEFAULT)\n\t\t\tcurs_down(1);\n\t\t    else\n\t\t\tcurs_down(st_params[0]);\n\t\t} else if ((d == '') ||\n\t\t           (d == '')){   \n\t\t    state = STATE_0;         \n\t\t    if (st_params[0] == PARAM_DEFAULT)\n\t\t\tcurs_right(1);\n\t\t    else \n\t\t\tcurs_right(st_params[0]);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    if (st_params[0] == PARAM_DEFAULT)\n\t\t\tcurs_left(1);\n\t\t    else \n\t\t\tcurs_left(st_params[0]);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    if (st_params[0] == PARAM_DEFAULT)\n\t\t\tcurs_down(1);\n\t\t    else \n\t\t\tcurs_down(st_params[0]);\n\t\t    curs_goto_x(1);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    if (st_params[0] == PARAM_DEFAULT)\n\t\t\tcurs_up(1);\n\t\t    else \n\t\t\tcurs_up(st_params[0]);\n\t\t    curs_goto_x(1);\n\t\t} else if ((d == '') ||\n\t\t\t   (d == '')){   \n\t\t    state = STATE_0;         \n\t\t    if (st_params[0] == PARAM_DEFAULT)\n\t\t\tcurs_goto_x(1);\n\t\t    else \n\t\t\tcurs_goto_x(st_params[0]);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    if (st_params[0] == PARAM_DEFAULT)\n\t\t\tcurs_goto(1, 1);\n\t\t    else if (st_params[1] == PARAM_DEFAULT)\n\t\t\tcurs_goto(st_params[0], 1);\n\t\t    else \n\t\t\tcurs_goto(st_params[0], st_params[1]);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    tab(st_params[0]);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    erase_display(st_params[0]);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    erase_line(st_params[0]);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    \n\t\t    insert_lines(st_params[0]);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    \n\t\t    delete_lines(st_params[0]);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    delete_nchars(st_params[0]);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\"); \n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\"); \n\t\t    erase_nchars(st_params[0]);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    back_tab(st_params[0]);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    if (st_params[0] == PARAM_DEFAULT)\n\t\t\tcurs_goto_y(1);\n\t\t    else \n\t\t\tcurs_goto_y(st_params[0]);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\"); \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    System.out.println(\"\"); \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;\n\t\t    for (int z = 0; z <= st_nparams; z++){ \n\t\t\tif (st_params[z] == 4){\n\t\t\t    st_mode_insert = true;\n\t\t\t} else if (st_params[z] == 20){\n\t\t\t    st_mode_autolf = true;\n\t\t\t}\n\t\t    }\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;\n\t\t    for (int z = 0; z <= st_nparams; z++){ \n\t\t\tif (st_params[z] == 4){\n\t\t\t    st_mode_insert = false;\n\t\t\t} else if (st_params[z] == 20){\n\t\t\t    st_mode_autolf = false;\n\t\t\t}\n\t\t    }\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    for (int z = 0; z <= st_nparams; z++){ \n\t\t\tif (st_params[z] == PARAM_DEFAULT)\n\t\t\t    set_attr(0);\n\t\t\telse\n\t\t\t    set_attr(st_params[z]);\n\t\t    }\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;         \n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;           \n\t\t    if (st_params[0] == PARAM_DEFAULT){\n\t\t\tst_scroll_top = 1;\n\t\t\tst_scroll_bot = MAX_Y;\n\t\t\t\n\t\t    } else if (st_params[1] == PARAM_DEFAULT){\n\t\t\tst_scroll_top = st_params[0];\n\t\t\tst_scroll_bot = MAX_Y;\n\t\t\t\n\t\t    } else {\n\t\t\tst_scroll_top = st_params[0];\n\t\t\tst_scroll_bot = st_params[1];\n\t\t\t\n\t\t\t\n\t\t    }\n\t\t    curs_goto(1, 1);\n\t\t} else if (d == ''){     \n\t\t    state = STATE_0;\n\t\t    \n\t\t} else if (d == ''){     \n\t\t    state = STATE_ESC_BRO_Q; \n\t\t} else if (d == ''){\n\t\t    st_nparams++;\n\t\t    st_params[st_nparams] = PARAM_DEFAULT;\n\t\t} else if (Character.isDigit((char)d)){\n\t\t    state = STATE_ESC_BRO; \n\t\t    if (st_params[st_nparams] == PARAM_DEFAULT)\n\t\t\tst_params[st_nparams] = 0;\n\t\t    st_params[st_nparams] = 10 * st_params[st_nparams];\n\t\t    st_params[st_nparams] += Character.digit((char)d, 10);\n\t\t} else {\n\t\t    state = STATE_0; \n\t\t    if ((d < 0) || (d >= 0x80))\n\t\t\tSystem.out.println(\"\" + d + \"\");\n\t\t    else \n\t\t\tSystem.out.println(\"\" + (char)d + \"\");\n\t\t}\n\n\t    } else if (state == STATE_ESC_BRO_Q){\n\t\tif (d == ''){\n\t\t    state = STATE_0; \n\t\t    System.out.println(\"\");\n\t\t    \n\t\t} else if (d == ''){\n\t\t    state = STATE_0; \n\t\t    System.out.println(\"\");\n\t\t    \n\t\t} else if (d == ''){\n\t\t    st_nparams++;\n\t\t    st_params[st_nparams] = PARAM_DEFAULT;\n\t\t} else if (Character.isDigit((char)d)){\n\t\t    state = STATE_ESC_BRO_Q; \n\t\t    if (st_params[st_nparams] == PARAM_DEFAULT)\n\t\t\tst_params[st_nparams] = 0;\n\t\t    st_params[st_nparams] = 10 * st_params[st_nparams];\n\t\t    st_params[st_nparams] += Character.digit((char)d, 10);\n\t\t} else {\n\t\t    state = STATE_0; \n\t\t    System.out.println(\"\" + (char)d + \"\");\n\t\t}\n\n\t    } else if (state == STATE_ESC_BRC){\n\t\tif (d == ''){\n\t\t    state = STATE_ESC_BRC_STR; \n\t\t    st_str = new StringBuffer();\n\t\t} else if (d == ''){\n\t\t    state = STATE_ESC_BRC_STR; \n\t\t    st_str = new StringBuffer();\n\t\t} else if (d == ''){\n\t\t    state = STATE_ESC_BRC_STR; \n\t\t    st_str = new StringBuffer();\n\t\t} else if (d == ''){\n\t\t    state = STATE_ESC_BRC_STR; \n\t\t    st_str = new StringBuffer();\n\t\t} else if (Character.isDigit((char)d)){\n\t\t    state = STATE_ESC_BRC; \n\t\t    if (st_params[st_nparams] == PARAM_DEFAULT)\n\t\t\tst_params[st_nparams] = 0;\n\t\t    st_params[st_nparams] = 10 * st_params[st_nparams];\n\t\t    st_params[st_nparams] += Character.digit((char)d, 10);\n\t\t} else {\n\t\t    state = STATE_0; \n\t\t    System.out.println(\"\" + d);\n\t\t}\n\t\t\n\t    } else if (state == STATE_ESC_BRC_STR){\n\t\tif (d == 0x07){\n\t\t    state = STATE_0;\n\t\t    System.out.println(\"\" + st_params[0] + \"\"\n\t\t\t\t       + st_str.toString()); \n\t\t} else if (d == ''){\n\t\t    state = STATE_0;\n\t\t    System.out.println(\"\" + st_params[0] + \"\"\n\t\t\t\t       + st_str.toString()); \n\t\t} else if (d == 0x1b){\n\t\t    state = STATE_ESC_BRC_STR; \n\t\t} else {\n\t\t    state = STATE_ESC_BRC_STR; \n\t\t    st_str.append((char)d); \n\t\t}\n\t    }\n\n\t}\n\n\tgCursDraw();\n\n    }", "comment": "/* BEL */"}}
{"code": {"body": "public SunflowAPIAPI() {\n\t\tsunflow = new SunflowAPI();\n\t\t\n\t\t\n\t\t\n\t\t\n\t\teye = new Point3(0, 10, 15); \n\t\ttarget = new Point3(0, 0, 0); \n\t\tup = new Vector3(0, 1, 0); \n\t\t\n\t\tfov = 50;\n\t\taspect = width/height;\n\t\tcurrCamera = \"\";\n\t\tfocusDistance = 1;\n        lensRadius = 0;\n        fov = 90;\n        aspect = 1;\n        sides = 0;\n        lensRotation = 0;\n\t\t\n\t\tthis.setThinlensCamera(\"\", fov, aspect);\n\t\t\n\t\tthis.setAmbientOcclusionShader(\"\", new Color(1f,1f,1f), new Color(0f,0f,0f), 16, 5);\n\t\t\n\t\tcurrBucketOrder = BUCKET_ORDER_SPIRAL;\n\t\t\n\t\tcurrFilter = FILTER_MITCHELL;\n\t\t\n\t}", "comment": "/*\n\t * --------------------------------------------------------------------------------------\n\t * LIGHTS\n\t */"}}
{"code": {"body": "\tpublic void setDirectionalLight(String name, Point3 source, Vector3 direction, float radius, Color color) {\n\t\tsunflow.parameter(\"\", source);\n\t\tsunflow.parameter(\"\", direction);\n\t\tsunflow.parameter(\"\", radius);\n\t\tsunflow.parameter(\"\", colorSpace, color.getRed()/(float)255, color.getGreen()/(float)255, color.getBlue()/(float)255);\n\t\tsunflow.light( name, LIGHT_DIRECTIONAL );\n\t}", "comment": "/**\n\t * sets directional light\n\t * @param name Individual name\n\t * @param source light position\n\t * @param direction light direction\n\t * @param radius light radius\n\t * @param color light color\n\t */"}}
{"code": {"body": "\tpublic void setImageBasedLight(String name, Vector3 center, Vector3 up, int samples, int lowSamples, String texture) {\n\t\tsunflow.parameter(\"\", center);\n\t\tsunflow.parameter(\"\", up);\n\t\tsunflow.parameter(\"\", samples);\n\t\tsunflow.parameter(\"\",lowSamples);\n\t\tsunflow.parameter(\"\", texture);\n\t\tsunflow.light( name, this.LIGHT_IMAGEBASED );\n\t}", "comment": "/**\n\t * Sets Image based light\n\t * @param name Individual name\n\t * @param center Light position\n\t * @param up ?\n\t * @param samples Detail, the higher the slower and smoother\n\t * @param lowSamples ?\n\t * @param texture Path to texture file\n\t */"}}
{"code": {"body": "\tpublic void setPointLight(String name, Point3 center, Color color) {\n\t\tsunflow.parameter(\"\", center);\n\t\tsunflow.parameter(\"\", colorSpace, color.getRed()/(float)255, color.getGreen()/(float)255, color.getBlue()/(float)255);\n\t\tsunflow.light( name, this.LIGHT_POINT );\n\t}", "comment": "/**\n\t * Sets point light\n\t * @param name Individual name\n\t * @param center Light position\n\t * @param color light color\n\t */"}}
{"code": {"body": "\tpublic void setSphereLight(String name, Point3 center, Color color, int samples, float radius) {\n\t\tsunflow.parameter(\"\", center);\n\t\tsunflow.parameter(\"\", colorSpace, color.getRed()/(float)255, color.getGreen()/(float)255, color.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", samples);\n\t\tsunflow.parameter(\"\", radius);\n        sunflow.light( name, LIGHT_SPHERE );\n\t}", "comment": "/**\n\t * Sets sphere light\n\t * @param name individual name\n\t * @param center light position\n\t * @param color light color\n\t * @param samples Detail, the highe the smoother and slower\n\t * @param radius light size\n\t */"}}
{"code": {"body": "\tpublic void setSunSkyLight(String name, Vector3 up, Vector3 east, Vector3 direction, Color color, int samples, float turbidity, boolean groundExtendSky) {\n\t\tsunflow.parameter(\"\", up);\n\t\tsunflow.parameter(\"\", east);\n\t\tsunflow.parameter(\"\", direction);\n\t\tsunflow.parameter(\"\", colorSpace, color.getRed()/(float)255, color.getGreen()/(float)255, color.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", samples);\n\t\tsunflow.parameter(\"\", turbidity);\n\t\tsunflow.parameter(\"\", groundExtendSky);\n        sunflow.light( name, this.LIGHT_SUNSKY );\n\t}", "comment": "/**\n\t * sets sunsky light\n\t * @param name Individual name\n\t * @param up ? direction\n\t * @param east ? direction\n\t * @param direction light direction\n\t * @param color light color\n\t * @param samples Detail\n\t * @param turbidity ?\n\t * @param groundExtendSky ?\n\t */"}}
{"code": {"body": "\tpublic void drawMeshLight(String name, Color color, int samples, float[] vertices, int[] triangles) {\n\t\tsunflow.parameter(\"\", \"\", \"\", vertices); \n\t\tsunflow.parameter(\"\", triangles);\n\t\t\n\t\tsunflow.parameter(\"\", colorSpace, color.getRed()/(float)255, color.getGreen()/(float)255, color.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", samples);\n\t\t\n\t\tsunflow.light( name, this.LIGHT_MESH);\n\t}", "comment": "/**\n\t * sets mesh light\n\t * @param name Individual name\n\t * @param color light color\n\t * @param samples Detail\n\t * @param vertices Float array with coordinates (like [x0,y0,z0,x1,y1,z1,x2,y2,z2])\n\t * @param triangles int array connecting the vertices (like [0,1,2])\n\t */"}}
{"code": {"body": "\tpublic void setAmbientOcclusionShader(String name, Color bright, Color dark, int samples, float maxDist, String texture) {\n\n\t\tcurrShader = name;\n\n\n\t\tsunflow.parameter(\"\", colorSpace, bright.getRed()/(float)255, bright.getGreen()/(float)255, bright.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", colorSpace, dark.getRed()/(float)255, dark.getGreen()/(float)255, dark.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", samples);\n\t\tsunflow.parameter(\"\", maxDist);\n\t\tsunflow.parameter(\"\", texture);\n\n\n\t\tsunflow.shader(currShader, SHADER_TEXTURED_AMBIENT_OCCLUSION);\n\t}", "comment": "/**\n\t * Sets Ambient Occlusion Shader\n\t * @param name Individual Name\n\t * @param bright Highlight Color\n\t * @param dark Dark Color\n\t * @param samples Detail, the higher the slower and smoother\n\t * @param maxDist ?\n\t * @param texture Path to texture file\n\t */"}}
{"code": {"body": "\tpublic void setConstantShader(String name, Color color) {\n\n\t\tcurrShader = name;\n\n\n\t\tsunflow.parameter(\"\", colorSpace, color.getRed()/(float)255, color.getGreen()/(float)255, color.getBlue()/(float)255);\n\n\n\t\tsunflow.shader(currShader, SHADER_CONSTANT);\n\t}", "comment": "/**\n\t * Sets constant shader\n\t * @param name Individual Name\n\t * @param color Color\n\t */"}}
{"code": {"body": "\tpublic void setDiffuseShader(String name, Color color, String texture) {\n\n\t\tcurrShader = name;\n\n\n\t\tsunflow.parameter(\"\", colorSpace, color.getRed()/(float)255, color.getGreen()/(float)255, color.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", texture);\n\n\n\t\tsunflow.shader(currShader, SHADER_TEXTURED_DIFFUSE);\n\t}", "comment": "/**\n\t * Sets Diffuse Shader\n\t * @param name Individial Name\n\t * @param color Color\n\t * @param texture Path to texture file\n\t */"}}
{"code": {"body": "\tpublic void setGlassShader(String name, Color color, float eta, float absorptionDistance, Color absorptionColor) {\n\n\t\tcurrShader = name;\n\n\n\t\tsunflow.parameter(\"\", colorSpace, color.getRed()/(float)255, color.getGreen()/(float)255, color.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", eta);\n\t\tsunflow.parameter(\"\", absorptionDistance);\n\t\tsunflow.parameter(\"\", colorSpace, absorptionColor.getRed()/(float)255, absorptionColor.getGreen()/(float)255, absorptionColor.getBlue()/(float)255);\n\n\n\t\tsunflow.shader(currShader, SHADER_GLASS);\n\t}", "comment": "/**\n\t * Sets Glass Shader\n\t * @param name Individual Name\n\t * @param color Color\n\t * @param eta ?\n\t * @param absorptionDistance ?\n\t * @param absorptionColor Color\n\t */"}}
{"code": {"body": "\tpublic void setMirrorShader(String name, Color color) {\n\n\t\tcurrShader = name;\n\n\n\t\tsunflow.parameter(\"\", colorSpace, color.getRed()/(float)255, color.getGreen()/(float)255, color.getBlue()/(float)255);\n\n\n\t\tsunflow.shader(currShader, SHADER_MIRROR);\n\t}", "comment": "/**\n\t * Sets Mirror Shader\n\t * @param name Individial Name\n\t * @param color Color\n\t */"}}
{"code": {"body": "\tpublic void setPhongShader(String name, Color diffuse, Color specular, float power, int samples, String texture) {\n\n\t\tcurrShader = name;\n\n\n\t\tsunflow.parameter(\"\", colorSpace, diffuse.getRed()/(float)255, diffuse.getGreen()/(float)255, diffuse.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", colorSpace, specular.getRed()/(float)255, specular.getGreen()/(float)255, specular.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", power);\n\t\tsunflow.parameter(\"\", samples);\n\t\tsunflow.parameter(\"\", texture);\n\n\n\t\tsunflow.shader(currShader, SHADER_TEXTURED_PHONG);\n\t}", "comment": "/**\n\t * Sets Phong Shader\n\t * @param name Individual Name\n\t * @param diffuse Diffuse Color\n\t * @param specular Specular Color\n\t * @param power ?\n\t * @param samples Detail, the higher the slower and smoother\n\t * @param texture Path to texture file\n\t */"}}
{"code": {"body": "\tpublic void setShinyDiffuseShader(String name, Color color, float shiny, String texture) {\n\n\t\tcurrShader = name;\n\n\n\t\tsunflow.parameter(\"\", colorSpace, color.getRed()/(float)255, color.getGreen()/(float)255, color.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", shiny);\n\t\tsunflow.parameter(\"\", texture);\n\n\n\t\tsunflow.shader(currShader, SHADER_TEXTURED_SHINY_DIFFUSE);\n\t}", "comment": "/**\n\t * Sets Shiny Diffuse Shader\n\t * @param name Individual Name\n\t * @param color Color\n\t * @param shiny shinyness, the bigger the more\n\t * @param texture Path to texture file\n\t */"}}
{"code": {"body": "\tpublic void setUberShader(String name, Color diffuse, Color specular, String diffuseTexture, String specularTexture, float diffuseBlend, float specularBlend, float glossyness, int samples) {\n\n\t\tcurrShader = name;\n\n\n\t\tsunflow.parameter(\"\", colorSpace, diffuse.getRed()/(float)255, diffuse.getGreen()/(float)255, diffuse.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", colorSpace, specular.getRed()/(float)255, specular.getGreen()/(float)255, specular.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", diffuseTexture);\n\t\tsunflow.parameter(\"\", specularTexture);\n\t\tsunflow.parameter(\"\", diffuseBlend);\n\t\tsunflow.parameter(\"\", specularBlend);\n\t\tsunflow.parameter(\"\", glossyness);\n\t\tsunflow.parameter(\"\", samples);\n\n\n\t\tsunflow.shader(currShader, SHADER_UBER);\n\t}", "comment": "/**\n\t * Sets Uber Shader\n\t * @param name Individual Name\n\t * @param diffuse Diffuse Color\n\t * @param specular Specular Color\n\t * @param diffuseTexture Diffuse Texture\n\t * @param specularTexture Specular Texture\n\t * @param diffuseBlend Diffuse Blendamount\n\t * @param specularBlend Specular Blendamount\n\t * @param glossyness glossyness\n\t * @param samples samples\n\t */"}}
{"code": {"body": "\tpublic void setWardShader(String name, Color diffuse, Color specular, float roughnessX, float roughnessY, int samples, String texture) {\n\n\t\tcurrShader = name;\n\n\n\t\tsunflow.parameter(\"\", colorSpace, diffuse.getRed()/(float)255, diffuse.getGreen()/(float)255, diffuse.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", colorSpace, specular.getRed()/(float)255, specular.getGreen()/(float)255, specular.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", roughnessX);\n\t\tsunflow.parameter(\"\", roughnessY);\n\t\tsunflow.parameter(\"\", samples);\n\t\tsunflow.parameter(\"\", texture);\n\n\n\t\tsunflow.shader(currShader, SHADER_TEXTURED_WARD);\n\t}", "comment": "/**\n\t * Sets Anisotropic Ward Shader\n\t * @param name Individual Name\n\t * @param diffuse Diffuse Color\n\t * @param specular Specular Color\n\t * @param roughnessX Roughness in x axis\n\t * @param roughnessY Roughness in y axis\n\t * @param samples Detail, the more the slower and smoother\n\t * @param texture Path to texture file\n\t */"}}
{"code": {"body": "\tpublic void setWireframeShader(String name, Color lineColor, Color fillColor, float width) {\n\n\t\tcurrShader = name;\n\n\n\t\tsunflow.parameter(\"\", colorSpace, lineColor.getRed()/(float)255, lineColor.getGreen()/(float)255, lineColor.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", colorSpace, fillColor.getRed()/(float)255, fillColor.getGreen()/(float)255, fillColor.getBlue()/(float)255);\n\t\tsunflow.parameter(\"\", width);\n\n\n\t\tsunflow.shader(currShader, SHADER_WIREFRAME);\n\t}", "comment": "/**\n\t * Sets Wireframe Shader\n\t * @param name Individual Name\n\t * @param lineColor line color\n\t * @param fillColor fill color\n\t * @param width stroke width ?\n\t */"}}
{"code": {"body": "\tpublic void setPerlinModifier(String name, int function, float size, float scale) {\n\t\tcurrModifier = name + modifiercount;\t\t\n\t\tmodifierType = MODIFIER_PERLIN_MAP;\n\t\t\n\t\tsunflow.parameter(\"\", function);\n\t\tsunflow.parameter(\"\", size);\n\t\tsunflow.parameter(\"\", scale);\n\t\tsunflow.modifier(currModifier, modifierType);\n\t\t\n\t\tmodifiercount++;\n\t\tisModifiers = true;\n\t}", "comment": "/*\n\t * --------------------------------------------------------------------------------------\n\t * MODIFIERS\n\t */"}}
{"code": {"body": "\tpublic void drawMesh(String name, float[] vertices, int[] triangles, float size, float xRotation, float yRotation, float zRotation) {\n\t\tMatrix4 scale = Matrix4.IDENTITY.multiply( Matrix4.scale(size, size, size) );\n\t\tMatrix4 rotate = Matrix4.IDENTITY \n\t\t.multiply( Matrix4.rotateZ(zRotation) ) \n\t\t.multiply( Matrix4.rotateX(xRotation) ) \n\t\t.multiply( Matrix4.rotateY(yRotation) );\n\n\t\tMatrix4 m = Matrix4.IDENTITY;\n\t\tm = scale.multiply(m);\n\t\tm = rotate.multiply(m); \n\n\t\tsunflow.parameter(\"\", \"\", \"\", vertices); \n\t\tsunflow.parameter(\"\", triangles);\n\n\t\tsunflow.geometry( name, \"\" );\n\t\tsunflow.parameter( \"\", currShader);\n\t\tif(isModifiers) sunflow.parameter(\"\", currModifier);\n\t\tsunflow.parameter( \"\", m ); \n\t\tsunflow.instance( name + \"\", name );\n\t}", "comment": "/**\n\t * draws a mesh primitive which can be rotated and scaled\n\t * @param name individual name of primitive\n\t * @param vertices Float array with coordinates (like [x0,y0,z0,x1,y1,z1,x2,y2,z2])\n\t * @param triangles int array connecting the vertices (like [0,1,2])\n\t * @param size size\n\t * @param xRotation x rotation\n\t * @param yRotation y rotation\n\t * @param zRotation z rotation\n\t */"}}
{"code": {"body": "\tpublic void drawBezierMesh(String name, int subdivs, boolean smooth, boolean quads, int nu, int nv, boolean uwrap, boolean vwrap, float[] points) {\n\t\tsunflow.parameter(\"\", subdivs);\n\t\tsunflow.parameter(\"\", smooth);\n\t\tsunflow.parameter(\"\", quads);\n\t\tsunflow.parameter(\"\", nu);\n\t\tsunflow.parameter(\"\", nv);\n\t\tsunflow.parameter(\"\", uwrap);\n\t\tsunflow.parameter(\"\", vwrap);\n\t\tsunflow.parameter(\"\", \"\", \"\", points);\n\n\t\tsunflow.geometry( name, \"\" );\n\t\tsunflow.parameter( \"\", currShader);\n\t\tif(isModifiers) sunflow.parameter(\"\", currModifier);\n\t\tsunflow.instance( name + \"\", name );\n\t}", "comment": "/**\n\t * draws a bezier patch\n\t * @param name individual name of primitive\n\t * @param subdivs int value of how much subdivisions\n\t * @param smooth boolean is bezier patch set to smooth\n\t * @param quads boolean if patch uses quads\n\t * @param nu number of points in vertical direction\n\t * @param nv number of points in horizontal direction\n\t * @param uwrap boolean ? best is to use false\n\t * @param vwrap boolean ? best is to use false\n\t * @param points Float array with coordinates (like [x0,y0,z0,x1,y1,z1,x2,y2,z2])\n\t */"}}
{"code": {"body": "\tpublic void drawSphere(String name, float x, float y, float z, float size) {\n\t\tMatrix4 translate = Matrix4.IDENTITY.multiply( Matrix4.translation(x, y, z ));\n\t\tMatrix4 scale = Matrix4.IDENTITY.multiply( Matrix4.scale(size, size, size) );\n\n\t\tMatrix4 m = Matrix4.IDENTITY;\n\t\tm = scale.multiply(m);\n\t\tm = translate.multiply(m);\n\n\t\tsunflow.geometry( name, \"\" );\n\t\tsunflow.parameter( \"\", currShader);\n\t\tif(isModifiers) sunflow.parameter(\"\", currModifier);\n\t\tsunflow.parameter( \"\", m ); \n\t\tsunflow.instance( name + \"\", name );\n\t}", "comment": "/**\n\t * draws a sphere\n\t * @param name Individual name\n\t * @param x x position\n\t * @param y y position\n\t * @param z z position \n\t * @param size size\n\t */"}}
{"code": {"body": "\tpublic void drawBox(String name, float xSize, float ySize, float zSize, float x, float y, float z, float xRotation, float yRotation, float zRotation) {\n\t\tMatrix4 translate = Matrix4.IDENTITY.multiply( Matrix4.translation(x, y, z ));\n\t\tMatrix4 scale = Matrix4.IDENTITY.multiply( Matrix4.scale(xSize, ySize, zSize) );\n\t\tMatrix4 rotate = Matrix4.IDENTITY \n\t\t.multiply( Matrix4.rotateZ(zRotation) ) \n\t\t.multiply( Matrix4.rotateX(xRotation) ) \n\t\t.multiply( Matrix4.rotateY(yRotation) );\n\n\t\tMatrix4 m = Matrix4.IDENTITY;\n\t\tm = scale.multiply(m);\n\t\tm = rotate.multiply(m); \n\t\tm = translate.multiply(m);\n\n\t\tsunflow.geometry( name, \"\" );\n\t\tsunflow.parameter( \"\", currShader);\n\t\tif(isModifiers) sunflow.parameter(\"\", currModifier);\n\t\tsunflow.parameter( \"\", m ); \n\t\tsunflow.instance( name + \"\", name );\n\t}", "comment": "/**\n\t * Draws a box\n\t * @param name\n\t * @param name Individual name\n\t * @param xSize size on x axis\n\t * @param ySize size on y axis\n\t * @param zSize size on z axis\n\t * @param x x position\n\t * @param y y position\n\t * @param z z position \n\t * @param xRotation x rotation\n\t * @param yRotation y rotation\n\t * @param zRotation z rotation\n\t */"}}
{"code": {"body": "\tpublic void drawCylinder(String name, float xSize, float ySize, float zSize, float x, float y, float z, float xRotation, float yRotation, float zRotation) {\n\t\tMatrix4 translate = Matrix4.IDENTITY.multiply( Matrix4.translation(x, y, z ));\n\t\tMatrix4 scale = Matrix4.IDENTITY.multiply( Matrix4.scale(xSize, ySize, zSize) );\n\t\tMatrix4 rotate = Matrix4.IDENTITY \n\t\t.multiply( Matrix4.rotateZ(zRotation) ) \n\t\t.multiply( Matrix4.rotateX(xRotation) ) \n\t\t.multiply( Matrix4.rotateY(yRotation) );\n\n\t\tMatrix4 m = Matrix4.IDENTITY;\n\t\tm = scale.multiply(m);\n\t\tm = rotate.multiply(m); \n\t\tm = translate.multiply(m);\n\n\t\tsunflow.geometry( name, \"\" );\n\t\tsunflow.parameter( \"\", currShader);\n\t\tif(isModifiers) sunflow.parameter(\"\", currModifier);\n\t\tsunflow.parameter( \"\", m ); \n\t\tsunflow.instance( name + \"\", name );\n\t}", "comment": "/**\n\t * Draws a Cylinder\n\t * @param name\n\t * @param name Individual name\n\t * @param xSize size on x axis\n\t * @param ySize size on y axis\n\t * @param zSize size on z axis\n\t * @param x x position\n\t * @param y y position\n\t * @param z z position \n\t * @param xRotation x rotation\n\t * @param yRotation y rotation\n\t * @param zRotation z rotation\n\t */"}}
{"code": {"body": "\tpublic void drawBanchoffSurface(String name, float x, float y, float z, float size, float xRotation, float yRotation, float zRotation) {\n\t\tMatrix4 translate = Matrix4.IDENTITY.multiply( Matrix4.translation(x, y, z ));\n\t\tMatrix4 scale = Matrix4.IDENTITY.multiply( Matrix4.scale(size, size, size) );\n\t\tMatrix4 rotate = Matrix4.IDENTITY \n\t\t.multiply( Matrix4.rotateZ(zRotation) ) \n\t\t.multiply( Matrix4.rotateX(xRotation) ) \n\t\t.multiply( Matrix4.rotateY(yRotation) );\n\n\t\tMatrix4 m = Matrix4.IDENTITY;\n\t\tm = scale.multiply(m);\n\t\tm = rotate.multiply(m); \n\t\tm = translate.multiply(m);\n\n\t\tsunflow.geometry( name, \"\" );\n\t\tsunflow.parameter( \"\", currShader);\n\t\tif(isModifiers) sunflow.parameter(\"\", currModifier);\n\t\tsunflow.parameter( \"\", m ); \n\t\tsunflow.instance( name + \"\", name );\n\t}", "comment": "/**\n\t * Draws a Banchoff Surface\n\t * @param name Individual name\n\t * @param x x position\n\t * @param y y position\n\t * @param z z position \n\t * @param size size\n\t * @param xRotation x rotation\n\t * @param yRotation y rotation\n\t * @param zRotation z rotation\n\t */"}}
{"code": {"body": "\tpublic void drawJulia(String name, float x, float y, float z, float size, float xRotation, float yRotation, float zRotation, float[] q, int iterations, float epsilon) {\n\n\t\tMatrix4 translate = Matrix4.IDENTITY.multiply( Matrix4.translation(x, y, z ));\n\t\tMatrix4 scale = Matrix4.IDENTITY.multiply( Matrix4.scale(size, size, size) );\n\t\tMatrix4 rotate = Matrix4.IDENTITY \n\t\t.multiply( Matrix4.rotateZ(zRotation) ) \n\t\t.multiply( Matrix4.rotateX(xRotation) ) \n\t\t.multiply( Matrix4.rotateY(yRotation) );\n\n\t\tMatrix4 m = Matrix4.IDENTITY;\n\t\tm = scale.multiply(m);\n\t\tm = rotate.multiply(m); \n\t\tm = translate.multiply(m);\n\n\t\tsunflow.parameter(\"\", iterations);\n\t\tsunflow.parameter(\"\", epsilon);\n\t\t\n        sunflow.parameter(\"\", q[0]);\n        sunflow.parameter(\"\", q[1]);\n        sunflow.parameter(\"\", q[2]);\n        sunflow.parameter(\"\", q[3]);\n\t\t\n\t\tsunflow.geometry( name, \"\" );\n\t\tsunflow.parameter( \"\", currShader);\n\n\t\tif(isModifiers) sunflow.parameter(\"\", currModifier);\n\t\tsunflow.parameter( \"\", m ); \n\t\tsunflow.instance( name + \"\", name );\n\n\t}", "comment": "/**\n\n\t * Draws a Julia\n\n\t * @param name Individual name\n\n\t * @param x x position\n\n\t * @param y y position\n\n\t * @param z z position \n\n\t * @param size size\n\n\t * @param xRotation x rotation\n\n\t * @param yRotation y rotation\n\n\t * @param zRotation z rotation\n\n\n\n\t * @param float[] q = four quaternization variables\n\n\t * @param int iterations = level of detail\n\n\t * @param float epsilon = level of accuracy\n\n\t */"}}
{"code": {"body": "\tpublic void drawSphereFlake(String name, float x, float y, float z, float size, float xRotation, float yRotation, float zRotation,\n\tint level, Vector3 axis, float radius) {\n\t\tMatrix4 translate = Matrix4.IDENTITY.multiply( Matrix4.translation(x, y, z ));\n\t\tMatrix4 scale = Matrix4.IDENTITY.multiply( Matrix4.scale(size, size, size) );\n\t\tMatrix4 rotate = Matrix4.IDENTITY \n\t\t.multiply( Matrix4.rotateZ(zRotation) ) \n\t\t.multiply( Matrix4.rotateX(xRotation) ) \n\t\t.multiply( Matrix4.rotateY(yRotation) );\n\n\t\tMatrix4 m = Matrix4.IDENTITY;\n\t\tm = scale.multiply(m);\n\t\tm = rotate.multiply(m); \n\t\tm = translate.multiply(m);\n\n\t\tsunflow.parameter(\"\", level);\n\t\tsunflow.parameter(\"\", axis);\n \t\tsunflow.parameter(\"\", radius);\n \n\t\tsunflow.geometry( name, \"\" );\n\t\tsunflow.parameter( \"\", currShader);\n\t\tif(isModifiers) sunflow.parameter(\"\", currModifier);\n\t\tsunflow.parameter( \"\", m ); \n\t\tsunflow.instance( name + \"\", name );\n\t}", "comment": "/**\n\t * Draws a SphereFlake (note: requires Sunflow version 0.07.3)\n\t * @param name Individual name\n\t * @param x x position\n\t * @param y y position\n\t * @param z z position \n\t * @param size size\n\t * @param xRotation x rotation\n\t * @param yRotation y rotation\n\t * @param zRotation z rotation\n\n\t * @param level = numbers of iterative levels ranging from 0 to 20\n\t * @param axis = axis orientation\n\t * @param radius = radius for the inititial sphere\n\t */"}}
{"code": {"body": "\tpublic void setBackground(float red, float green, float blue){\n\t\tsunflow.parameter(\"\", null, red, green, blue);\n\t\tremoveBackground();\n\t\tsunflow.shader(\"\", \"\"); \n\t\tsunflow.geometry(\"\", \"\"); \n\t\tsunflow.parameter(\"\", \"\"); \n\t\tsunflow.instance(\"\", \"\"); \n\t}", "comment": "/**\n\t * creates background\n\t * @param red\n\t * @param green\n\t * @param blue\n\t */"}}
{"code": {"body": "\tpublic void drawHair(String name, int segments, float[] points, float[] widths) {\n\t\tsunflow.parameter(\"\", segments);\n\t\tsunflow.parameter(\"\", \"\", \"\", widths);\n\t\tsunflow.parameter(\"\", \"\", \"\", points);\n\n\t\tsunflow.geometry( name, \"\" );\n\t\tsunflow.parameter( \"\", currShader);\n\t\tif(isModifiers) sunflow.parameter(\"\", currModifier);\n\t\tsunflow.instance( name + \"\", name );\n\n\t}", "comment": "/**\n\t * draw hair object\n\t * @param name Individual Name\n\t * @param segments ?\n\t * @param points start of hair ?\n\t * @param widths hairwidth ?\n\t */"}}
{"code": {"body": "\tpublic void drawParticleSurface(String name, float[] particles, float radius, int num) {\n\t\tsunflow.parameter(\"\", \"\", \"\", particles);\n\t\tsunflow.parameter(\"\", num);\n\t\tsunflow.parameter(\"\", radius);\n\n\t\tsunflow.geometry( name, \"\" );\n\t\tsunflow.parameter( \"\", currShader);\n\t\tif(isModifiers) sunflow.parameter(\"\", currModifier);\n\t\tsunflow.instance( name + \"\", name );\n\t}", "comment": "/**\n\t * draw a particle surface object\n\t * @param name Individual name\n\t * @param particles float array with particle positions\n\t * @param radius object radius ?\n\t * @param num Number of Particles\n\t */"}}
{"code": {"body": "\tpublic void drawPlane(String name, Point3 center, Vector3 normal) {\n\t\tsunflow.parameter(\"\", center);\n\t\tsunflow.parameter(\"\", normal);\n\n\t\tsunflow.geometry( name, \"\" );\n\t\tsunflow.parameter( \"\", currShader);\n\t\tif(isModifiers) sunflow.parameter(\"\", currModifier);\n\t\tsunflow.instance( name + \"\", name );\n\t}", "comment": "/**\n\t * Draw a plane\n\t * @param name Individual name\n\t * @param center center of plane\n\t * @param normal normal of plane\n\t */"}}
{"code": {"body": "    public void drawCircularShape(String name, Point3[] points) {\n\n        int verticesLength = points.length*3;\n        int trianglesLength = points.length-1;\n        float[] vertices = new float[verticesLength];\n        int[] triangles = new int[trianglesLength];\n        \n        \n        int verticesIndex = 0;\n        for(int i=0;i<points.length;i++) {\n            vertices[verticesIndex++] = points[i].x; \n            vertices[verticesIndex++] = points[i].y; \n            vertices[verticesIndex++] = points[i].z; \n        }\n        \n        int trianglesIndex = 0;\n        int runx = 0;\n        for(int i=0;i<trianglesLength;i++) {\n            if(runx == 0) triangles[i] = 0; \n            if(runx == 1) triangles[i] = i-2;\n            if(runx == 2) triangles[i] = i;\n           \n            if(runx == 2) runx = 0;\n            else runx++;\n        }\n        triangles[trianglesIndex++] = 0; \n        triangles[trianglesIndex++] = points.length-1; \n        triangles[trianglesIndex++] = 1; \n        \n        sunflow.parameter(\"\", \"\", \"\", vertices); \n        sunflow.parameter(\"\", triangles);\n\n        sunflow.geometry( name, \"\" );\n        sunflow.parameter( \"\", currShader);\n        if(isModifiers) sunflow.parameter(\"\", currModifier);\n\t\tsunflow.instance( name + \"\", name );\n    }", "comment": "/**\n     * takes points, uses first point as center and connects the rest to it using triangles\n     * one can draw circles or weird other types of shapes\n     * \n     * @param name Individual name\n     * @param points a float array of Point3s.\n     */"}}
{"code": {"body": "    public void rect(String name, Point3 corner0, Point3 corner1, Point3 corner2, Point3 corner3) {\n    \t\n    \tfloat[] vertices = {corner0.x, corner0.y, corner0.z,\n    \t\t\tcorner1.x, corner1.y, corner1.z,\n    \t\t\tcorner2.x, corner2.y, corner2.z, \n    \t\t\tcorner3.x, corner3.y, corner3.z};\n    \t\n    \tint[] triangles = {0,1,2,0,2,3};\n    \t\n    \tthis.drawMesh(name, vertices, triangles);\n    }", "comment": "/**\n     * draws a rectangle\n     * @name individual name\n     * @param first corner\n     * @param second corner\n     * @param third corner\n     * @param fourth corner\n     */"}}
{"code": {"body": "\tpublic void setCameraPosition(float x, float y, float z) {\n\t\teye = new Point3(x, y, z);\n\t\t\n\t\tresetCamera();\n\t}", "comment": "/**\n\t * sets Camera Position\n\t * @param x x value\n\t * @param y y value\n\t * @param z z value\n\t */"}}
{"code": {"body": "\tpublic void setCameraTarget(float x, float y, float z) {\n\t\ttarget = new Point3(x, y, z);\n\t\t\n\t\tresetCamera();\n\t}", "comment": "/**\n\t * sets camera target (look at)\n\t * @param x x value\n\t * @param y y value\n\t * @param z z value\n\t */"}}
{"code": {"body": "\tpublic void setCameraUp(float value0, float value1, float value2) {\n\t\tup = new Vector3(value0, value1, value2);\n\t\t\n\t\tresetCamera();\n\t}", "comment": "/**\n\t * ? camera direction/rotation?\n\t * @param value0\n\t * @param value1\n\t * @param value2\n\t */"}}
{"code": {"body": "\tpublic void setPinholeCamera(String name, float fov, float aspect, float shiftX, float shiftY) {\n\t\t\n\t\tthis.currCamera = name;\n\t\tthis.fov = fov;\n\t\tthis.aspect = aspect;\n\t\tthis.shiftX = shiftX;\n\t\tthis.shiftY = shiftY;\n\t\tthis.cameraType = this.CAMERA_PINHOLE;\n\t\t\n\t\t\n\t\tcurrCamera = name;\n\n\t\tsunflow.parameter(\"\", Matrix4.lookAt(eye, target, up)); \n\t\tsunflow.parameter(\"\", fov);\n\t\tsunflow.parameter(\"\", aspect);\n\t\tsunflow.parameter(\"\", shiftX);\n\t\tsunflow.parameter(\"\", shiftY);\n\n\t\tsunflow.camera(name, CAMERA_PINHOLE);\n\t}", "comment": "/**\n\t * set a pinhole camera\n\t * @param name Individual Name\n\t * @param fov Field of View\n\t * @param aspect Aspect Ratio\n\t * @param shiftX ?\n\t * @param shiftY ?\n\t */"}}
{"code": {"body": "\tpublic void setThinlensCamera(String name, float fov, float aspect, float shiftX, float shiftY, float focusDistance, float lensRadius, int sides, float lensRotation) {\n\t\t\n\t\tthis.currCamera = name;\n\t\tthis.fov = fov;\n\t\tthis.aspect = aspect;\n\t\tthis.shiftX = shiftX;\n\t\tthis.shiftY = shiftY;\n\t\tthis.focusDistance = focusDistance;\n\t\tthis.lensRadius = lensRadius;\n\t\tthis.sides = sides;\n\t\tthis.lensRotation = lensRotation;\n\t\tthis.cameraType = this.CAMERA_THINLENS;\n\t\t\n\t\t\n\t\tcurrCamera = name;\n\n\t\tsunflow.parameter(\"\", Matrix4.lookAt(eye, target, up)); \n\t\tsunflow.parameter(\"\", fov);\n\t\tsunflow.parameter(\"\", aspect);\n\t\tsunflow.parameter(\"\", shiftX);\n\t\tsunflow.parameter(\"\", shiftY);\n\t\tsunflow.parameter(\"\", focusDistance);\n\t\tsunflow.parameter(\"\", lensRadius);\n\t\tsunflow.parameter(\"\", sides);\n\t\tsunflow.parameter(\"\", lensRotation);\n\n\t\tsunflow.camera(name, CAMERA_THINLENS);\n\t}", "comment": "/**\n\t * Set thinlens camera\n\t * @param name Individual name\n\t * @param fov Field of View\n\t * @param aspect Aspect ratio\n\t * @param shiftX ?\n\t * @param shiftY ?\n\t * @param focusDistance focal blur setting\n\t * @param lensRadius Lens radius\n\t * @param sides < 3 means use circular lens\n\t * @param lensRotation this rotates polygonal lenses\n\t */"}}
{"code": {"body": "\tpublic void setFisheyeCamera(String name) {\n\n\t\tthis.currCamera = name;\n\n\t\tsunflow.parameter(\"\", Matrix4.lookAt(eye, target, up)); \n\n\t\tsunflow.camera(name, CAMERA_FISHEYE);\n\t}", "comment": "/**\n\t * set fisheye camera\n\t * @param name Individual name\n\t */"}}
{"code": {"body": "\tpublic void setSphericalCamera(String name) {\n\n\t\tthis.currCamera = name;\n\n\t\tsunflow.parameter(\"\", Matrix4.lookAt(eye, target, up)); \n\n\t\tsunflow.camera(name, CAMERA_SPHERICAL);\n\t}", "comment": "/**\n\t * set spherical camera\n\t * @param name Individual name\n\t */"}}
{"code": {"body": "\tprivate void resetCamera() {\n\t\tsunflow.remove(currCamera);\n\t\tif(cameraType == this.CAMERA_FISHEYE) {\n\t\t\tthis.setFisheyeCamera(currCamera);\n\t\t} else if(cameraType == this.CAMERA_PINHOLE) {\n\t\t\tthis.setPinholeCamera(currCamera, fov, aspect, shiftX, shiftY);\n\t\t} else if(cameraType == this.CAMERA_SPHERICAL) {\n\t\t\tthis.setSphericalCamera(currCamera);\n\t\t} else if(cameraType == this.CAMERA_THINLENS) {\n\t\t\tthis.setThinlensCamera(currCamera, fov, aspect, shiftX, shiftY, focusDistance, lensRadius, sides, lensRotation);\n\t\t}\n\t}", "comment": "/**\n\t * resends current camera parameters to sunflow\n\t * one has to do that after having updated the position for example\n\t */"}}
{"code": {"body": "\tpublic void setAmbientOcclusionEngine(Color bright, Color dark, int samples, float maxDist) {\n\t\tsunflow.parameter(\"\", GI_AMBIENT_OCCLUSION); \n\t\tsunflow.parameter(\"\", colorSpace, bright.getRed()/(float)255, bright.getGreen(), bright.getBlue());\n\t\tsunflow.parameter(\"\", colorSpace, dark.getRed()/(float)255, dark.getGreen(), dark.getBlue());\n\t\tsunflow.parameter(\"\", samples);\n\t\tsunflow.parameter(\"\", maxDist);\n\t}", "comment": "/**\n\t * sets ambient occlusion gi engine\n\t * @param bright\n\t * @param dark\n\t * @param samples\n\t * @param maxDist\n\t */"}}
{"code": {"body": "\tpublic void setFakeGIEngine(Vector3 up, Color sky, Color ground) {\n\t\tsunflow.parameter(\"\", GI_FAKE);\n\t\tsunflow.parameter(\"\", up);\n\t\tsunflow.parameter(\"\", colorSpace, sky.getRed()/(float)255, sky.getGreen(), sky.getBlue());\n\t\tsunflow.parameter(\"\", colorSpace, ground.getRed()/(float)255, ground.getGreen()/(float)255, ground.getBlue()/(float)255);\n\t}", "comment": "/**\n\t * sets fake gi engine\n\t * @param up ?\n\t * @param sky Sky Color\n\t * @param ground Ground Color\n\t */"}}
{"code": {"body": "\tpublic void setInstantGIEngine(int samples, int sets, float c, int bias_samples) {\n\t\tsunflow.parameter(\"\", GI_INSTANT_GI);\n\t\tsunflow.parameter(\"\", samples);\n\t\tsunflow.parameter(\"\", sets);\n\t\tsunflow.parameter(\"\", c);\n\t\tsunflow.parameter(\"\", bias_samples);\n\t}", "comment": "/**\n\t * sets Instant Gi Engine\n\t * @param samples Detail, the higher the slower and smoother\n\t * @param sets ?\n\t * @param c ?\n\t * @param bias_samples ?\n\t */"}}
{"code": {"body": "\tpublic void setIrradianceCacheGIEngine(int samples, float tolerance, float minSpacing, float maxSpacing, String globalphotonmap){\n\t\tsunflow.parameter(\"\", GI_IRRADIANCE_CACHE);\n\t\tsunflow.parameter(\"\", samples);\n\t\tsunflow.parameter(\"\", tolerance);\n\t\tsunflow.parameter(\"\", minSpacing);\n\t\tsunflow.parameter(\"\", maxSpacing);\n\t\tsunflow.parameter(\"\", globalphotonmap);\n\t}", "comment": "/**\n\t * sets Irradiance Cache GI Engine\n\t * @param samples Detail, the higher the slower and smoother\n\t * @param tolerance ?\n\t * @param minSpacing ?\n\t * @param maxSpacing ? \n\t * @param globalphotonmap ?\n\t */"}}
{"code": {"body": "\tpublic void setPathTracingGIEngine(int samples) {\n\t\tsunflow.parameter(\"\", GI_PATH);\n\t\tsunflow.parameter(\"\", samples);\n\t}", "comment": "/**\n\t * sets path tracing gi engine\n\t * @param samples Detail, the higher the slower and smoother\n\t */"}}
{"code": {"body": "\tpublic void setColorSpace(String theColorSpace) {\n\t\tif(theColorSpace == COLORSPACE_SRGB_NONLINEAR) colorSpace = theColorSpace;\n\t\telse if(theColorSpace == COLORSPACE_SRGB_LINEAR) colorSpace = theColorSpace;\n\t\telse if(theColorSpace == COLORSPACE_XYZ) colorSpace = theColorSpace; \n\t\telse System.out.println(\"\");\n\t}", "comment": "/**\n\t * Sets color Space, default is COLORSPACE_SRGB_NONLINEAR\n\t * @param theColorSpace either COLORSPACE_SRGB_NONLINEAR, COLORSPACE_SRGB_LINEAR, or COLORSPACE_XYZ\n\t */"}}
{"code": {"body": "\tpublic void setBucketOrder(String newBucketOrder) {\n\t\tif(newBucketOrder == this.BUCKET_ORDER_COLUMN) this.currBucketOrder = this.BUCKET_ORDER_COLUMN;\n\t\tif(newBucketOrder == this.BUCKET_ORDER_DIAGONAL) this.currBucketOrder = this.BUCKET_ORDER_DIAGONAL;\n\t\tif(newBucketOrder == this.BUCKET_ORDER_HILBERT) this.currBucketOrder = this.BUCKET_ORDER_HILBERT;\n\t\tif(newBucketOrder == this.BUCKET_ORDER_RANDOM) this.currBucketOrder = this.BUCKET_ORDER_RANDOM;\n\t\tif(newBucketOrder == this.BUCKET_ORDER_SPIRAL) this.currBucketOrder = this.BUCKET_ORDER_SPIRAL;\n\t\tif(newBucketOrder == this.BUCKET_ORDER_ROW) this.currBucketOrder = this.BUCKET_ORDER_ROW;\n\t}", "comment": "/**\n\t * sets bucket order\n\t * @param newBucketOrder bucket order type\n\t */"}}
{"code": {"body": "\tpublic String getBucketOrder() {\n\t\treturn currBucketOrder;\n\t}", "comment": "/**\n\t * returns bucket order type\n\t * @return String\n\t */"}}
{"code": {"body": "\tpublic void removeObject(String name) {\n\t\tif(sunflow.lookupGeometry(name) != null) sunflow.remove(name);\n\t}", "comment": "/**\n\t * remove sunflow object. function checks if object is existing first\n\t * @param name\n\t */"}}
{"code": {"body": "\tpublic void removeShader(String name) {\n\t\tif(sunflow.lookupShader(name) != null) sunflow.remove(name);\n\t}", "comment": "/*\n\t * remove sunflow shader. function checks if object ist existing first\n\t * @param name\n\t */"}}
{"code": {"body": "\tpublic void removeModifier(String name) {\n\t\tif(sunflow.lookupModifier(name) != null) sunflow.remove(name);\n\t}", "comment": "/*\n\t * remove sunflow modifier. function checks if object ist existing first\n\t * @param name\n\t */"}}
{"code": {"body": "\tpublic void setBasicScene(int sceneWidth, int sceneHeight) {\n\t\t\n\t\tthis.setWidth(sceneWidth);\n\t\tthis.setHeight(sceneHeight);\n\t\t\n\t\tthis.setCameraPosition(0, 2, 15);\n\t\tthis.setThinlensCamera(\"\", 50f, (float)sceneWidth/sceneHeight);\n\t\t\n\t\tthis.setSunSkyLight(\"\");\n\t\tthis.setPointLight(\"\", new Point3(0,5,5), new Color(255,255,255));\n\t\tthis.setDirectionalLight(\"\", new Point3(-2,3,0), new Vector3(0,0,0), 3, new Color(1f,0f,0f));\n\t\t\n\t\tthis.setAmbientOcclusionShader(\"\", new Color(255,255,255), new Color(0,0,0), 16, 1);\n\t\t\n\t\tthis.drawPlane(\"\", new Point3(0,0,0), new Vector3(0,1,0));\n\t}", "comment": "/**\n\t * writes basic settings (camera, light, shader)\n\t * note: one still has to set the ambient occlusion shader\n\t * @param sceneWidth width of rendering\n\t * @param sceneHeight height of rendering\n\t */"}}
{"code": {"body": "\tpublic static void main(String[] args) {\n\t\t\n\t\tSystem.out.println(\"\");\n\t\tSystem.out.println(\"\");\n\n\t}", "comment": "/**\n\t * @param args\n\t */"}}
{"code": {"body": "\tpublic double getLatitude() {\n\t\treturn latitude;\n\t}", "comment": "/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/"}}
{"code": {"body": "\tpublic void setLatitude(double latitude) {\n\t\tthis.latitude = latitude;\n\t}", "comment": "/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/"}}
{"code": {"body": "\tpublic double getLongitude() {\n\t\treturn longitude;\n\t}", "comment": "/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/"}}
{"code": {"body": "\tpublic void setLongitude(double longitude) {\n\t\tthis.longitude = longitude;\n\t}", "comment": "/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/"}}
{"code": {"body": "\tpublic double getSpeed() {\n\t\treturn speed;\n\t}", "comment": "/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/"}}
{"code": {"body": "\tpublic void setSpeed(double speed) {\n\t\tthis.speed = speed;\n\t}", "comment": "/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/"}}
{"code": {"body": "\tpublic double distance(GeoPoint p) {\n\t\treturn _distance(this.getLatitude(),this.getLongitude(),p.getLatitude(),p.getLongitude(),'');\n\t}", "comment": "/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/"}}
{"code": {"body": "\tstatic double _distance(double lat1, double lon1, double lat2, double lon2, char unit) {\n\t\tdouble theta = lon1 - lon2;\n\t\tdouble dist = Math.sin(deg2rad(lat1)) * Math.sin(deg2rad(lat2)) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.cos(deg2rad(theta));\n\t\tdist = Math.acos(dist);\n\t\tdist = rad2deg(dist);\n\t\tdist = dist * 60 * 1.1515;\n\t\tif (unit == '') {\n\t\t\tdist = dist * 1.609344;\n\t\t} else if (unit == '') {\n\t\t\tdist = dist * 0.8684;\n\t\t}\n\t\treturn (dist);\n\t}", "comment": "/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/"}}
{"code": {"body": "\tstatic double deg2rad(double deg) {\n\t\treturn (deg * Math.PI / 180.0);\n\t}", "comment": "/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/"}}
{"code": {"body": "\tstatic double rad2deg(double rad) {\n\t\treturn (rad * 180.0 / Math.PI);\n\t}", "comment": "/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/"}}
{"code": {"body": "    public static void main(String[] args) {\n        \n\n\n        long l = 0;\n        double b = 3.14;\n\n        \n        \n\n        int a = 1;\n\n        \n        double c = a == 1 ? 2.0 : 3.0;\n\n        \n        if (a == 1) {\n            c = 2.0;\n        } else {\n            c = 3.0;\n        }\n\n        if (a >= 1 && c <= 3.0 && l == 0) {\n            \n        }\n\n        if (a >= 1 || c < 3.0) {\n            \n        }\n\n        if (a > 1 || c < 2.0 && l >= 0) {\n            System.out.println(\"\");\n        } else {\n            System.out.println(\"\");\n        }\n\n        if (a == 1) {\n            \n        } else if (a == 2) {\n            \n        } else if (a == 4) {\n            \n        } else if (a == 8 ) {\n            \n        } else {\n            \n        }\n\n        switch(a) {\n            case 1: \n                break;\n            case 2: \n                break;\n            case 4: \n                break;\n            case 8: \n                break;\n            default:\n                \n        }\n\n        FilingStatus status = FilingStatus.MARRIED;\n\n        switch(status) {\n            case SINGLE:\n                \n                break;\n\n\n\n            case MARRIED_FILING_SEPARATELY:\n                \n                break;\n            default:\n                \n                break;\n        }\n    }", "comment": "/*\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter a integer: \");\n        long intNumber = scanner.nextLong();\n        System.out.println(\"You entered: \" + intNumber);\n\n        System.out.print(\"Enter a real number: \");\n        double realNumber = scanner.nextDouble();\n        System.out.println(\"You entered: \" + realNumber);\n\n        System.out.print(\"Enter a real string: \");\n        String aString = scanner.nextLine();\n        System.out.println(\"You entered: \" + aString);\n        */"}}
{"code": {"body": "    public static void main(String[] args) {\n\t\n        System.out.println(\"\");\n    }", "comment": "/*\n     *  This is a multi-line comment\n     *\n     */"}}
{"code": {"body": "    public static void main(String[] args) {\n\t    \n\n        int i = 0; \n        int j = 1;\n        while (j < 32 || i < 5) {\n            \n            j *= 2;\n            i += 1; \n\n            \n        }\n\n        int k = 0;\n        boolean flag = true;\n        while (flag && k < 3) {\n            flag = !flag;\n            \n        }\n\n        for (int n = 0; n < 10; n += 1) {\n            \n        }\n\n\n        Scanner scan = new Scanner(System.in);\n        int x = 1;\n\n        for (int row = 4; row >= 0; row -= 1) {\n\n            int width = (row + 1) * 2;\n            for (int col = 0; col < width; col += 1) {\n                System.out.print(\"\");\n            }\n\n            System.out.print(\"\");\n        }\n\n        String block = \"\";\n        for ( int row = 0; row < 5; row += 1) {\n            System.out.println(block);\n            block += \"\";\n            \n        }\n    }", "comment": "/*\n        do {\n            System.out.print(\"Enter a number between 1 and 3: \");\n            x = scan.nextInt();\n        } while (x < 1 || x > 3);\n\n        boolean keepGoing = true;\n        while (keepGoing) {\n            System.out.print(\"Enter a number between 1 and 3: \");\n            x = scan.nextInt();\n            if (x >= 1 && x <= 3) {\n                keepGoing = false;\n            }\n        }\n*/"}}
{"code": {"body": "    public static void main(String[] args) {\n\t    \n        int n = 10;\n        int m = 20;\n\n        \n        if (n >= 10 && m <= 20) {\n            System.out.println(\"\");\n        } else {\n            System.out.println(\"\");\n        }\n\n        if (n >= 0) {\n            if (m > 10) {\n                System.out.println(\"\");\n            } else {\n                System.out.println(\"\");\n            }\n        }\n\n        \n\n        int q = (n > 0) ? 10 : 20;\n\n        if (n > 0) {\n            q = 10;\n        } else {\n            q = 20;\n        }\n\n        final double EPSILON = 1E-14;\n\n        double r = Math.sqrt(2.0);\n        System.out.println(r * r);\n\n        if (r * r - 2.0 < EPSILON) {\n            System.out.println(\"\");\n        } else {\n            System.out.println(\"\");\n        }\n\n        \n\n        String a = \"\";\n        int b = 1;\n\n        switch(a) {\n            case \"\":\n            case \"\":\n                System.out.println(\"\");\n                break;\n            case \"\":\n                System.out.println(\"\");\n                break;\n            case \"\":\n                System.out.println(\"\");\n                break;\n            default:\n                switch(b) {\n                    case 1:\n                        System.out.println(\"\");\n                    default:\n                        System.out.println(\"\");\n                }\n                System.out.println(\"\");\n        }\n\n        \n\n        \n    }", "comment": "/*\n        if (a == 1 || a == 5) {\n\n        } else if (a == 2) {\n\n        } else if (a == 3) {\n\n        } else {\n\n        }\n        */"}}
{"code": {"body": "\t@Override\tpublic void process(Mat source0) {\n\t\t\n\t\tMat hslThresholdInput = source0;\n\t\tdouble[] hslThresholdHue = {0.0, 180.0};\n\t\tdouble[] hslThresholdSaturation = {0.0, 255.0};\n\t\tdouble[] hslThresholdLuminance = {107.77877697841726, 255.0};\n\t\thslThreshold(hslThresholdInput, hslThresholdHue, hslThresholdSaturation, hslThresholdLuminance, hslThresholdOutput);\n\n\t\t\n\t\tMat findContoursInput = hslThresholdOutput;\n\t\tboolean findContoursExternalOnly = false;\n\t\tfindContours(findContoursInput, findContoursExternalOnly, findContoursOutput);\n\n\t\t\n\t\tArrayList<MatOfPoint> filterContoursContours = findContoursOutput;\n\t\tdouble filterContoursMinArea = 0;\n\t\tdouble filterContoursMinPerimeter = 0;\n\t\tdouble filterContoursMinWidth = 40.0;\n\t\tdouble filterContoursMaxWidth = 200.0;\n\t\tdouble filterContoursMinHeight = 0;\n\t\tdouble filterContoursMaxHeight = 1000;\n\t\tdouble[] filterContoursSolidity = {0, 100};\n\t\tdouble filterContoursMaxVertices = 1000000;\n\t\tdouble filterContoursMinVertices = 0;\n\t\tdouble filterContoursMinRatio = 0;\n\t\tdouble filterContoursMaxRatio = 1000;\n\t\tfilterContours(filterContoursContours, filterContoursMinArea, filterContoursMinPerimeter, filterContoursMinWidth, filterContoursMaxWidth, filterContoursMinHeight, filterContoursMaxHeight, filterContoursSolidity, filterContoursMaxVertices, filterContoursMinVertices, filterContoursMinRatio, filterContoursMaxRatio, filterContoursOutput);\n\n\t}", "comment": "/**\n\t * This is the primary method that runs the entire pipeline and updates the outputs.\n\t */"}}
{"code": {"body": "\tpublic Mat hslThresholdOutput() {\n\t\treturn hslThresholdOutput;\n\t}", "comment": "/**\n\t * This method is a generated getter for the output of a HSL_Threshold.\n\t * @return Mat output from HSL_Threshold.\n\t */"}}
{"code": {"body": "\tpublic ArrayList<MatOfPoint> findContoursOutput() {\n\t\treturn findContoursOutput;\n\t}", "comment": "/**\n\t * This method is a generated getter for the output of a Find_Contours.\n\t * @return ArrayList<MatOfPoint> output from Find_Contours.\n\t */"}}
{"code": {"body": "\tpublic ArrayList<MatOfPoint> filterContoursOutput() {\n\t\treturn filterContoursOutput;\n\t}", "comment": "/**\n\t * This method is a generated getter for the output of a Filter_Contours.\n\t * @return ArrayList<MatOfPoint> output from Filter_Contours.\n\t */"}}
{"code": {"body": "\tprivate void hslThreshold(Mat input, double[] hue, double[] sat, double[] lum,\n\t\tMat out) {\n\t\tImgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HLS);\n\t\tCore.inRange(out, new Scalar(hue[0], lum[0], sat[0]),\n\t\t\tnew Scalar(hue[1], lum[1], sat[1]), out);\n\t}", "comment": "/**\n\t * Segment an image based on hue, saturation, and luminance ranges.\n\t *\n\t * @param input The image on which to perform the HSL threshold.\n\t * @param hue The min and max hue\n\t * @param sat The min and max saturation\n\t * @param lum The min and max luminance\n\t * @param output The image in which to store the output.\n\t */"}}
{"code": {"body": "\tprivate void findContours(Mat input, boolean externalOnly,\n\t\tList<MatOfPoint> contours) {\n\t\tMat hierarchy = new Mat();\n\t\tcontours.clear();\n\t\tint mode;\n\t\tif (externalOnly) {\n\t\t\tmode = Imgproc.RETR_EXTERNAL;\n\t\t}\n\t\telse {\n\t\t\tmode = Imgproc.RETR_LIST;\n\t\t}\n\t\tint method = Imgproc.CHAIN_APPROX_SIMPLE;\n\t\tImgproc.findContours(input, contours, hierarchy, mode, method);\n\t}", "comment": "/**\n\t * Sets the values of pixels in a binary image to their distance to the nearest black pixel.\n\t * @param input The image on which to perform the Distance Transform.\n\t * @param type The Transform.\n\t * @param maskSize the size of the mask.\n\t * @param output The image in which to store the output.\n\t */"}}
{"code": {"body": "\tprivate void filterContours(List<MatOfPoint> inputContours, double minArea,\n\t\tdouble minPerimeter, double minWidth, double maxWidth, double minHeight, double\n\t\tmaxHeight, double[] solidity, double maxVertexCount, double minVertexCount, double\n\t\tminRatio, double maxRatio, List<MatOfPoint> output) {\n\t\tfinal MatOfInt hull = new MatOfInt();\n\t\toutput.clear();\n\t\t\n\t\tfor (int i = 0; i < inputContours.size(); i++) {\n\t\t\tfinal MatOfPoint contour = inputContours.get(i);\n\t\t\tfinal Rect bb = Imgproc.boundingRect(contour);\n\t\t\tif (bb.width < minWidth || bb.width > maxWidth) continue;\n\t\t\tif (bb.height < minHeight || bb.height > maxHeight) continue;\n\t\t\tfinal double area = Imgproc.contourArea(contour);\n\t\t\tif (area < minArea) continue;\n\t\t\tif (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter) continue;\n\t\t\tImgproc.convexHull(contour, hull);\n\t\t\tMatOfPoint mopHull = new MatOfPoint();\n\t\t\tmopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);\n\t\t\tfor (int j = 0; j < hull.size().height; j++) {\n\t\t\t\tint index = (int)hull.get(j, 0)[0];\n\t\t\t\tdouble[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1]};\n\t\t\t\tmopHull.put(j, 0, point);\n\t\t\t}\n\t\t\tfinal double solid = 100 * area / Imgproc.contourArea(mopHull);\n\t\t\tif (solid < solidity[0] || solid > solidity[1]) continue;\n\t\t\tif (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)\tcontinue;\n\t\t\tfinal double ratio = bb.width / (double)bb.height;\n\t\t\tif (ratio < minRatio || ratio > maxRatio) continue;\n\t\t\toutput.add(contour);\n\t\t}\n\t}", "comment": "/**\n\t * Filters out contours that do not meet certain criteria.\n\t * @param inputContours is the input list of contours\n\t * @param output is the the output list of contours\n\t * @param minArea is the minimum area of a contour that will be kept\n\t * @param minPerimeter is the minimum perimeter of a contour that will be kept\n\t * @param minWidth minimum width of a contour\n\t * @param maxWidth maximum width\n\t * @param minHeight minimum height\n\t * @param maxHeight maximimum height\n\t * @param Solidity the minimum and maximum solidity of a contour\n\t * @param minVertexCount minimum vertex Count of the contours\n\t * @param maxVertexCount maximum vertex Count\n\t * @param minRatio minimum ratio of width to height\n\t * @param maxRatio maximum ratio of width to height\n\t */"}}
{"code": {"body": "public DefaultGraphAlgorithm(Graph graph) {\n\t\tthis.graph = graph;\n\t}", "comment": "/**\n\t * constructor\n\t */"}}
{"code": {"body": "\tpublic Graph getGraph() {\n\t\treturn graph;\n\t}", "comment": "/**\n\t * graph getter\n\t * \n\t * @return graph graph\n\t */"}}
{"code": {"body": "\tpublic void setGraph(Graph graph) {\n\t\tthis.graph = graph;\n\t}", "comment": "/**\n\t * graph setter\n\t * \n\t * @param graph graph\n\t */"}}
{"code": {"body": "\tpublic void setGUI(GraphGUI gui) {\n\t\tthis.gui = gui;\n\t}", "comment": "/**\n\t * graphGUI setter\n\t * \n\t * @param gui gui\n\t */"}}
{"code": {"body": "\tpublic void reset() {\n\t\tpaused = true;\n\t\t\n\t\tgraph.reset();\n\t}", "comment": "/**\n\t * reset algorithm to a neutral state\n\t */"}}
{"code": {"body": "\tpublic void startAlgorithm(boolean paused) {\n\t\tthis.paused = paused;\n\t\tstartAlgorithm();\n\t}", "comment": "/**\n\t * start the algorithm in a new thread\n\t * \n\t * @param paused start pause status\n\t */"}}
{"code": {"body": "\tpublic final void breakPoint() {\n\t\ttry {\n\t\t\tThread.sleep(2000);\n\t\t} catch (InterruptedException e) {\n\t\t}\n\t\t\n\t\tif (thread != null) {\n\t\t\twhile (paused) {\n\t\t\t\tThread.yield();\n\t\t\t}\n\t\t}\n\t\t\n\t\tgui.repaint();\n\t}", "comment": "/**\n\t * breakpoint, graph can halt/pause here\n\t */"}}
{"code": {"body": "\tpublic void run() {\n\t\texecute();\n\t}", "comment": "/**\n\t * thread run method\n\t * executes the algorithm\n\t */"}}
{"code": {"body": "\tpublic String toString() {\n\t\treturn getClass().getSimpleName();\n\t}", "comment": "/**\n\t * string representation of algorithm\n\t * \n\t * @return graph name\n\t */"}}
{"code": {"body": "    public void addStudentsToCourse(Student st, Subject subj) {\n        Subject tempSubject = subj;\n        if (st != null && subj != null) {\n            if (st.getId() != 0) {\n                System.out.println(st.getId());\n                System.out.println(st.getId() == 0);\n                st = studentRepository.findDistinctById(st.getId());\n            } else {\n                System.out.println(\"\" + st);\n                if (st.getName() != null){\n                    st = studentRepository.findDistinctByName(st.getName());\n                }\n                System.out.println(st);\n            }\n\n            if (subj.getId() != 0){\n                subj = subjectRepository.findDistinctById(subj.getId());\n            }else{\n                if (subj.getSubjectName() != null)\n                    tempSubject  = subjectRepository.findDistinctBySubjectName(subj.getSubjectName());\n            }\n            if (tempSubject != null){\n                subj = tempSubject;\n            }\n            st.getSubjects().add(subj);\n            subj.getStudents().add(st);\n            studentRepository.save(st);\n\n            log.info(\"\");\n        }\n\n\n\n\n    }", "comment": "/**\n     *\n     * @param st - \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 \u0421\u0442\u0443\u0434\u0435\u043d\u0442.\n     * @param subj - \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 \u041f\u0440\u0435\u0434\u043c\u0435\u0442.\n     *             \u041c\u0435\u0442\u043e\u0434 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0432 \u0431\u0434 \u0441\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u043c \u0438 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u043c\n     *\n     */"}}
{"code": {"body": "  public void add(E e) {\n    add(size, e);\n  }", "comment": "/** Add a new element at the end of this list */"}}
{"code": {"body": "  public boolean isEmpty() {\n    return size == 0;\n  }", "comment": "/** Return true if this list contains no elements */"}}
{"code": {"body": "  public int size() {\n    return size;\n  }", "comment": "/** Return the number of elements in this list */"}}
{"code": {"body": "  public boolean remove(E e) {\n    if (indexOf(e) >= 0) {\n      remove(indexOf(e));\n      return true;\n    }\n    else\n      return false;\n  }", "comment": "/** Remove the first occurrence of the element o from this list.\n   *  Shift any subsequent elements to the left.\n   *  Return true if the element is removed. */"}}
{"code": {"body": "\tpublic Representation get(String status) throws JSONException {\n\n\t\treturn pirateResource.get(status);\n\t}", "comment": "/*\n\t\tif (isWinner) {\n\t\t\tplayercnt = 0;\n\t\t\treturn pirateResource.delete();\n\t\t}else{\n\t\t\tJSONObject response = new JSONObject();\n\t\t\tresponse.put(\"Error\", \"GameRoom is running with 5 active players.\");\n\t\t\treturn new JsonRepresentation(response);\n\t\t\t\n\t\t}*/"}}
{"code": {"body": "\tpublic Representation post(JsonRepresentation jsonRep) throws JSONException {\n\n\t\tplayercnt++;\n\t\tif (playercnt <= 5)\n\t\t\treturn pirateResource.post(jsonRep);\n\n\t\telse {\n\t\t\tJSONObject response = new JSONObject();\n\t\t\tresponse.put(\"\", \"\");\n\t\t\treturn new JsonRepresentation(response);\n\t\t}\n\n\t}", "comment": "/*\n\t\tif (isWinner) {\n\t\t\tplayercnt = 0;\n\t\t\treturn pirateResource.delete();\n\t\t}else{\n\t\t\tJSONObject response = new JSONObject();\n\t\t\tresponse.put(\"Error\", \"GameRoom is running with 5 active players.\");\n\t\t\treturn new JsonRepresentation(response);\n\t\t\t\n\t\t}*/"}}
{"code": {"body": "\tpublic Representation put(JsonRepresentation jsonRep) throws JSONException{\n\n\t\t\n\t\tJSONObject json = jsonRep.getJsonObject();\n\t\tString stage = json.getString(\"\");\n\n\t\tif (stage.equalsIgnoreCase(winner)) {\n\n\t\t\tisWinner = true;\n\t\t}\n\t\treturn  pirateResource.put(json);\n\n\t}", "comment": "/*\n\t\tif (isWinner) {\n\t\t\tplayercnt = 0;\n\t\t\treturn pirateResource.delete();\n\t\t}else{\n\t\t\tJSONObject response = new JSONObject();\n\t\t\tresponse.put(\"Error\", \"GameRoom is running with 5 active players.\");\n\t\t\treturn new JsonRepresentation(response);\n\t\t\t\n\t\t}*/"}}
{"code": {"body": "\tpublic Representation delete() {\n\n\t\tplayercnt = 0;\n\t\treturn pirateResource.delete();\n\t\t\n\t}", "comment": "/*\n\t\tif (isWinner) {\n\t\t\tplayercnt = 0;\n\t\t\treturn pirateResource.delete();\n\t\t}else{\n\t\t\tJSONObject response = new JSONObject();\n\t\t\tresponse.put(\"Error\", \"GameRoom is running with 5 active players.\");\n\t\t\treturn new JsonRepresentation(response);\n\t\t\t\n\t\t}*/"}}
{"code": {"body": "\tpublic String getIndex(){\n\t\t\n\t\tMembersService memberService = new MembersServiceImpl();\n\t\tlist_member = memberService.getMembers();\n\t\t\n\t\tProjectService projectService = new ProjectServiceImpl();\n\t\tlist_project = projectService.getProjects();\n\t\treturn \"\";\n\t}", "comment": "/**\n\t * \u83b7\u53d6\u9996\u9875\u4fe1\u606f\n\t */"}}
{"code": {"body": "\tpublic <T> long save(T obj){\n\t\tlong id;\n\t\ttry {\n\t\t\tSession session = HibernateSessionFactory.getSession();\n\t\t\tsession.beginTransaction();\n\t\t\tid = (long) session.save(obj);\n\t\t\tsession.getTransaction().commit();\n\t\t} catch (HibernateException e) {\n\t\t\tid = -1;\n\t\t\te.printStackTrace();\n\t\t}finally{\n\t\t\tHibernateSessionFactory.closeSession();\n\t\t}\n\t\treturn id;\n\t}", "comment": "/**\n\t * \u4fdd\u5b58\u4e00\u4e2a\u5b9e\u4f53\u5bf9\u8c61\n\t * @return \u63d2\u5165\u8bb0\u5f55\u7684id(id=-1\u8868\u793a\u63d2\u5165\u5931\u8d25)\n\t */"}}
{"code": {"body": "\tpublic <T> boolean saveList(List<T> list){\n\t\tboolean result;\n\t\ttry {\n\t\t\tSession session = HibernateSessionFactory.getSession();\n\t\t\tsession.beginTransaction();\n\t\t\tfor(T obj : list) {\n\t\t\t\tsession.save(obj);\n\t\t\t}\n\t\t\tsession.getTransaction().commit();\n\t\t} catch (HibernateException e) {\n\t\t\tresult = false;\n\t\t\te.printStackTrace();\n\t\t}finally{\n\t\t\tHibernateSessionFactory.closeSession();\n\t\t}\n\t\treturn true;\n\t}", "comment": "/**\n\t * \u4fdd\u5b58\u4e00\u7cfb\u5217\u5b9e\u4f53\u5bf9\u8c61\n\t * @param list \u542b\u6709\u9700\u8981\u4fdd\u5b58\u7684\u5b9e\u4f53\u5bf9\u8c61\u7684\u96c6\u5408\n\t * @return result\n\t */"}}
{"code": {"body": "\tpublic List<Object[]> queryCustomListByHql(String hql){\n\t\tif (hql==null || \"\".equals(hql)) {\n\t\t\treturn null;\n\t\t}\n\n\n\t\tList<Object[]> list = new ArrayList<Object[]>();\n\t\ttry {\n\t\t\tSession session = HibernateSessionFactory.getSession();\n\t\t\tsession.beginTransaction();\n\t\t\tlist =  session.createQuery(hql).list();\n\t\t\tsession.getTransaction().commit();\n\t\t} catch (HibernateException e) {\n\t\t\tlist = null;\n\t\t\te.printStackTrace();\n\t\t}finally{\n\t\t\tHibernateSessionFactory.closeSession();\n\t\t}\n\t\treturn list;\n\t}", "comment": "/**\n\t * \u67e5\u8be2\u81ea\u5b9a\u4e49\u96c6\u5408\uff0c\u6839\u636ehql\uff08\u7528\u4e8e\u591a\u8868\u67e5\u8be2\uff09\n\t * @return list \u81ea\u5b9a\u4e49\u5143\u7ec4\u7684\u7ed3\u679c\u96c6(list=null\u8bf4\u660e\u51fa\u9519)\n\t */"}}
{"code": {"body": "\tpublic <T> List<T> queryListByHql(String hql){\n\t\tif (hql==null || \"\".equals(hql)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tList<T> list = new ArrayList<T>();\n\t\ttry {\n\t\t\tSession session = HibernateSessionFactory.getSession();\n\t\t\tsession.beginTransaction();\n\t\t\tlist = session.createQuery(hql).list();\n\t\t\tsession.getTransaction().commit();\n\t\t} catch (HibernateException e) {\n\t\t\tlist = null;\n\t\t\te.printStackTrace();\n\t\t}finally{\n\t\t\tHibernateSessionFactory.closeSession();\n\t\t}\n\t\treturn list;\n\t}", "comment": "/**\n\t * \u67e5\u8be2\u5b9e\u4f53\u96c6\u5408\uff0c\u6839\u636ehql\uff08\u7528\u4e8e\u5355\u8868\u67e5\u8be2\uff09\n\t * @return list \u5305\u542b\u5b9e\u4f53\u5bf9\u8c61\u7684\u7ed3\u679c\u96c6(list=null\u8bf4\u660e\u51fa\u9519)\n\t */"}}
{"code": {"body": "\tpublic <T> T queryUniqueById(long id,String entityName){\n\t\tif(id<=0 || entityName==null || \"\".equals(entityName)){\n\t\t\treturn null;\n\t\t}\n\n\t\tT entity;\n\t\ttry {\n\t\t\tSession session = HibernateSessionFactory.getSession();\n\t\t\tsession.beginTransaction();\n\t\t\tString hql = \"\"+entityName+\"\";\n\t\t\tentity = (T) session.createQuery(hql)\n\t\t\t\t.setLong(\"\", id)\n\t\t\t.uniqueResult();\n\t\t\tsession.getTransaction().commit();\n\t\t} catch (HibernateException e) {\n\t\t\tentity = null;\n\t\t\te.printStackTrace();\n\t\t}finally{\n\t\t\tHibernateSessionFactory.closeSession();\n\t\t}\n\t\treturn entity;\n\t}", "comment": "/**\n\t * \u67e5\u8be2\u4e00\u6761\u8bb0\u5f55\uff0c\u6839\u636eid\n\t * @param entityName \u5b9e\u4f53\u7c7b\u7684\u540d\u5b57\n\t * @return obj \u67e5\u8be2\u7684\u7ed3\u679c\u5b9e\u4f53\u5bf9\u8c61(obj=null\u8868\u793a\u51fa\u9519)\n\t */"}}
{"code": {"body": "\tpublic <T> boolean deleteUniqueById(long id,String entityName){\n\t\tif(id<=0 || entityName==null || \"\".equals(entityName)){\n\t\t\treturn false;\n\t\t}\n\n\t\tboolean result = true;\n\t\ttry {\n\t\t\tSession session = HibernateSessionFactory.getSession();\n\t\t\tsession.beginTransaction();\n\t\t\tString hql = \"\"+entityName+\"\";\n\t\t\tsession.createQuery(hql)\n\t\t\t\t.setLong(\"\", id)\n\t\t\t\t.executeUpdate();\n\t\t\tsession.getTransaction().commit();\n\t\t} catch (HibernateException e) {\n\t\t\tresult = false;\n\t\t\te.printStackTrace();\n\t\t}finally{\n\t\t\tHibernateSessionFactory.closeSession();\n\t\t}\n\t\treturn result;\n\t}", "comment": "/**\n\t * \u5220\u9664\u4e00\u6761\u8bb0\u5f55\uff0c\u6839\u636eid\n\t * @param entityName \u5b9e\u4f53\u7c7b\u7684\u540d\u5b57\n\t * @param id \u9700\u8981\u5220\u9664\u7684\u8bb0\u5f55\u7684id\n\t */"}}
{"code": {"body": "\tpublic boolean updateByHql(String hql){\n\t\tif (hql==null || \"\".equals(hql)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tboolean result = true;\n\t\ttry {\n\t\t\tSession session = HibernateSessionFactory.getSession();\n\t\t\tsession.beginTransaction();\n\t\t\tsession.createQuery(hql)\n\t\t\t\t.executeUpdate();\n\t\t\tsession.getTransaction().commit();\n\t\t} catch (HibernateException e) {\n\t\t\tresult = false;\n\t\t\te.printStackTrace();\n\t\t}finally{\n\t\t\tHibernateSessionFactory.closeSession();\n\t\t}\n\t\treturn result;\n\t}", "comment": "/**\n\t * \u4fee\u6539\u8bb0\u5f55\uff0c\u6839\u636ehql\n\t * @param hql \n\t * @return result\n\t */"}}
{"code": {"body": "public Key(Class<? extends T> kind, long id)", "comment": "/** Create a key with a long id */"}}
{"code": {"body": "public Key(Class<? extends T> kind, String name)", "comment": "/** Create a key with a String name */"}}
{"code": {"body": "public Key(Key<?> parent, Class<? extends T> kind, long id)", "comment": "/** Create a key with a parent and a long id */"}}
{"code": {"body": "public Key(Key<?> parent, Class<? extends T> kind, String name)", "comment": "/** Create a key with a parent and a String name */"}}
{"code": {"body": "\tpublic long getId()\n\t{\n\t\treturn this.id;\n\t}", "comment": "/**\n\t * @return the id associated with this key, or 0 if this key has a name.\n\t */"}}
{"code": {"body": "\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}", "comment": "/**\n\t * @return the name associated with this key, or null if this key has an id\n\t */"}}
{"code": {"body": "\tpublic String getKindClassName()\n\t{\n\t\treturn this.kindClassName;\n\t}", "comment": "/**\n\t * @return the name of the Class associated with this key.\n\t */"}}
{"code": {"body": "public Heap(boolean isMax) {\n\t\tisMaxHeap= isMax;\n\t\tb= createElementArray(10);\n\t\tmap= new HashMap<>();\n\t}", "comment": "/** Constructor: an empty heap with capacity 10. <br>\n\t * It is a max-heap if isMax is true and a min-heap if isMax is false. */"}}
{"code": {"body": "\tpublic void add(E v, double p) throws IllegalArgumentException {\n\t\t\n\t\t\n\t\t\n\t\t\n\n\t\t\n\t\t\n\n\t\t\n\t\t\n\t\t\n\t\tif (map.containsKey(v)) throw new IllegalArgumentException(\"\");\n\t\tensureCapacity();\n\t\tmap.put(v, size);\n\t\tb[size]= new Element(v, p);\n\t\tsize= size + 1;\n\t\tbubbleUp(size - 1);\n\t}", "comment": "/** Add v with priority p to the heap. <br>\n\t * Throw an illegalArgumentException if v is already in the heap. <br>\n\t * The expected time is logarithmic and <br>\n\t * the worst-case time is linear in the size of the heap. */"}}
{"code": {"body": "\tprotected void ensureCapacity() {\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\n\t\t\n\t\t\n\n\t\t\n\t\t\n\n\t\t\n\t\tif (size == b.length) b= Arrays.copyOf(b, 2 * b.length);\n\t}", "comment": "/** If size = length of d, double the length of array d. <br>\n\t * The worst-case time is proportional to the length of d. */"}}
{"code": {"body": "\tpublic int size() { \n\t\treturn size;\n\t}", "comment": "/** Return the size of this heap. <br>\n\t * This operation takes constant time. */"}}
{"code": {"body": "\tvoid swap(int h, int k) {\n\t\tassert 0 <= h && h < size && 0 <= k && k < size;\n\t\t\n\t\t\n\t\t\n\t\t\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tElement temp= b[h];\n\t\tb[h]= b[k];\n\t\tb[k]= temp;\n\t\tmap.put(b[h].val, h);\n\t\tmap.put(b[k].val, k);\n\t}", "comment": "/** Swap b[h] and b[k]. <br>\n\t * Precondition: 0 <= h < heap-size, 0 <= k < heap-size. */"}}
{"code": {"body": "\tpublic int compareTo(int h, int k) {\n\t\treturn compareTo(b[h].priority, b[k].priority);\n\t}", "comment": "/** If b[h] should be above b[h] in the heap, return 1. <br>\n\t * If b[h]'s priority and b[k]'s priority are the same, return 0. <br>\n\t * If b[h] should be below b[k] in the heap, return -1. <br>\n\t * This is based on what kind of a heap this is, <br>\n\t * ... E.g. a min-heap, the value with the smallest priority is in the root. <br>\n\t * ... E.g. a max-heap, the value with the largest priority is in the root. */"}}
{"code": {"body": "\tvoid bubbleUp(int h) {\n\t\t\n\t\t\n\n\t\t\n\n\t\t\n\t\t\n\n\t\t\n\t\t\n\t\t\n\t\tif (h >= size) return;\n\t\t\n\t\t\n\t\t\n\t\twhile (h > 0) {\n\t\t\tint p= (h - 1) / 2; \n\t\t\tif (compareTo(h, p) <= 0) return;\n\t\t\tswap(h, p);\n\t\t\th= p;\n\t\t}\n\t}", "comment": "/** If h >= size, return.<br>\n\t * Otherwise, bubble b[h] up the heap to its right place. <br>\n\t * Precondition: 0 <= h and, if h < size, <br>\n\t * ... the class invariant is true, except perhaps that <br>\n\t * ... b[h] belongs above its parent (if h > 0) in the heap. */"}}
{"code": {"body": "\tpublic E peek() {\n\t\t\n\n\t\t\n\t\t\n\t\tif (size <= 0) throw new NoSuchElementException(\"\");\n\t\treturn b[0].val;\n\t}", "comment": "/** If this is a min-heap, return the heap value with lowest priority. <br>\n\t * If this is a max-heap, return the heap value with highest priority.<br>\n\t * Do not change the heap. <br>\n\t * This operation takes constant time. <br>\n\t * Throw a NoSuchElementException if the heap is empty. */"}}
{"code": {"body": "\tvoid bubbleDown(int h) {\n\t\t\n\t\t\n\t\t\n\t\tif (h < 0 || size <= h) return;\n\t\tint k= 2 * h + 1;\n\t\t\n\t\t\n\t\t\n\t\twhile (k < size) { \n\t\t\tint uc= k + 1 == size || compareTo(k, k + 1) >= 0 ? k : k + 1;\n\t\t\tif (compareTo(h, uc) >= 0) return;\n\t\t\tswap(h, uc);\n\t\t\th= uc;\n\t\t\tk= 2 * h + 1;\n\t\t}\n\t}", "comment": "/** If h < 0 or size <= h, return.<br>\n\t * Otherwise, Bubble b[h] down in heap until the class invariant is true. <br>\n\t * If there is a choice to bubble down to both the left and right children <br>\n\t * (because their priorities are equal), choose the left child. <br>\n\t *\n\t * Precondition: If 0 <= h < size, the class invariant is true except that <br>\n\t * perhaps b[h] belongs below one or both of its children. */"}}
{"code": {"body": "\tpublic E poll() {\n\t\t\n\t\t\n\t\t\n\n\t\tif (size <= 0) throw new NoSuchElementException(\"\");\n\n\t\tE v= b[0].val;\n\t\tswap(0, size - 1);\n\t\tmap.remove(v);\n\t\tsize= size - 1;\n\t\tbubbleDown(0);\n\t\treturn v;\n\t}", "comment": "/** If this is a min-heap, remove and return heap value with lowest priority. <br>\n\t * If this is a max-heap, remove and return heap value with highest priority. <br>\n\t * Expected time: logarithmic. Worst-case time: linear in the size of the heap.<br>\n\t * Throw a NoSuchElementException if the heap is empty. */"}}
{"code": {"body": "\tpublic void updatePriority(E v, double p) {\n\t\t\n\t\t\n\n\t\tInteger index= map.get(v);\n\t\tif (index == null) throw new IllegalArgumentException(\"\");\n\t\tdouble oldP= b[index].priority;\n\t\tb[index].priority= p;\n\t\tint t= compareTo(p, oldP);\n\t\tif (t == 0) return;\n\t\tif (t < 0) bubbleDown(index);\n\t\telse bubbleUp(index);\n\t}", "comment": "/** Change the priority of value v to p. <br>\n\t * Expected time: logarithmic. Worst-case time: linear in the size of the heap.<br>\n\t * Throw an IllegalArgumentException if v is not in the heap. */"}}
{"code": {"body": "\tpublic String toStringValues() {\n\t\tStringBuilder resb= new StringBuilder(\"\");\n\t\tfor (int h= 0; h < size; h= h + 1) {\n\t\t\tif (h > 0) resb.append(\"\");\n\t\t\tresb.append(b[h].val);\n\t\t}\n\t\treturn resb.append('').toString();\n\t}", "comment": "/** Return the heap values (only, not the priorities) in form [5, 3, 2]. */"}}
{"code": {"body": "\tpublic String toStringPriorities() {\n\t\tStringBuilder resb= new StringBuilder(\"\");\n\t\tfor (int h= 0; h < size; h= h + 1) {\n\t\t\tif (h > 0) resb.append(\"\");\n\t\t\tresb.append(b[h].priority);\n\t\t}\n\t\treturn resb.append('').toString();\n\t}", "comment": "/** Return the heap priorities in form [5.0, 3.0, 2.0]. */"}}
{"code": {"body": "\tpublic void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.main);\n\n\t\t\n\t\tButton task1Button = (Button) findViewById(R.id.task_1_button);\n\t\tButton task2Button = (Button) findViewById(R.id.task_2_button);\n\t\tButton task3Button = (Button) findViewById(R.id.task_3_button);\n\t\t\n\t\t\n\t\t\n\t\ttask1Button.setOnClickListener(new OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tstartActivity(\n\t\t\t\t\t\tnew Intent(getApplicationContext(),\n\t\t\t\t\t\tTask1.class));\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\ttask2Button.setOnClickListener(new OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tstartActivity(\n\t\t\t\t\t\tnew Intent(getApplicationContext(),\n\t\t\t\t\t\tTask2.class));\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\ttask3Button.setOnClickListener(new OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tstartActivity(\n\t\t\t\t\t\tnew Intent(getApplicationContext(),\n\t\t\t\t\t\tTask3.class));\n\t\t\t}\n\t\t});\n\t\t\n\n\t}", "comment": "/** Called when the activity is first created. */"}}
{"code": {"body": "public ConsistentMap() {\n        entrySet = new ConsistentSet(new HashSet());\n    }", "comment": "/**\n     * Constructs a new, empty <code>ConsistentMap</code>. All instances\n     * of <code>ConsistentMap</code> are unmodifiable.\n     */"}}
{"code": {"body": "public ConsistentMap(Map init) {\n\n        if (init == null) {\n            throw new NullPointerException();\n        }\n\n        \n        \n        HashSet unmodEntries = new HashSet();\n        Set entries = init.entrySet();\n        Iterator it = entries.iterator();\n        while (it.hasNext()) {\n\n            Map.Entry entry = (Map.Entry) it.next();\n            Map.Entry unmodEntry = new ConsistentMapEntry(entry.getKey(), entry.getValue());\n            unmodEntries.add(unmodEntry);\n        }\n        entrySet = new ConsistentSet(unmodEntries);\n    }", "comment": "/**\n     * Constructs a new <code>ConsistentMap</code> containing the elements\n     * in the passed collection. All instances of <code>ConsistentMap</code>\n     * are unmodifiable.\n     *\n     * @param init the map whose elements are to be placed into this map.\n     * @throws  NullPointerException if the passed <code>init</code> reference\n     *     is <code>null</code>\n     */"}}
{"code": {"body": "    public Set entrySet() {\n\n        return entrySet;\n    }", "comment": "/**\n     * Returns a set view of the mappings contained in this\n     * <code>ConsistentMap</code>. Each element in the returned\n     * set is a <code>Map.Entry</code>\n     *\n     * @return a set view of the mappings contained in this\n     *     <code>ConsistentMap</code>.\n     */"}}
{"code": {"body": "public ClientPermissionChecker(Permission permission) {\n\tif (permission == null) {\n\t    throw new NullPointerException();\n\t}\n\tthis.permission = permission;\n    }", "comment": "/**\n     * Creates instance that checks if client subjects have been granted the\n     * specified permission.\n     *\n     * @param permission the permission to use in client subject checks\n     * @throws NullPointerException if <code>permission</code> is\n     * <code>null</code>\n     */"}}
{"code": {"body": "    public void checkClientSubject(Subject subject) {\n\tif (subject != null && !subject.isReadOnly()) {\n\t    throw new IllegalArgumentException(\"\");\n\t}\n\tif (System.getSecurityManager() == null) {\n\t    return;\n\t}\n\tProtectionDomain pd;\n\tif (subject == null) {\n\t    pd = emptyPD;\n\t} else {\n\t    synchronized (domains) {\n\t\tpd = (ProtectionDomain) domains.get(subject);\n\t    }\n\t    if (pd == null) {\n\t\tSet s = subject.getPrincipals();\n\t\tPrincipal[] prins =\n\t\t    (Principal[]) s.toArray(new Principal[s.size()]);\n\t\tpd = new ProtectionDomain(emptyCS, null, null, prins);\n\t\tsynchronized (domains) {\n\t\t    domains.put(subject, pd);\n\t\t}\n\t    }\n\t}\n\tif (!pd.implies(permission)) {\n\t    throw new AccessControlException(\"\" + permission);\n\t}\n    }", "comment": "/**\n     * Checks whether or not to permit exchanging or accepting data with/from a\n     * client authenticated as the given subject, by testing if the subject has\n     * been granted the permission that this instance was constructed with.  If\n     * a security manager is installed, a {@link ProtectionDomain} is\n     * constructed with an empty {@link CodeSource} (<code>null</code> location\n     * and certificates), <code>null</code> permissions, <code>null</code>\n     * class loader, and the principals from the given client subject (if any),\n     * and the {@link ProtectionDomain#implies implies} method of that\n     * protection domain is invoked with the specified permission.  If\n     * <code>true</code> is returned, this method returns normally, otherwise a\n     * <code>SecurityException</code> is thrown.  If no security manager is\n     * installed, this method returns normally.  The given client subject must\n     * be read-only if non-<code>null</code>.\n     *\n     * @throws SecurityException {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     */"}}
{"code": {"body": "public LogException() {\n\tinitCause(null);\n    }", "comment": "/**\n     * Create a wrapper exception for exceptions that occur during a logging\n     * operation.\n     */"}}
{"code": {"body": "public LogException(String s) {\n\tsuper(s);\n\tinitCause(null);\n    }", "comment": "/**\n     * For exceptions that occur during a logging operation, create a wrapper\n     * exception with the specified description string.\n     */"}}
{"code": {"body": "public LogException(String s, Throwable ex) {\n\tsuper(s);\n        initCause(null);\n\tdetail = ex;\n    }", "comment": "/**\n     * For exceptions that occur during a logging operation, create a wrapper\n     * exception with the specified description string and the specified\n     * nested exception.\n     */"}}
{"code": {"body": "    public String getMessage() {\n\tif (detail == null) \n\t    return super.getMessage();\n\telse\n\t    return super.getMessage() + \n\t\t\"\" +\n\t\tdetail.toString();\n    }", "comment": "/**\n     * Produce the message; including the message from the nested exception\n     * if there is one.\n     */"}}
{"code": {"body": "    public Throwable getCause() {\n        return detail;\n    }", "comment": "/**\n     * Returns the nested exception (the <i>cause</i>).\n     */"}}
{"code": {"body": "public MSAgent(Character character) ", "comment": "/***\n\t * Constructor; instantiates a new MSAgent object.\n\t * @param character the character of the MSAgent\n\t * @throws MSAgentException thrown when tempted to create a duplicate character or when the running OS is not a Windows\n\t */"}}
{"code": {"body": "\tprivate synchronized static void init() \n\tthrows MSAgentException\n\t{\n\t\tif (initialized)\n\t\t\treturn;\n\t\t\n\t\ttry\n\t\t{\n\t\t\tString path = (MSAgent.class.getResource(\"\").getPath().split(\"\")[0].split(\"\")[1] + \"\").replaceAll(\"\", \"\");\n\t\t\tif (!new File(path).exists())\n\t\t\t\tthrow new MSAgentException(\"\" + path + \"\");\n\t\t}\n\t\tcatch (ArrayIndexOutOfBoundsException aioobe) { throw new MSAgentException(\"\"); }\n\t\t\n\t\tcharactersInUse = new HashSet<String>();\n\t\tmsAgents = new HashSet<MSAgent>();\n\t\t\n\t\tinitialized = true;\n\t\t\n\t\tEnv.getInstance().start();\n\t}", "comment": "/***\n\t * Initializes the class. This method is executed only once.\n\t * @throws MSAgentException thrown when testing the dll location fails\n\t */"}}
{"code": {"body": "\tpublic boolean isVisible()\n\t{\n\t\treturn isVisible;\n\t}", "comment": "/***\n\t * Returns whether this MSAgent is visible; when the <code>show</code> method was called.\n\t * @return true when this MSAgent is visible\n\t */"}}
{"code": {"body": "\tpublic synchronized Character getCharacter()\n\t{\n\t\treturn character;\n\t}", "comment": "/***\n\t * Returns the Character which was bound to this MSAgent instance during initialization.\n\t * @return a Character object\n\t */"}}
{"code": {"body": "\tpublic static synchronized void detach()\n\t{\n\t\tcharactersInUse.clear();\n\t\t\n\t\tfor (MSAgent msAgent : msAgents.toArray(new MSAgent[0]))\n\t\t\tmsAgent.detached = true;\n\t\t\n\t\tEnv.getInstance().doDetach(null);\n\t\t\n\t\tinitialized = false;\n\t}", "comment": "/***\n\t * Detaches all MSAgents.\n\t */"}}
{"code": {"body": "\tpublic synchronized void show(boolean animated) \n\tthrows MSAgentException\n\t{\n\t\tif (detached)\n\t\t\tthrow new MSAgentException(\"\");\n\t\tEnv.getInstance().doShow(this, !animated);\n\t\tisVisible = true;\n\t\t\n\t\ttry { wait(); }\n\t\tcatch (InterruptedException ie) { ie.printStackTrace(); }\n\t}", "comment": "/***\n\t * Makes the character appear.\n\t * @param animated indicates whether the character appears animated (true) or fast (false)\n\t * @throws MSAgentException \n\t */"}}
{"code": {"body": "\tpublic synchronized void hide(boolean animated) \n\tthrows MSAgentException\n\t{\n\t\tif (detached)\n\t\t\tthrow new MSAgentException(\"\");\n\t\tEnv.getInstance().doHide(this, !animated);\n\t\tisVisible = false;\n\t\t\n\t\ttry { wait(); }\n\t\tcatch (InterruptedException ie) { ie.printStackTrace(); }\n\t}", "comment": "/***\n\t * Hides the character.\n\t * @param animated indicates whether the character hides animated (true) or fast (false)\n\t * @throws MSAgentException \n\t */"}}
{"code": {"body": "\tpublic synchronized void speak(String text) \n\tthrows MSAgentException\n\t{\n\t\tif (detached)\n\t\t\tthrow new MSAgentException(\"\");\n\t\tEnv.getInstance().doSpeakAudio(this, text);\n\t\t\n\t\ttry { wait(); }\n\t\tcatch (InterruptedException ie) { ie.printStackTrace(); }\n\t}", "comment": "/***\n\t * Speaks a given text; shows it in a text balloon and plays the text as audio.\n\t * Note that the Microsoft speech drivers need to be installed.\n\t * @param text the text which is to be spoken\n\t * @throws MSAgentException \n\t */"}}
{"code": {"body": "\tpublic synchronized void think(String thoughts) \n\tthrows MSAgentException\n\t{\n\t\tif (detached)\n\t\t\tthrow new MSAgentException(\"\");\n\t\tEnv.getInstance().doThink(this, thoughts);\n\t\t\n\t\ttry { wait(); }\n\t\tcatch (InterruptedException ie) { ie.printStackTrace(); }\n\t}", "comment": "/***\n\t * Shows a text balloon which indicates the thoughts of the character.\n\t * @param thoughts the text which should appear in the balloon\n\t * @throws MSAgentException \n\t */"}}
{"code": {"body": "\tpublic synchronized void moveTo(int x, int y, int delay) \n\tthrows MSAgentException\n\t{\n\t\tif (detached)\n\t\t\tthrow new MSAgentException(\"\");\n\t\tEnv.getInstance().doMoveTo(this, x, y, delay);\n\t\t\n\t\ttry { wait(); }\n\t\tcatch (InterruptedException ie) { ie.printStackTrace(); }\n\t}", "comment": "/***\n\t * Moves the character to a specific location on the screen in a specified time.\n\t * @param x the x coordinate\n\t * @param y the y coordinate\n\t * @param delay the delay in milliseconds\n\t * @throws MSAgentException \n\t */"}}
{"code": {"body": "\tpublic synchronized void gestureAt(int x, int y) \n\tthrows MSAgentException\n\t{\n\t\tif (detached)\n\t\t\tthrow new MSAgentException(\"\");\n\t\tEnv.getInstance().doGestureAt(this, x, y);\n\t\t\n\t\ttry { wait(); }\n\t\tcatch (InterruptedException ie) { ie.printStackTrace(); }\n\t}", "comment": "/***\n\t * Gestures at a specific location on the screen.\n\t * @param x the x coordinate\n\t * @param y the y coordinate\n\t * @throws MSAgentException \n\t */"}}
{"code": {"body": "\tpublic synchronized void perform(Animation animation) \n\tthrows MSAgentException\n\t{\n\t\tif (!animation.getCharacter().getName().equals(character.getName()))\n\t\t\tthrow new MSAgentException(\"\" + animation.getCharacter().getName() + \"\" + animation.getName().toUpperCase() + \"\" + animation.getCharacter().getName() + \"\");\n\t\tEnv.getInstance().doPlayAnimation(this, animation.getName());\n\t\t\n\t\ttry { wait(); }\n\t\tcatch (InterruptedException ie) { ie.printStackTrace(); }\n\t}", "comment": "/***\n\t * Performs a specific Animation.\n\t * @param animation an Animation object which holds the requested animation that should be performed\n\t * @throws MSAgentException thrown when the character of this MSAgent does not match with the given Animation's character\n\t */"}}
{"code": {"body": "\tpublic static synchronized void addMSAgentListenerToAll(MSAgentListener listener)\n\t{\n\t\tfor (MSAgent msAgent : msAgents)\n\t\t\tEnv.getInstance().addMSAgentListener(msAgent, listener);\n\t}", "comment": "/***\n\t * Adds an MSAgentListener to all MSAgents.\n\t * @see MSAgentListener\n\t * @see MSAgentActionEvent\n\t * @param listener the MSAgentListener\n\t */"}}
{"code": {"body": "\tpublic static synchronized void removeMSAgentListenerFromAll(MSAgentListener listener)\n\t{\n\t\tfor (MSAgent msAgent : msAgents)\n\t\t\tEnv.getInstance().removeMSAgentListener(msAgent, listener);\n\t}", "comment": "/***\n\t * Removes an MSAgentListener from all MSAgents.\n\t * @param listener the MSAgentListener\n\t */"}}
{"code": {"body": "\tpublic static Env getInstance()\n\t{\n\t\tif (instance == null)\n\t\t\tinstance = new Env();\n\t\t\n\t\treturn instance;\n\t}", "comment": "/***\n\t * Returns the one and only instance of this class. Initializes it when it hasn't been initialized yet.\n\t * @return an Env object\n\t */"}}
{"code": {"body": "public Client() {\n\timpl = new ClientImpl();\n    }", "comment": "/**\n     * Creates a new instance.\n     */"}}
{"code": {"body": "\tprivate static KerberosPrincipal getKerberosPrincipal(\n\t\t\t\t\t\tInvocationConstraints constraints)\n\t    throws UnsupportedConstraintException\n\t{\n\t    KerberosPrincipal principal = null;\n\t    for (Iterator i = constraints.requirements().iterator(); i.hasNext(); )\n\t    {\n\t\tInvocationConstraint c = (InvocationConstraint) i.next();\n\t\tif (c instanceof ServerMinPrincipal) {\n\t\t    Set s = ((ServerMinPrincipal) c).elements();\n\t\t    if (s.size() > 1) {\n\t\t\tthrow new UnsupportedConstraintException(\n\t\t\t    \"\");\n\t\t    }\n\t\t    Principal p = (Principal) s.iterator().next();\n\t\t    if (!(p instanceof KerberosPrincipal)) {\n\t\t\tthrow new UnsupportedConstraintException(\n\t\t\t    \"\");\n\t\t    }\n\t\t    if (principal == null) {\n\t\t\tprincipal = (KerberosPrincipal) p;\n\t\t    } else if (!principal.equals(p)) {\n\t\t\tthrow new UnsupportedConstraintException(\n\t\t\t    \"\");\n\t\t    }\n\t\t}\n\t\t\n\t    }\n\t    if (principal != null) {\n\t\treturn principal;\n\t    }\n\t    for (Iterator i = constraints.preferences().iterator(); i.hasNext(); )\n\t    {\n\t\tInvocationConstraint c = (InvocationConstraint) i.next();\n\t\tif (c instanceof ServerMinPrincipal) {\n\t\t    Set s = ((ServerMinPrincipal) c).elements();\n\t\t    for (Iterator j = s.iterator(); j.hasNext(); ) {\n\t\t\tPrincipal p = (Principal) j.next();\n\t\t\tif (p instanceof KerberosPrincipal) {\n\t\t\t    return (KerberosPrincipal) p;\n\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t    }\n\t    throw new UnsupportedConstraintException(\"\");\n\t}", "comment": "/**\n\t * Returns the kerberos principal specified in the ServerMinPrincipal\n\t * requirements or preferences of the given constraints.  Throws\n\t * UnsupportedConstraintException if no kerberos principal is specified, a\n\t * non-kerberos server principal is required, or multiple server principals\n\t * are required.\n\t */"}}
{"code": {"body": "public BasicServiceType() {}", "comment": "/** Simple constructor, leaves type field set to null. */"}}
{"code": {"body": "public BasicServiceType(String type) {\n\tthis.type = type;\n    }", "comment": "/**\n     *Simple constructor, sets type field to parameter value.\n     *\n     * @param type type of service\n     */"}}
{"code": {"body": "    public Image getIcon(int iconKind) {\n\tinit();\n\tif (bundle != null) {\n\t    try {\n\t\treturn (Image)bundle.getObject(\"\" + iconKind);\n\t    } catch (MissingResourceException e) {\n\t    }\n\t}\n\treturn null;\n    }", "comment": "/** Returns the resource named \"icon.<var>int</var>\", else null. */"}}
{"code": {"body": "    public String getDisplayName() {\n\tinit();\n\tif (bundle != null) {\n\t    try {\n\t\treturn bundle.getString(\"\");\n\t    } catch (MissingResourceException e) {\n\t    }\n\t}\n\treturn type.substring(type.lastIndexOf('') + 1);\n    }", "comment": "/**\n     * Returns the resource named \"name\", else the type field\n     * stripped of any package prefix (i.e., any characters up to\n     * and including the last dot ('.').\n     */"}}
{"code": {"body": "    public String getShortDescription() {\n\tinit();\n\tif (bundle != null) {\n\t    try {\n\t\treturn bundle.getString(\"\");\n\t    } catch (MissingResourceException e) {\n\t    }\n\t}\n\treturn null;\n    }", "comment": "/** Returns the resource named \"desc\", else null. */"}}
{"code": {"body": "\tpublic static Box2DEntity createBox2DEntity(float x, float y, float width, float height, \n\t\t\tshort cat, short mask, World w, BodyType type)\n\t{\n\t\treturn new Box2DEntity(x, y, width, height, cat, mask, w, type);\n\t}", "comment": "/**\n\t * Used a factory to create Box2DEntities that have a category bit and mask bit\n\t * @return Box2DEntity\n\t */"}}
{"code": {"body": "\tpublic FixtureDef getFixtureDef()\n\t{\n\t\treturn this.fdef;\n\t}", "comment": "/**\n\t * @return FixtureDef\n\t */"}}
{"code": {"body": "\tpublic void setFixtureDef(FixtureDef def)\n\t{\n\t\tfdef = def;\n\t}", "comment": "/**\n\t * @param def\n\t */"}}
{"code": {"body": "\tpublic Body getBody()\n\t{\n\t\treturn this.b;\n\t}", "comment": "/**\n\t * @return Body\n\t */"}}
{"code": {"body": "\tpublic BodyDef getBodyDef()\n\t{\n\t\treturn this.bdef;\n\t}", "comment": "/**\n\t * @return BodyDef\n\t */"}}
{"code": {"body": "\tpublic float getX()\n\t{\n\t\treturn x;\n\t}", "comment": "/**\n\t * @return\n\t */"}}
{"code": {"body": "\tpublic void setX(float x)\n\t{\n\t\tthis.x = x;\n\t}", "comment": "/**\n\t * @param x\n\t */"}}
{"code": {"body": "\tpublic float getY()\n\t{\n\t\treturn y;\n\t}", "comment": "/**\n\t * @return\n\t */"}}
{"code": {"body": "\tpublic void setY(float y)\n\t{\n\t\tthis.y = y;\n\t}", "comment": "/**\n\t * @param y\n\t */"}}
{"code": {"body": "\tpublic float getWidth()\n\t{\n\t\treturn width;\n\t}", "comment": "/**\n\t * @return\n\t */"}}
{"code": {"body": "\tpublic void setWidth(float width)\n\t{\n\t\tthis.width = width;\n\t}", "comment": "/**\n\t * @param width\n\t */"}}
{"code": {"body": "\tpublic float getHeight()\n\t{\n\t\treturn height;\n\t}", "comment": "/**\n\t * @return\n\t */"}}
{"code": {"body": "\tpublic void setHeight(float height)\n\t{\n\t\tthis.height = height;\n\t}", "comment": "/**\n\t * @param height\n\t */"}}
{"code": {"body": "    public void bindTexture() {\n        GL11.glBindTexture(GL11.GL_TEXTURE_2D, textureHandle);\n    }", "comment": "/**\n     * binds the framebuffer's content to the active texture unit\n     */"}}
{"code": {"body": "    public void sendTextureToSamplerLocation0(int uniformLocation) {\n        GL13.glActiveTexture(GL13.GL_TEXTURE0);\n        GL11.glBindTexture(GL11.GL_TEXTURE_2D, textureHandle);\n        GL20.glUniform1i(uniformLocation, 0);\n    }", "comment": "/**\n     * shortcut to send this fbo's texture as uniform to the currently selected shader\n     * as GL13.GL_TEXTURE0\n     */"}}
{"code": {"body": "    public void sendTextureDimensionsAsUniform(int uniformLocation) {\n        GL20.glUniform2f(uniformLocation, width, height);\n\n    }", "comment": "/**\n     * shortcut to send this fbo's dimensions as uniform to the currently selected shader\n     * vec2(width,height)\n     */"}}
{"code": {"body": "    private int[] genFBOwithRGBA32F(int width, int height, int minFilter) {\n\n        IntBuffer buffer = ByteBuffer.allocateDirect(1 * 4).order(ByteOrder.nativeOrder()).asIntBuffer(); \n        EXTFramebufferObject.glGenFramebuffersEXT(buffer); \n        frameBufferHandle = buffer.get();\n        EXTFramebufferObject.glBindFramebufferEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT, frameBufferHandle);\n\n        textureHandle = glGenTextures();\n        glBindTexture(GL_TEXTURE_2D, textureHandle);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, minFilter);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA32F, width, height, 0, GL_RGBA, GL_FLOAT, (FloatBuffer) null); \n\n        EXTFramebufferObject.glFramebufferTexture2DEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT, EXTFramebufferObject.GL_COLOR_ATTACHMENT0_EXT,\n                GL11.GL_TEXTURE_2D, textureHandle, 0);\n\n        int framebuffer = EXTFramebufferObject.glCheckFramebufferStatusEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT);\n        switch (framebuffer) {\n            case EXTFramebufferObject.GL_FRAMEBUFFER_COMPLETE_EXT:\n                break;\n            case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT:\n                throw new RuntimeException(\"\" + frameBufferHandle\n                        + \"\");\n            case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT:\n                throw new RuntimeException(\"\" + frameBufferHandle\n                        + \"\");\n            case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT:\n                throw new RuntimeException(\"\" + frameBufferHandle\n                        + \"\");\n            case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT:\n                throw new RuntimeException(\"\" + frameBufferHandle\n                        + \"\");\n            case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT:\n                throw new RuntimeException(\"\" + frameBufferHandle\n                        + \"\");\n            case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT:\n                throw new RuntimeException(\"\" + frameBufferHandle\n                        + \"\");\n            default:\n                throw new RuntimeException(\"\" + framebuffer);\n        }\n\n        if (frameBufferHandle == 0)\n            throw new RuntimeException(\"\");\n\n        EXTFramebufferObject.glBindFramebufferEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT, 0);\n\n        return new int[]{frameBufferHandle, textureHandle, 0};\n    }", "comment": "/**\n     * creates a new FBO with a float texture and initializes the object handles\n     *\n     * @param width\n     * @param height\n     * @return array with fboHandle at 0, textureID at 1, depthID at 2\n     */"}}
{"code": {"body": "    protected void onCreate(Bundle savedInstanceState){\n\n        super.onCreate(savedInstanceState);\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n        gestureDetector = new GestureDetector(this, this);\n\n        DisplayMetrics metrics = new DisplayMetrics();\n        getWindowManager().getDefaultDisplay().getMetrics(metrics);\n\n        spritsLoad = new SpritsLoad(this, metrics.heightPixels, metrics.widthPixels);\n        \n        spritsLoad.loadBitmaps();\n\n        soundLoad = new SoundLoad(this);\n        \n        soundLoad.loadAllAudios();\n\n        configLoad = new ConfigLoad(metrics);\n\n        gamePanel = new GamePanel(this, getWindow(), metrics.heightPixels, metrics.widthPixels, soundLoad, spritsLoad, configLoad);\n\n        setContentView(gamePanel);\n    }", "comment": "/* O C\u00d3DIGO ABAIXO \u00c9 O INICIO DE UMA TENTATIVA DE IMPLMENTAR UM PEQUENO IMPULSO NA VIMANA\n             *  SERIA UTIL QUANDO O PLAYER ESTIVER FUGINDO DE UM SHOT, OU INDO EM DIRECAO A UM BONUS IMPORTANTE PARA ELE EM DADO MOMENTO DO GAMEPLAY\n             *  - INICIALMENTE FUNCIONOU, FALTA REFINAMENTO\n             *\n            if((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_POINTER_DOWN){\n                //Toco na tela com two fingers\n                gamePanel.getPlayer().setBreveImpulso(true);\n            }\n\n            if(event.getAction() == MotionEvent.ACTION_POINTER_2_UP){\n                //Soltei o segundo dedo, nesse caso a velocidade da vimana volta ao normal.\n                gamePanel.getPlayer().setBreveImpulso(false);\n            }\n            */"}}
{"code": {"body": "    public boolean onTouchEvent(MotionEvent event){\n        gestureDetector.onTouchEvent(event);\n        gamePanel.getPlayer().isUpdate(true);\n        if(gamePanel != null && gamePanel.getPlayer()!=null) {\n            if(!gamePanel.getPlayer().getPlaying() && gamePanel.isNewGameCreated() && gamePanel.isReset()){\n                gamePanel.getPlayer().setPlaying(true);\n            }\n            if(gamePanel.getPlayer().getPlaying()){\n                if(!gamePanel.isStarted()){\n                    gamePanel.setStarted(true);\n                }\n                gamePanel.setReset(false);\n            }\n            \n            if (event.getAction() == MotionEvent.ACTION_MOVE) {\n                if(!((event.getX() >= ((gamePanel.WIDTH_SCREEN/5) * 4) && event.getY() >= ((gamePanel.HEIGHT/5) * 4) &&\n                    (event.getX() >= ((gamePanel.WIDTH_SCREEN/5) * 4) && event.getY() >= gamePanel.HEIGHT))) ) {\n\n                    gamePanel.getPlayer().setTouchY(event.getY());\n\n                    double rad = Math.atan2(lastY - event.getY(), lastX - event.getX()) + Math.PI;\n                    Control.getInstance().defineDirection(gamePanel, (int) Math.abs((rad * 180 / Math.PI + 180) % 360));\n\n                    lastY = event.getY();\n                    lastX = event.getX();\n\n                    return true;\n                }\n            }\n\n            \n\n        }\n        gamePanel.getPlayer().isUpdate(false);\n        return super.onTouchEvent(event);\n    }", "comment": "/* O C\u00d3DIGO ABAIXO \u00c9 O INICIO DE UMA TENTATIVA DE IMPLMENTAR UM PEQUENO IMPULSO NA VIMANA\n             *  SERIA UTIL QUANDO O PLAYER ESTIVER FUGINDO DE UM SHOT, OU INDO EM DIRECAO A UM BONUS IMPORTANTE PARA ELE EM DADO MOMENTO DO GAMEPLAY\n             *  - INICIALMENTE FUNCIONOU, FALTA REFINAMENTO\n             *\n            if((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_POINTER_DOWN){\n                //Toco na tela com two fingers\n                gamePanel.getPlayer().setBreveImpulso(true);\n            }\n\n            if(event.getAction() == MotionEvent.ACTION_POINTER_2_UP){\n                //Soltei o segundo dedo, nesse caso a velocidade da vimana volta ao normal.\n                gamePanel.getPlayer().setBreveImpulso(false);\n            }\n            */"}}
{"code": {"body": "    public static String readFile(String filePath) throws IOException {\n        StringBuffer sb = new StringBuffer();\n        FileUtils.readToBuffer(sb, filePath);\n        return sb.toString();\n    }", "comment": "/**\n     * @param filePath\n     * @return\n     * @throws IOException\n     */"}}
{"code": {"body": "    public static void readToBuffer(StringBuffer buffer, String filePath) throws IOException {\n        InputStream is = new FileInputStream(filePath);\n        String line; \n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        line = reader.readLine(); \n        while (line != null) { \n            buffer.append(line); \n            buffer.append(\"\"); \n            line = reader.readLine(); \n        }\n        reader.close();\n        is.close();\n    }", "comment": "/**\n     * @param buffer\n     * @param filePath\n     * @throws IOException\n     */"}}
{"code": {"body": "public BoundedCube(int length, int breadth, int height) throws IllegalArgumentException {\n        if (length < 0 || breadth < 0 || height < 0) { \n        \tthrow new IllegalArgumentException();\n\t\t}\n\n\t}", "comment": "/**\n\t * \n\t * @param length  Maximum size in the 'x' dimension.\n\t * @param breadth Maximum size in the 'y' dimension.\n\t * @param height  Maximum size in the 'z' dimension.\n\t * @throws IllegalArgumentException If provided dimension sizes are not positive.\n\t */"}}
{"code": {"body": "    public static void main(String[] args) {\n        \n      ContactEditorUI CON = new ContactEditorUI();\n      CON.setVisible(true);\n    }", "comment": "/**\n     * @param args the command line arguments\n     */"}}
{"code": {"body": "public AutoGrader() {\n    }", "comment": "/**\n     * Allocate a new autograder.\n     */"}}
{"code": {"body": "    public void start(Privilege privilege) {\n\tLib.assertTrue(this.privilege == null,\n\t\t   \"\");\n\tthis.privilege = privilege;\n\n\tString[] args = Machine.getCommandLineArguments();\n\n\textractArguments(args);\n\n\tSystem.out.print(\"\");\n\n\tinit();\n\n\tSystem.out.print(\"\");\t\n\n\tkernel =\n\t    (Kernel) Lib.constructObject(Config.getString(\"\"));\n\tkernel.initialize(args);\n\n\trun();\n    }", "comment": "/**\n     * Start this autograder. Extract the <tt>-#</tt> arguments, call\n     * <tt>init()</tt>, load and initialize the kernel, and call\n     * <tt>run()</tt>.\n     *\n     * @param\tprivilege      \tencapsulates privileged access to the Nachos\n     * \t\t\t\tmachine.\n     */"}}
{"code": {"body": "    public void setIdleThread(KThread idleThread) {\n    }", "comment": "/**\n     * Notify the autograder that the specified thread is the idle thread.\n     * <tt>KThread.createIdleThread()</tt> <i>must</i> call this method before\n     * forking the idle thread.\n     *\n     * @param\tidleThread\tthe idle thread.\n     */"}}
{"code": {"body": "    public void readyThread(KThread thread) {\n    }", "comment": "/**\n     * Notify the autograder that the specified thread has moved to the ready\n     * state. <tt>KThread.ready()</tt> <i>must</i> call this method before\n     * returning.\n     *\n     * @param\tthread\tthe thread that has been added to the ready set.\n     */"}}
{"code": {"body": "    public void runningThread(KThread thread) {\n\tprivilege.tcb.associateThread(thread);\n\tcurrentThread = thread;\n    }", "comment": "/**\n     * Notify the autograder that the specified thread is now running.\n     * <tt>KThread.restoreState()</tt> <i>must</i> call this method before\n     * returning.\n     *\n     * @param\tthread\tthe thread that is now running.\n     */"}}
{"code": {"body": "    public void finishingCurrentThread() {\n\tprivilege.tcb.authorizeDestroy(currentThread);\n    }", "comment": "/**\n     * Notify the autograder that the current thread has finished.\n     * <tt>KThread.finish()</tt> <i>must</i> call this method before putting\n     * the thread to sleep and scheduling its TCB to be destroyed.\n     */"}}
{"code": {"body": "    public void timerInterrupt(Privilege privilege, long time) {\n\tLib.assertTrue(privilege == this.privilege,\n\t\t   \"\");\n    }", "comment": "/**\n     * Notify the autograder that a timer interrupt occurred and was handled by\n     * software if a timer interrupt handler was installed. Called by the\n     * hardware timer.\n     *\n     * @param\tprivilege\tproves the authenticity of this call.\n     * @param\ttime\tthe actual time at which the timer interrupt was\n     *\t\t\tissued.\n     */"}}
{"code": {"body": "    public boolean exceptionHandler(Privilege privilege) {\n\tLib.assertTrue(privilege == this.privilege,\n\t\t   \"\");\n\treturn true;\n    }", "comment": "/**\n     * Notify the autograder that a user program executed a syscall\n     * instruction.\n     *\n     * @param\tprivilege\tproves the authenticity of this call.\n     * @return\t<tt>true</tt> if the kernel exception handler should be called.\n     */"}}
{"code": {"body": "    public void runProcessor(Privilege privilege) {\n\tLib.assertTrue(privilege == this.privilege,\n\t\t   \"\");\n    }", "comment": "/**\n     * Notify the autograder that <tt>Processor.run()</tt> was invoked. This\n     * can be used to simulate user programs.\n     *\n     * @param\tprivilege\tproves the authenticity of this call.\n     */"}}
{"code": {"body": "    public Coff createLoader(OpenFile file) {\n\treturn null;\n    }", "comment": "/**\n     * Notify the autograder that a COFF loader is being constructed for the\n     * specified file. The autograder can use this to provide its own COFF\n     * loader, or return <tt>null</tt> to use the default loader.\n     *\n     * @param\tfile\tthe executable file being loaded.\n     * @return\ta loader to use in loading the file, or <tt>null</tt> to use\n     *\t\tthe default.\n     */"}}
{"code": {"body": "    public boolean canSendPacket(Privilege privilege) {\n\tLib.assertTrue(privilege == this.privilege,\n\t\t   \"\");\n\treturn true;\n    }", "comment": "/**\n     * Request permission to send a packet. The autograder can use this to drop\n     * packets very selectively.\n     *\n     * @param\tprivilege\tproves the authenticity of this call.\n     * @return\t<tt>true</tt> if the packet should be sent.\n     */"}}
{"code": {"body": "    public boolean canReceivePacket(Privilege privilege) {\n\tLib.assertTrue(privilege == this.privilege,\n\t\t   \"\");\n\treturn true;\n    }", "comment": "/**\n     * Request permission to receive a packet. The autograder can use this to\n     * drop packets very selectively.\n     *\n     * @param\tprivilege\tproves the authenticity of this call.\n     * @return\t<tt>true</tt> if the packet should be delivered to the kernel.\n     */"}}
{"code": {"body": "public NachosSecurityManager(File testDirectory) {\n\tthis.testDirectory = testDirectory;\n\n\tfullySecure = Config.getBoolean(\"\");\n    }", "comment": "/**\n     * Allocate a new Nachos security manager.\n     *\n     * @param\ttestDirectory\tthe directory usable by the stub file system.\n     */"}}
{"code": {"body": "    public Privilege getPrivilege() {\n\tLib.assertTrue(this != System.getSecurityManager());\n\n\treturn new PrivilegeProvider();\n    }", "comment": "/**\n     * Return a privilege object for this security manager. This security\n     * manager must not be the active security manager.\n     *\n     * @return\ta privilege object for this security manager.\n     */"}}
{"code": {"body": "    public void enable() {\n\tLib.assertTrue(this != System.getSecurityManager());\n\t\n\tdoPrivileged(new Runnable() {\n\t    public void run() {\n\t\tSystem.setSecurityManager(NachosSecurityManager.this);\n\t    }\n\t});\n    }", "comment": "/**\n     * Install this security manager.\n     */"}}
{"code": {"body": "    public void checkPermission(Permission perm) {\n\tString name = perm.getName();\n\t\n\t\n\tif (perm instanceof RuntimePermission) {\n\t    \n\t    if (name.equals(\"\"))\n\t\tno(perm);\n\t}\n\t\n\t\n\tif (!fullySecure) {\n\t    if (perm instanceof NetPermission) {\n\t\t\n\t\tif (name.equals(\"\"))\n\t\t    return;\n\t    }\n\n\t    if (perm instanceof RuntimePermission) {\n\t\t\n\t\tif (name.startsWith(\"\")) {\n\t\t    String lib = name.substring(\"\".length());\n\t\t    if (lib.equals(\"\")) {\n\t\t\tLib.debug(dbgSecurity, \"\" + lib);\n\t\t\treturn;\n\t\t    }\n\t\t}\n\t    }\n\n\t    if (perm instanceof AWTPermission) {\n\t\t\n\t\tif (name.equals(\"\"))\n\t\t    return;\n\t    }\n\t}\n\n\t\n\tif (perm instanceof PropertyPermission) {\n\t    \n\t    if (perm.getActions().equals(\"\"))\n\t\treturn;\n\t}\n\n\t\n\tif (perm instanceof FilePermission) {\n\t    if (perm.getActions().equals(\"\")) {\n\t\t\n\t\tif (isPrivileged())\n\t\t    return;\n\n\t\tenablePrivilege();\n\n\t\t\n\t\ttry {\n\t\t    File f = new File(name);\n\t\t    if (f.isFile()) {\n\t\t\tFile p = f.getParentFile();\n\t\t\tif (p != null) {\n\t\t\t    if (p.equals(testDirectory))\n\t\t\t\tno(perm);\n\t\t\t}\n\t\t    }\n\t\t}\n\t\tcatch (Throwable e) {\n\t\t    rethrow(e);\n\t\t}\n\n\t\tdisablePrivilege();\n\t\treturn;\n\t    }\n\t    else if (perm.getActions().equals(\"\") ||\n\t\t     perm.getActions().equals(\"\")) {\n\t\t\n\t\tverifyPrivilege();\n\n\t\ttry {\n\t\t    File f = new File(name);\n\t\t    if (f.isFile()) {\n\t\t\tFile p = f.getParentFile();\n\t\t\tif (p != null && p.equals(testDirectory))\n\t\t\t    return;\n\t\t    }\n\t\t}\n\t\tcatch (Throwable e) {\n\t\t    no(perm);\n\t\t}\t\t    \n\t    }\n\t    else if (perm.getActions().equals(\"\")) {\n\t\t\n\t\tverifyPrivilege();\n\n\t\tif (Machine.networkLink() == null)\n\t\t    no(perm);\n\t    }\n\t    else {\n\t\tno(perm);\n\t    }\n\t}\n\n\t\n\tverifyPrivilege(perm);\n    }", "comment": "/**\n     * Check the specified permission. Some operations are permissible while\n     * not grading. These operations are regulated here.\n     *\n     * @param\tperm\tthe permission to check.\n     */"}}
{"code": {"body": "    public ThreadGroup getThreadGroup() {\n\tverifyPrivilege();\n\treturn null;\n    }", "comment": "/**\n     * Called by the <tt>java.lang.Thread</tt> constructor to determine a\n     * thread group for a child thread of the current thread. The caller must\n     * be privileged in order to successfully create the thread.\n     *\n     * @return\ta thread group for the new thread, or <tt>null</tt> to use the\n     *\t        current\tthread's thread group.\n     */"}}
{"code": {"body": "    public void verifyPrivilege(Permission perm) {\n\tif (!isPrivileged())\n\t    no(perm);\n    }", "comment": "/**\n     * Verify that the caller is privileged, so as to check the specified\n     * permission.\n     *\n     * @param\tperm\tthe permission being checked.\n     */"}}
{"code": {"body": "\tpublic void display(GLAutoDrawable drawable) {\n\n\t\tGL2 gl = drawable.getGL().getGL2();\n\n\t\t\n\t\tgl.glClear(GL2.GL_COLOR_BUFFER_BIT | GL2.GL_DEPTH_BUFFER_BIT);\n\t\t\n\t\t\n\n\t\t\n\t\tthis.lights(gl);\n\t\tthis.spotLight(gl);\n\t\t\n\t\t\n\t\t\n\t\tgl.glPolygonMode(gl.GL_FRONT_AND_BACK, frame ? gl.GL_LINE : gl.GL_FILL);\n\n\t\t\n\t\tgl.glPushMatrix();\n\t\to.display(gl);\n\t\tgl.glPopMatrix();\n\t\t\n\t\tcamera.setLookAt(s.getX(), s.getY(), s.getZ());\n\t\tcamera.setA(s.getHeading() + 90);\n\t\tcamera.setEl(10);\n\t\tcamera.draw(gl);\n\t\t\n\t\tif(s.getY() >= 5.0){\n\t\t\tgl.glEnable(GL2.GL_LIGHT2);\n\t\t}else{\n\t\t\tgl.glDisable(GL2.GL_LIGHT2);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tif (Math.abs(s.getX()) > 45 || Math.abs(s.getZ()) > 45) {\n\t\t\tSystem.out.println(\"\");\n\t\t\ts.turnAround();\n\t\t}\n\t\t\n\t\ts.draw(gl);\n\t\t\n\t\tsea.draw(gl);\n\t\tbed.draw(gl);\n\t\tgl.glClearColor(0.25f, 0.64f, 0.72f, 0.5f);\n\t\tgl.glEnable(GL2.GL_FOG);\n\t\tfloat[] fogColor = {0.25f, 0.64f, 0.72f, 0.5f };\n\t\t\n\t\tgl.glFogi(GL2.GL_FOG_MODE, GL2.GL_EXP);\n\t\tgl.glFogi(GL2.GL_FOG_MODE, GL2.GL_EXP2); \n\t\tgl.glFogi(GL2.GL_FOG_MODE, GL2.GL_LINEAR);\n\t\tgl.glFogfv(GL2.GL_FOG_COLOR, fogColor, 0); \n\t\tgl.glFogf(GL2.GL_FOG_DENSITY, 0.95f); \n\t\tgl.glHint(GL2.GL_FOG_HINT, GL2.GL_NICEST); \n\t\tgl.glFogf(GL2.GL_FOG_START, 0.5f); \n\t\tgl.glFogf(GL2.GL_FOG_END, 10.0f); \n\t\t\n\t\tgl.glEnable(GL2.GL_NORMALIZE);\n\n\t\tgl.glFlush();\n\n\t}", "comment": "/* 0.79, 0.74, 0.57 */"}}
{"code": {"body": "\tpublic void dispose(GLAutoDrawable drawable) {\n\t\t\n\n\t}", "comment": "/* 0.79, 0.74, 0.57 */"}}
{"code": {"body": "\tpublic void init(GLAutoDrawable drawable) {\n\t\tGL2 gl = drawable.getGL().getGL2();\n\t\t\n\t\tbed = new Grid(200, 1, 1, 1, 1,  -7, \"\");\n\t\tsea = new Grid(200, 1, 1, 1, 1,  5, \"\");\n\t\twl.setup(gl);\n\t\tgl.setSwapInterval(1);\n\n\t\t\n\t\tgl.glEnable(GL2.GL_DEPTH_TEST);\n\t\tgl.glEnable(GL2.GL_TEXTURE_2D);\n\n\t\tgl.glShadeModel(GL2.GL_SMOOTH);\n\t\t\n\t\tgl.glEnable(GL2.GL_LIGHTING);\n\t\tgl.glEnable(GL2.GL_NORMALIZE);\n\n\t}", "comment": "/* 0.79, 0.74, 0.57 */"}}
{"code": {"body": "public Folder() {\n        this.fileMap = new HashMap<String, ArrayList<String>>();\n    }", "comment": "/**\n     * default constructor\n     */"}}
{"code": {"body": "    public void setFileMap(HashMap<String, ArrayList<String>> fileMap) {\n        this.fileMap = fileMap;\n    }", "comment": "/**\n     * sets fileMap class member\n     *\n     * @param fileMap\n     */"}}
{"code": {"body": "    public Map<String, ArrayList<String>> getFileMap() {\n        return this.fileMap;\n    }", "comment": "/**\n     * returns class member fileMap\n     *\n     * @return\n     */"}}
{"code": {"body": "    public void setPath(String path) {\n        this.path = path;\n    }", "comment": "/**\n     * setter for class member path\n     *\n     * @param path\n     */"}}
{"code": {"body": "    public String getPath() {\n        return this.path;\n    }", "comment": "/**\n     * getter for class member path\n     *\n     * @return\n     */"}}
{"code": {"body": "    public ArrayList<String> findDuplicates(String inputFilePath, String folderPath) {\n        ArrayList<String> sameFiles = new ArrayList<String>();\n\n        File folder = new File(folderPath);\n        File[] listOfFiles = folder.listFiles();\n\n        String inputFileChecksum = null;\n        String fileName = null;\n\n        try {\n            inputFileChecksum = generateChecksum(inputFilePath, hashAlgorithm);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        for (File file : listOfFiles) {\n            if (file.isFile()) {\n                String filePath = file.getAbsolutePath();\n                fileName = file.getName();\n                String fileChecksum = null;\n                try {\n                    fileChecksum = generateChecksum(filePath, hashAlgorithm);\n                } catch (NoSuchAlgorithmException e) {\n                    e.printStackTrace();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if (inputFileChecksum.equals(fileChecksum)) {\n                    sameFiles.add(fileName);\n                }\n            }\n        }\n        return sameFiles;\n    }", "comment": "/**\n     * searches inside the folder to find a file that equals with given file\n     * return the equal's fileName returns null if there is no equal file\n     *\n     * @param inputFilePath\n     * @param folderPath\n     * @return\n     */"}}
{"code": {"body": "    private boolean containsFileInList(Map<String, ArrayList<String>> map, String fileName) {\n\n        for (Map.Entry<String, ArrayList<String>> entry : map.entrySet()) {\n            if (entry.getValue().contains(fileName)) {\n                return true;\n            }\n        }\n        return false;\n    }", "comment": "/**\n     * helper method if fileName exists in the map's lists returns true else\n     * return false\n     *\n     * @param map\n     * @param fileName\n     * @return\n     */"}}
{"code": {"body": "    public HashMap<String, ArrayList<String>> mapDuplicates(String folderPath) {\n\n        HashMap<String, ArrayList<String>> sameFilesMap = this.fileMap;\n        File folder = new File(folderPath);\n        File[] listOfFiles = folder.listFiles();\n\n        for (File file : listOfFiles) {\n            String fileName = file.getName();\n            String filePath = file.getAbsolutePath();\n            if (!containsFileInList(sameFilesMap, fileName)) \n            {\n                sameFilesMap.put(fileName, findDuplicates(filePath, folderPath));\n            }\n        }\n        return sameFilesMap;\n    }", "comment": "/**\n     * searches in the folder with the given name puts in HashMap all the files\n     * of the folder as keys and puts as values the file that has the same\n     * context\n     *\n     * @param folderPath\n     * @return\n     */"}}
{"code": {"body": "    private String generateChecksum(String filePath, String algorithm)\n            throws NoSuchAlgorithmException, IOException {\n\n        MessageDigest md = MessageDigest.getInstance(algorithm);\n        FileInputStream fis = new FileInputStream(filePath);\n\n        byte[] dataBytes = new byte[1024];\n        int nread = 0;\n\n        while ((nread = fis.read(dataBytes)) != -1) {\n            md.update(dataBytes, 0, nread);\n        }\n        fis.close();\n\n        byte[] mdBytes = md.digest();\n\n        return bytesToHex(mdBytes);\n    }", "comment": "/**\n     * Generates checksum with the given algorithm returns the hex string of the\n     * checksum\n     *\n     * @param fileName\n     * @return\n     * @throws NoSuchAlgorithmException\n     * @throws IOException\n     */"}}
{"code": {"body": "    private String bytesToHex(byte[] byteArray) {\n\n        StringBuffer sb = new StringBuffer(\"\");\n        String hex = null;\n        for (int i = 0; i < byteArray.length; i++) {\n            sb.append(Integer.toString((byteArray[i] & 0xff) + 0x100, 16).substring(1));\n        }\n\n        hex = sb.toString();\n        return hex;\n    }", "comment": "/**\n     * converts byte array to hex String returns hex String\n     *\n     * @param byteArray\n     * @return\n     */"}}
{"code": {"body": "\tpublic static void init(long d, int m, long q) {\n\t\tlong dm = 1;\n\t\twhile (m > 0) {\n\t\t\tif ((m & 1) == 1) \n\t\t\t\tdm = (dm * d) & q;\n\t\t\tm = m / 2;\n\t\t\td = (d * d) & q;\n\t\t}\n\t\tfor (int i = 0; i < 256; i++)\n\t\t\tmodQ[i] = (i * dm) & q;\n\t}", "comment": "/*BEGIN\tCLEAN ALL !!!!!\t*/"}}
{"code": {"body": "\tpublic static String bytesToHex(byte[] b) {\n\t\tchar hexDigit[] = {'', '', '', '', '', '', '', '',\n\t\t\t'', '', '', '', '', '', '', ''};\n\t\tStringBuffer buf = new StringBuffer();\n\t\tfor (int j=0; j < b.length; j++) {\n\t\t\tbuf.append(hexDigit[(b[j] >> 4) & 0x0f]);\n\t\t\tbuf.append(hexDigit[b[j] & 0x0f]);\n\t\t}\n\t\treturn buf.toString();\n\t}", "comment": "/*BEGIN\tCLEAN ALL !!!!!\t*/"}}
{"code": {"body": "\tpublic static void fileDown(String filepath) {\n\t\ttry {\n\t\t\tbyte[] FileMeta = downloader.getObject(\"\", filepath);\n\t\t\tString MetaString = new String(FileMeta);\n\t\t\tSystem.out.println(MetaString);\n\n\t\t\tScanner sc = new Scanner(MetaString);\n\t\t\tString nextSHA1;\n\t\t\tInteger val;\n\n\t\t\twhile (sc.hasNext()) {\n\t\t\t\tnextSHA1 = sc.next();\n\t\t\t\tbyte[] content = downloader.getObject(\"\", nextSHA1);\n\t\t\t\tString StrContent = new String(content);\n\t\t\t\tSystem.out.println(StrContent);\n\t\t\t}\n\t\t\tsc.close();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}", "comment": "/*BEGIN\tCLEAN ALL !!!!!\t*/"}}
{"code": {"body": "\tpublic static void main(String[] args) {\n\t\tboolean exit = false;\n\t\tString input, cmd, filepath;\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tchunkIndex = new HashMap<String, Integer>();\n\t\tchunkSizeIndex = new HashMap<String, Integer>();\n\n\t\tdownloader = new FilesClient(\"\", \"\", \"\");\n\t\tdownloader.setConnectionTimeOut(10000);\n\n\t\ttry {\n\t\t\tdownloader.login();\n\t\t\t\n\t\t\ttry {\n\t\t\t\tList<FilesObject> fos = downloader.listObjects(\"\");\n\t\t\t\tfor (FilesObject fo:fos){\n\t\t\t\t\tdownloader.deleteObject(\"\", fo.getName());\n\t\t\t\t}   \n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}   \n\t\t\tdownloader.deleteContainer(\"\");\n\t\t\ttry {\n\t\t\t\tList<FilesObject> fos = downloader.listObjects(\"\");\n\t\t\t\tfor (FilesObject fo:fos){\n\t\t\t\t\tdownloader.deleteObject(\"\", fo.getName());\n\t\t\t\t}   \n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}   \n\t\t\tdownloader.deleteContainer(\"\");\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tSystem.out.println(\"\");\n\t\tscan.close();\n\t}", "comment": "/*BEGIN\tCLEAN ALL !!!!!\t*/"}}
{"code": {"body": "public WebServer(int port) {\n\t\t\n\t\ttry \n\t\t{\n\t\t\tif (port > 1024 && port < 65536 ) \n\t\t\t{\n\t\t\t\t\n\t\t\t\tPORT_NUM = port;\n\t\t\t\texecutor = Executors.newFixedThreadPool(POOL_SIZE);\n\t\t\t\tSystem.out.println(\"\" + port);\n\t\t\t} \n\t\t}\n\t\tcatch (Exception e) { System.out.println(\"\" + e);}\t\n\t}", "comment": "/**\n     * Default constructor to initialize the web server\n     * \n     * @param port \tThe server port at which the web server listens > 1024\n     * \n     */"}}
{"code": {"body": "\tpublic void run() {\n\t\t\n\t\ttry\n\t\t{\n\t\t\tthis.serverSocket = new ServerSocket(PORT_NUM);\n\t\t\tserverSocket.setSoTimeout(1000);\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tSystem.out.println(\"\");\n\t\t}\t\t\n\t\t\n\t\twhile (!shutdown) \n\t\t{\n\t\t\tSocket clientSocket = new Socket();\n\t\t\ttry \n\t\t\t{\n\t\t\t\n\t\t\t\ttry \n\t\t\t\t{ \n\t\t\t\t\t\n\t\t\t\t\texecutor.execute(new Worker(serverSocket.accept()));\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcatch (SocketTimeoutException e)\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t} \n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t}\n\t\t\tcatch (IOException e) \n\t\t\t{ \n\t\t\t\t\n\t\t\t}\t\t\n\t\t}\n\t\t\t\n\t\t\t\n\t}", "comment": "/**\n     * The main loop of the web server\n     *   Opens a server socket at the specified server port\n\t *   Remains in listening mode until shutdown signal\n\t * \n     */"}}
{"code": {"body": "\tpublic void shutdown() {\n\t\tshutdown = true;\n\t\t\n\t\ttry {\n\t\t\t\n\t\t\texecutor.shutdown();\n\t\t\t\n\t\t\tif (!executor.awaitTermination(5, TimeUnit.SECONDS)) \n\t\t\t{\n\t\t\t\texecutor.shutdownNow(); \n\t\t\t}\n\t\t} \n\t\tcatch (InterruptedException e) \n\t\t{\n\t\t\t\n\t\t\texecutor.shutdownNow();\n\t\t}\n\t\t\n\t\ttry { serverSocket.close(); }\n\t\tcatch (IOException e) { System.out.println(\"\" + e); }\n\t}", "comment": "/**\n     * Signals the server to shutdown.\n\t *\n     */"}}
{"code": {"body": "\tpublic static void main(String[] args) {\n\t\tint serverPort = 2228;\n\n\t\t\n\t\tif (args.length == 1) {\n\t\t\tserverPort = Integer.parseInt(args[0]);\n\t\t}\n\t\t\n\t\tif (args.length >= 2) {\n\t\t\tSystem.out.println(\"\");\n\t\t\tSystem.out.println(\"\");\n\t\t\tSystem.exit(0);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tWebServer server = new WebServer(serverPort);\n\t\t\n\t\tserver.start();\n\t\tSystem.out.println(\"\");\n\t\tSystem.out.println(\"\");\n\n\t\tScanner keyboard = new Scanner(System.in);\n\t\twhile ( !keyboard.next().equals(\"\") );\n\t\tThread t1 = server;\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"\");\n\t\tserver.shutdown();\n\t\tSystem.out.println(\"\");\n\t}", "comment": "/**\n\t * A simple driver.\n\t */"}}
{"code": {"body": "public Filter() {\n        \n        Properties props;\n        props = new Properties();\n        props.put(\"\", \"\");\n\n        this.pipeline = new StanfordCoreNLP(props);\n    }", "comment": "/*\n\t * Filter features by lemmatizing, then removing irrelevant features from the list,\n\t * and keeping only lexemes that may have an impact on semantic meaning\n\t * \n\t * Remove stop words, and words with 2 or less letters\n\t */"}}
{"code": {"body": "\tpublic String[] filterFeatures(String text) {\n\t\tArrayList<String> filtered = new ArrayList<>();\n\t\t\n\t\t\n\t\tAnnotation document = new Annotation(text.replaceAll(\"\", \"\"));\n\t\t\n\t\tpipeline.annotate(document);\t\t\n\t\t\n\t\tfor (CoreLabel token : document.get(TokensAnnotation.class)) {\n\t\t\tif(!stopWords.contains(token.word()) && token.word().length() > STOP_WORD_SIZE_LIMIT && token.get(PartOfSpeechAnnotation.class) == \"\" || token.get(PartOfSpeechAnnotation.class) == \"\" || token.get(PartOfSpeechAnnotation.class) == \"\") {\n\t\t\t\tfiltered.add(token.get(LemmaAnnotation.class).toLowerCase());\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn filtered.toArray(new String[filtered.size()]);\n\t}", "comment": "/*\n\t * Filter features by lemmatizing, then removing irrelevant features from the list,\n\t * and keeping only lexemes that may have an impact on semantic meaning\n\t * \n\t * Remove stop words, and words with 2 or less letters\n\t */"}}
{"code": {"body": "\tpublic void setStopWords(String filename) {\n\t\tFile file = new File(filename);\n\t\t\n\t\tString text = \"\";\n\t\ttry {\n\t\t\ttext = new String(Files.readAllBytes(Paths.get(file.getAbsolutePath())));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tAnnotation document = new Annotation(text.replaceAll(\"\", \"\"));\n\t\tpipeline.annotate(document);\t\t\n\t\t\n\t\tHashMap<String, Integer> counts = new HashMap<>();\n\t\tfor (CoreLabel token : document.get(TokensAnnotation.class)) {\n\t\t\tString s = token.word().toLowerCase();\n\t\t\tif(counts.containsKey(s)) {\n\t\t\t\tcounts.put(s, counts.get(s)+1);\n\t\t\t} else if(!s.isEmpty()){\n\t\t\t\tcounts.put(s, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\n\n\n\n\n\t\t\n\t\tfor(String s: counts.keySet()) {\n\t\t\tif(counts.get(s) >= STOP_THRESHOLD) {\n\t\t\t\tstopWords.add(s);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(stopWords);\n\t}", "comment": "/*\n\t * Returns a set of stop words based on a frequency threshold\n\t */"}}
{"code": {"body": "    public static void main(String[] args) {\n        \n    }", "comment": "/**\n     * @param args the command line arguments\n     */"}}
{"code": {"body": "\tprivate static String checkCity(String currentCity)\n\t{\n\t\tString newCityValue = \"\";\n\t\tif(currentCity.equalsIgnoreCase(\"\"))\n\t\t\tnewCityValue = \"\";\n\t\treturn newCityValue;\n\t}", "comment": "/****\n\t * This function checks the value of city name\n\t * checks whether it's Cork and then changes it to Dublin\n\t * and visa versa\n\t * @param currentCity - value of current city\n\t * @return new city value\n\t */"}}
{"code": {"body": "    public void close() {\n        \n        next = null;\n    }", "comment": "/** If subclasses override this, they should call super.close(). */"}}
{"code": {"body": "    protected abstract Tuple readNext() throws DbException, TransactionAbortedException;\n\n ", "comment": "/** Reads the next tuple from the underlying source.\n    @return the next Tuple in the iterator, null if the iteration is finished. */"}}
{"code": {"body": "    public static boolean mayUseCodeInAssignment(boolean writtenByYourself,\n            boolean availableToOthers, boolean writtenAsCourseWork,\n            boolean citingYourSource, boolean implementationRequired) {\n        \n    \t\n    \treturn (writtenByYourself && !availableToOthers && writtenAsCourseWork && citingYourSource && implementationRequired);\n\n    \t\n    \t\n       \n\n    }", "comment": "/**\n     * Judge whether a given piece of code may be used in an assignment (problem\n     * set or team project) or not, according to the 6.005 collaboration policy.\n     * \n     * @param writtenByYourself true if the code in question was written by\n     *        yourself or, in the case of a team project, your teammates,\n     *        otherwise false.\n     * @param availableToOthers if not writtenByYourself, whether or not the\n     *        code in question is available to all other students in the class.\n     *        Otherwise ignored.\n     * @param writtenAsCourseWork if not writtenByYourself, whether or not the\n     *        code in question was written specifically as part of a solution to\n     *        a 6.005 assignment, in the current or past semesters. Otherwise\n     *        ignored.\n     * @param citingYourSource if not writtenByYourself, whether or not you\n     *        properly cite your source. Otherwise ignored.\n     * @param implementationRequired whether the assignment specifically asks\n     *        you to implement the feature in question.\n     * @return Whether or not, based on the information provided in the\n     *         arguments, you are likely to be allowed to use the code in\n     *         question in your assignment, according to the 6.005 collaboration\n     *         policy for the current semester.\n     */"}}
{"code": {"body": "    public static void main(String[] args) {\n        System.out.println(\"\" +\n            RulesOf6005.mayUseCodeInAssignment(true, false, true, true, true));\n    }", "comment": "/**\n     * Main method of the class.\n     * \n     * Runs the mayUseCodeInAssignment method.\n     */"}}
{"code": {"body": "    public static boolean mayUseCodeInAssignment(boolean writtenByYourself,\n                                                 boolean availableToOthers, boolean writtenAsCourseWork,\n                                                 boolean citingYourSource, boolean implementationRequired) {\n        \n        \n        \n        boolean _writtenByYourself      = writtenByYourself;\n        boolean _availableToOthers      = availableToOthers;\n        boolean _writtenAsCourseWork    = writtenAsCourseWork;\n        boolean _citingYourSource       = citingYourSource;\n        boolean _implementationRequired = implementationRequired;\n        \n        return _writtenByYourself && !_availableToOthers && _writtenAsCourseWork && _citingYourSource && _implementationRequired;\n        \n        \n        \n    }", "comment": "/**\n     * Judge whether a given piece of code may be used in an assignment (problem\n     * set or team project) or not, according to the 6.005 collaboration policy.\n     * \n     * @param writtenByYourself true if the code in question was written by\n     *        yourself or, in the case of a team project, your team mates,\n     *        otherwise false.\n     * @param availableToOthers if not writtenByYourself, whether or not the\n     *        code in question is available to all other students in the class.\n     *        Otherwise ignored.\n     * @param writtenAsCourseWork if not writtenByYourself, whether or not the\n     *        code in question was written specifically as part of a solution to\n     *        a 6.005 assignment, in the current or past semesters. Otherwise\n     *        ignored.\n     * @param citingYourSource if not writtenByYourself, whether or not you\n     *        properly cite your source. Otherwise ignored.\n     * @param implementationRequired whether the assignment specifically asks\n     *        you to implement the feature in question.\n     * @return Whether or not, based on the information provided in the\n     *         arguments, you are likely to be allowed to use the code in\n     *         question in your assignment, according to the 6.005 collaboration\n     *         policy for the current semester.\n     */"}}
{"code": {"body": "    public static void main(String[] args){\n        System.out.println(\"\" +\n            RulesOf6005.mayUseCodeInAssignment(true, false, true, true, true));\n    }", "comment": "/**\n     * Main method of the class.\n     *\n     * Runs the mayUseCodeInAssignment method.\n     * @param args\n     */"}}
{"code": {"body": "    public static Timespan getTimespan(final List<Tweet> tweets) {\n        \n        \n        \n                                                        \n                                                        \n                                                        \n        long interval = 0, minInterval = 0;\n        Timespan span = null;\n        \n        if(tweets.isEmpty()){\n            return new Timespan( new Date(1000000), new Date(1000000)); \n        }else{\n            for(int i = 0; i < tweets.size(); i++){\n                if((i + 1) < tweets.size()){\n                    interval = Math.abs(tweets.get(i).getTimestamp().getTime() - tweets.get(i + 1).getTimestamp().getTime());\n                    if(i == 0){\n                        minInterval = interval;  \n                        span = new Timespan(tweets.get(i).getTimestamp(), tweets.get(i + 1).getTimestamp());    \n                    }\n                    if(interval < minInterval){                   \n                        minInterval = interval;\n                        span = new Timespan(tweets.get(i).getTimestamp(), tweets.get(i + 1).getTimestamp());\n                    }\n                    \n                }\n                \n            }\n        }\n        return span;\n    }", "comment": "/**\n     * Get the time period spanned by tweets.\n     * \n     * @param tweets\n     *            list of tweets, not modified by this method.\n     * @return a minimum-length time interval that contains the timestamp of\n     *         every tweet in the list.\n     */"}}
{"code": {"body": "    public static Set<String> getMentionedUsers(final List<Tweet> tweets) {\n        \n        \n        Set<String> setOfUsers = new HashSet<String>();\n        String token;\n        for(int i = 0; i < tweets.size(); i++){\n            StringTokenizer st = new StringTokenizer(tweets.get(i).getText());\n            while (st.hasMoreTokens()) {\n                token = st.nextToken();\n                \n                if (token.endsWith(\"\")) token = new String(token.substring(0, token.length()- 1));\n                if(token.matches(\"\")) setOfUsers.add(token.toLowerCase());\n            }         \n        }\n        \n        return setOfUsers;\n    }", "comment": "/**\n     * Get usernames mentioned in a tweet.\n     * \n     * @param tweets\n     *            list of tweets, not modified by this method.\n     * @return the set of usernames who are mentioned in the text of the tweet.\n     *         A username-mention is \"@\" followed by a username. A username\n     *         consists of letters (A-Z or a-z), digits, and underscores (\"_\").\n     *         Twitter usernames are case-insensitive, so \"rbmllr\" and \"RbMllr\"\n     *         are equivalent.  A username may occur at most once in the returned \n     *         set.\n     * \n     *         The @ cannot be immediately preceded by an alphanumeric or\n     *         underscore character (A-Z, a-z, 0-9, _). For example, an email\n     *         address like bitdiddle@mit.edu does not contain a mention of mit.\n     *         \n     *         MyNotes: in Tweeter username starts as @usrname\n     *         In username @ cannot be immediately preceded by an alphanumeric or\n     *         underscore character (A-Z, a-z, 0-9, _). For example, an email\n     *         address like bitdiddle@mit.edu does not contain a mention of mit.\n     */"}}
{"code": {"body": "\tpublic void useJNDI() {\n\t\tSystem.out.println(\"\");\n\t\t\n\t\tThread thread = Thread.currentThread();\n\n\t\t\n\t\tClassLoader origLoader = thread.getContextClassLoader();\n\t\tthread.setContextClassLoader(PortalClassLoaderUtil.getClassLoader());\n\n\t\ttry {\n\t\t\t\n\t\t\tDataSource datasource = countryPersistence.getDataSource();\n\n\t\t\tConnection connection = datasource.getConnection();\n\t\t\tStatement statement = connection.createStatement();\n\t\t\tResultSet resultSet = statement.executeQuery(\"\");\n\n\t\t\twhile (resultSet.next()) {\n\t\t\t\tSystem.out.println(\"\");\n\t\t\t\tString id = resultSet.getString(\"\");\n\t\t\t\tSystem.out.println(\"\" + id);\n\t\t\t\tString name = resultSet.getString(\"\");\n\t\t\t\tSystem.out.println(\"\" + name);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t\t\tconnection.close();\n\t\t}\n\t\tcatch (SQLException sqle) {\n\t\t\tsqle.printStackTrace();\n\t\t}\n\t\tfinally {\n\t\t\t\n\t\t\tthread.setContextClassLoader(origLoader);\n\t\t}\n\t}", "comment": "/*\n\t * NOTE FOR DEVELOPERS:\n\t *\n\t * Never reference this class directly. Always use {@link org.javasavvy.demo.service.CountryLocalServiceUtil} to access the country local service.\n\t */"}}
{"code": {"body": "\tpublic void afterPropertiesSet() {\n\t}", "comment": "/**\n\t * Initializes the country persistence.\n\t */"}}
{"code": {"body": "\tpublic UserLoginLocalService getService() {\n\t\tServiceTracker<UserLoginLocalService, UserLoginLocalService> userLoginLocalServiceTracker = _registry\n\t\t\t\t.trackServices(UserLoginLocalService.class);\n\t\t\n\t\tuserLoginLocalServiceTracker.open();\n\n\t\tUserLoginLocalService userLoginLocalService = userLoginLocalServiceTracker.getService();\n\t\t\n\t\tuserLoginLocalServiceTracker.close();\n\t\t\n\t\treturn userLoginLocalService;\n\t}", "comment": "/**\n\t * getService: Returns the user tracker service instance.\n\t * \n\t * @return UserLoginLocalService The instance to use.\n\t */"}}
{"code": {"body": "\tpublic UserLoginLocalService getUserLoginLocalService() {\n\t\treturn userLoginLocalService;\n\t}", "comment": "/**\n\t * Returns the user login local service.\n\t *\n\t * @return the user login local service\n\t */"}}
{"code": {"body": "\tpublic void setUserLoginLocalService(\n\t\tUserLoginLocalService userLoginLocalService) {\n\t\tthis.userLoginLocalService = userLoginLocalService;\n\t}", "comment": "/**\n\t * Sets the user login local service.\n\t *\n\t * @param userLoginLocalService the user login local service\n\t */"}}
{"code": {"body": "\tpublic UserLoginPersistence getUserLoginPersistence() {\n\t\treturn userLoginPersistence;\n\t}", "comment": "/**\n\t * Returns the user login persistence.\n\t *\n\t * @return the user login persistence\n\t */"}}
{"code": {"body": "\tpublic void setUserLoginPersistence(\n\t\tUserLoginPersistence userLoginPersistence) {\n\t\tthis.userLoginPersistence = userLoginPersistence;\n\t}", "comment": "/**\n\t * Sets the user login persistence.\n\t *\n\t * @param userLoginPersistence the user login persistence\n\t */"}}
{"code": {"body": "\tpublic com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {\n\t\treturn counterLocalService;\n\t}", "comment": "/**\n\t * Returns the counter local service.\n\t *\n\t * @return the counter local service\n\t */"}}
{"code": {"body": "\tpublic void setCounterLocalService(\n\t\tcom.liferay.counter.kernel.service.CounterLocalService counterLocalService) {\n\t\tthis.counterLocalService = counterLocalService;\n\t}", "comment": "/**\n\t * Sets the counter local service.\n\t *\n\t * @param counterLocalService the counter local service\n\t */"}}
{"code": {"body": "\tpublic com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {\n\t\treturn classNameLocalService;\n\t}", "comment": "/**\n\t * Returns the class name local service.\n\t *\n\t * @return the class name local service\n\t */"}}
{"code": {"body": "\tpublic void setClassNameLocalService(\n\t\tcom.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {\n\t\tthis.classNameLocalService = classNameLocalService;\n\t}", "comment": "/**\n\t * Sets the class name local service.\n\t *\n\t * @param classNameLocalService the class name local service\n\t */"}}
{"code": {"body": "\tpublic ClassNamePersistence getClassNamePersistence() {\n\t\treturn classNamePersistence;\n\t}", "comment": "/**\n\t * Returns the class name persistence.\n\t *\n\t * @return the class name persistence\n\t */"}}
{"code": {"body": "\tpublic void setClassNamePersistence(\n\t\tClassNamePersistence classNamePersistence) {\n\t\tthis.classNamePersistence = classNamePersistence;\n\t}", "comment": "/**\n\t * Sets the class name persistence.\n\t *\n\t * @param classNamePersistence the class name persistence\n\t */"}}
{"code": {"body": "\tpublic com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {\n\t\treturn resourceLocalService;\n\t}", "comment": "/**\n\t * Returns the resource local service.\n\t *\n\t * @return the resource local service\n\t */"}}
{"code": {"body": "\tpublic void setResourceLocalService(\n\t\tcom.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {\n\t\tthis.resourceLocalService = resourceLocalService;\n\t}", "comment": "/**\n\t * Sets the resource local service.\n\t *\n\t * @param resourceLocalService the resource local service\n\t */"}}
{"code": {"body": "\tpublic com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {\n\t\treturn userLocalService;\n\t}", "comment": "/**\n\t * Returns the user local service.\n\t *\n\t * @return the user local service\n\t */"}}
{"code": {"body": "\tpublic void setUserLocalService(\n\t\tcom.liferay.portal.kernel.service.UserLocalService userLocalService) {\n\t\tthis.userLocalService = userLocalService;\n\t}", "comment": "/**\n\t * Sets the user local service.\n\t *\n\t * @param userLocalService the user local service\n\t */"}}
{"code": {"body": "\tpublic UserPersistence getUserPersistence() {\n\t\treturn userPersistence;\n\t}", "comment": "/**\n\t * Returns the user persistence.\n\t *\n\t * @return the user persistence\n\t */"}}
{"code": {"body": "\tpublic void setUserPersistence(UserPersistence userPersistence) {\n\t\tthis.userPersistence = userPersistence;\n\t}", "comment": "/**\n\t * Sets the user persistence.\n\t *\n\t * @param userPersistence the user persistence\n\t */"}}
{"code": {"body": "\tprotected void runSQL(String sql) {\n\t\ttry {\n\t\t\tDataSource dataSource = userLoginPersistence.getDataSource();\n\n\t\t\tDB db = DBManagerUtil.getDB();\n\n\t\t\tsql = db.buildSQL(sql);\n\t\t\tsql = PortalUtil.transformSQL(sql);\n\n\t\t\tSqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,\n\t\t\t\t\tsql);\n\n\t\t\tsqlUpdate.update();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new SystemException(e);\n\t\t}\n\t}", "comment": "/**\n\t * Performs a SQL query.\n\t *\n\t * @param sql the sql query\n\t */"}}
{"code": {"body": "\tpublic void updateUserLogin(final long userId, final Date loginDate) {\n\t\tUserLogin login;\n\n\t\t\n\t\tlogin = fetchUserLogin(userId);\n\n\t\tif (login == null) {\n\t\t\t\n\t\t\tif (_logger.isDebugEnabled())\n\t\t\t\t_logger.debug(\"\" + userId + \"\");\n\n\t\t\t\n\t\t\tlogin = createUserLogin(userId);\n\n\t\t\t\n\t\t\tlogin.setLastLogin(loginDate);\n\n\t\t\t\n\t\t\tlogin.setTotalLogins(1);\n\t\t\tlogin.setShortestTimeBetweenLogins(Long.MAX_VALUE);\n\t\t\tlogin.setLongestTimeBetweenLogins(0);\n\n\t\t\t\n\t\t\taddUserLogin(login);\n\t\t}\n\t\telse {\n\t\t\t\n\n\t\t\t\n\t\t\tlogin.setTotalLogins(login.getTotalLogins() + 1);\n\n\t\t\t\n\t\t\tlong duration = loginDate.getTime() - login.getLastLogin().getTime();\n\n\t\t\t\n\t\t\t\n\t\t\tif (duration > login.getLongestTimeBetweenLogins()) {\n\t\t\t\tlogin.setLongestTimeBetweenLogins(duration);\n\t\t\t}\n\n\t\t\t\n\t\t\t\n\t\t\tif (duration < login.getShortestTimeBetweenLogins()) {\n\t\t\t\tlogin.setShortestTimeBetweenLogins(duration);\n\t\t\t}\n\n\t\t\t\n\t\t\tlogin.setLastLogin(loginDate);\n\n\t\t\t\n\t\t\tupdateUserLogin(login);\n\t\t}\n\t}", "comment": "/**\n\t * updateUserLogin: Updates the user login record with the given info.\n\t * \n\t * @param userId\n\t *            User who logged in.\n\t * @param loginDate\n\t *            Date when the user logged in.\n\t */"}}
{"code": {"body": "  public static void main(String[] args) {\n    TokenizerFactory<Word> factory = PTBTokenizerFactory.newTokenizerFactory();\n    Tokenizer<Word> tokenizer = factory.getTokenizer(new StringReader(args[0]));\n    System.out.println(tokenizer.tokenize());\n  }", "comment": "/**\n   * Tokenize a sentence in the argument, and print out the tokens to the console.\n   * \n   * @param args\n   *          Set the first argument as the sentence to\n   *          be tokenized.\n   * \n   */"}}
{"code": {"body": "\tstatic void validateDirection(Point blank, int newXPOS, int newYPOS, Nod peekNod) {\n\t\tint fNew, gNew, hNew;\n\t\tif (validMove(newXPOS, newYPOS)) {\n\t\t\t\n\t\t\tboolean testerForClosed = false;\n\t\t\tNod newNod = new Nod(peekNod.getBlackBoardCopy());\n\t\t\tnewNod.changeCharcter(blank.getI(), blank.getJ(), newXPOS, newYPOS);\n\n\t\t\tif (same(newNod.getBlackBoard(), destinationNode.getBlackBoard())) {\n\t\t\t\tnewNod.setParent(peekNod);\n\t\t\t\trecursivePrint(newNod, startingNode);\n\t\t\t\tfound = true;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\thNew = heuristic(newNod.getBlackBoard(), destinationNode.getBlackBoard());\n\t\t\t\tgNew = peekNod.getG() + 1;\n\t\t\t\tfNew = hNew + gNew;\n\t\t\t\tif (!closedList.isEmpty()) {\n\t\t\t\t\tif (closedList.containsKey(newNod) && (closedList.get(newNod) < fNew))\n\t\t\t\t\t\ttesterForClosed = true;\n\n\t\t\t\t}\n\t\t\t\tif (testerForClosed == false) {\n\t\t\t\t\tboolean testedForOpened = false;\n\t\t\t\t\t\n\t\t\t\t\tif (!openList.isEmpty()) {\n\t\t\t\t\t\tfor (Nod nod : openList) {\n\t\t\t\t\t\t\tif (same(nod.getBlackBoard(), newNod.getBlackBoard()) && (nod.getF() < fNew))\n\t\t\t\t\t\t\t\ttestedForOpened = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (testedForOpened == false) {\n\t\t\t\t\t\tnewNod.setF(fNew);\n\t\t\t\t\t\tnewNod.setG(gNew);\n\t\t\t\t\t\tnewNod.setHeuristic(hNew);\n\t\t\t\t\t\tnewNod.setParent(peekNod);\n\t\t\t\t\t\topenList.add(newNod);\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t}", "comment": "/**\n\t * \n\t * @param blank: blank position\n\t * @param newXPOS\n\t * @param newYPOS\n\t * @param peekNod\n\t */"}}
{"code": {"body": "public AppTest( String testName )", "comment": "/**\n     * Create the test case\n     *\n     * @param testName name of the test case\n     */"}}
{"code": {"body": "    public static Test suite()\n    {\n        return new TestSuite( AppTest.class );\n    }", "comment": "/**\n     * @return the suite of tests being tested\n     */"}}
{"code": {"body": "    public void testApp()\n    {\n        assertTrue( true );\n    }", "comment": "/**\n     * Rigourous Test :-)\n     */"}}
{"code": {"body": "    private static void handleArgs(String[] args){\n    \tint i = 0;\n    \twhile (i < args.length){\n    \t\tswitch(args[i]){\n    \t\tcase \"\":\n    \t\t\tgiveDebugOutput = true;\n    \t\t\tbreak;\n    \t\tcase \"\":\n    \t\t\tif(i + 1 >= args.length){\n    \t\t\t\tbreak;\n    \t\t\t}\n    \t\t\tmaxHeapSizeForPolling = Integer.parseInt(args[++i]);\n    \t\t\tbreak;\n    \t\t\tcase \"\":\n        \t\t\tif(i + 1 >= args.length){\n        \t\t\t\tbreak;\n        \t\t\t}\n        \t\t\tmaxHeapSizeForUpdate = Integer.parseInt(args[++i]);\n        \t\t\tbreak;\n        \t\tcase \"\":\n        \t\t\tif(i + 1 >= args.length){\n        \t\t\t\tbreak;\n        \t\t\t}\n        \t\t\tprioritiesToUpdate = Integer.parseInt(args[++i]);\n        \t\t\tbreak;\n    \t\t\t}\n    \t\t\ti++;\n    \t\t}\n    \t}", "comment": "/** Handle program arguments */"}}
{"code": {"body": "    public static void main(String[] args) {\n        handleArgs(args);\n        System.out.println(\"\" + (testAdding() ? \"\" : \"\"));\n        System.out.println(\"\" + (testPollingOrder() ? \"\" : \"\"));\n        System.out.println(\"\" + (testUpdatePriority() ? \"\" : \"\"));\n    }", "comment": "/** Test the user-defined heap. args[0] should be the name of the implementing class.\n     * Additional arguments:\n     *      -d Print additional debugging information\n     *      -p [n] Set the max heap size for polling to n\n     *      -s [n] Set the max heap size for update to n\n     *      -u [n] Set the number of priorities to update to n\n     * Print results of tests on console.\n     */"}}
{"code": {"body": "    private static MinHeap<Thingy> createUserManager() {\n            return new MyHeap<Thingy>();\n    }", "comment": "/** Create and return an instance of MyHeap<Thingy> */"}}
{"code": {"body": "        public @Override int compareTo(Thingy ob) {\n            return dist - ob.dist;\n        }", "comment": "/** Return neg number, 0, pos number depending on whether this is smaller\n         * equal to, or greater than ob. */"}}
{"code": {"body": "        public @Override boolean equals(Object ob) {\n            if (!(ob instanceof Thingy)) {\n                return false;\n            }\n            return dist == ((Thingy)ob).dist;\n        }", "comment": "/** Return true iff ob is a Thingy with the same value in its dist field. */"}}
{"code": {"body": "        public @Override int hashCode() {\n            return Integer.MAX_VALUE - dist;\n        }", "comment": "/** The hashcode is MAX_VALUE - dist. */"}}
{"code": {"body": "        public String toString() {\n            return \"\" + dist;\n        }", "comment": "/** = a representation of this Thingy - just the dist.*/"}}
{"code": {"body": "        public String toString1() {\n            return \"\" + dist + \"\" + priority;\n        }", "comment": "/** = a representation of this Thingy - dist and priority.*/"}}
{"code": {"body": "    public static boolean testAdding()  {\n        System.out.println(\"\");\n        MinHeap<Thingy> heap= createUserManager();\n\n        if (!heap.isEmpty()) {\n            System.out.println(\"\");\n            return false;\n        }\n\n        Thingy[] t = {new Thingy(1), new Thingy(2), new Thingy(3), new Thingy(4),\n                new Thingy(5), new Thingy(6), new Thingy(7)};\n        for (int i = 0; i < t.length; i++) {\n            heap.add(t[i], t[i].dist);\n            if (heap.isEmpty()) {\n                System.out.println(\"\");\n                return false;\n            }\n            if (heap.size() != i+1) {\n                System.out.println(\"\" + heap.size() +  \"\" + \n                        (i+1));\n                return false;\n            }\n        }\n\n        if (!heap.toString().equals(\"\")) {\n            System.out.println(\"\" + \n                    \"\" +\n                    heap.toString());\n        }\n\n        \n        t = new Thingy[]{new Thingy(2), new Thingy(3), new Thingy(7), new Thingy(1),\n                new Thingy(4), new Thingy(5), new Thingy(6)};\n\n        heap = createUserManager();\n        for (int i = 0; i < t.length; i= i+1) {\n            heap.add(t[i], t[i].dist);\n        }\n        if (giveDebugOutput) {\n            System.out.println(\"\" + \"\");\n            System.out.println(\"\" + heap.toString());\n         }\n        return true;\n    }", "comment": "/** Test that adding distinct values get added.\n     * Also test functions isEmpty() and size(). */"}}
{"code": {"body": "    public static boolean testPollingOrder() {\n        MinHeap<Thingy> heap= createUserManager();\n        ArrayList<Thingy> arrayList= new ArrayList<Thingy>();\n\n        \n        for (int i= 0; i < maxHeapSizeForPolling; i++) {\n            int dist= (int)(Math.random() * 10000);\n            try {\n                Thingy t= new Thingy(dist);\n                heap.add(t, dist);\n                arrayList.add(t);\n            } catch (IllegalArgumentException e) {\n                \n                \n            }\n        }\n        System.out.println(\"\" + heap.size() +\n                \"\");\n        \n        Thingy[] array= new Thingy[arrayList.size()];\n        array= arrayList.toArray(array);\n        Arrays.sort(array);\n\n        \n        \n        for (Thingy t : array) {\n            Thingy next= heap.poll();\n            if (!t.equals(next)) {\n                System.out.println(\"\");\n                return false;\n            }\n        }\n        return true;\n    }", "comment": "/** Return true iff values removed from a heap are in increasing order. */"}}
{"code": {"body": "    public static boolean testUpdatePriority() {\n        final Comparator<Thingy> comp= new Comparator<Thingy>() {\n            \n            public @Override int compare(Thingy t1, Thingy t2) {\n                return (int)(t1.priority - t2.priority);\n            }\n        };\n\n        ArrayList<Thingy> arrayList= new ArrayList<Thingy>();\n        MinHeap<Thingy> heap= createUserManager(); \n\n        \n        for (int i= 0; i < maxHeapSizeForUpdate; i++) {\n            int dist= (int)(Math.random() * 1000);\n            try {Thingy t= new Thingy(dist);\n            heap.add(t, dist);\n            arrayList.add(t);\n            } catch (IllegalArgumentException e){\n                \n                \n            }\n        }\n\n        \n        \n        \n        \n        \n        \n        \n        for (int i = 0; i < prioritiesToUpdate; i++) {\n            int index= (int)Math.max(0, (Math.random())*arrayList.size()-1);\n            Thingy t= arrayList.get(index);\n            if (t.priority >= 0) {\n                heap.updatePriority(t, -t.priority);\n                t.priority= -t.priority;\n            } else {\n                heap.updatePriority(t, t.priority+60);\n                t.priority= t.priority+60;\n            }\n            t= arrayList.get(index+1);\n            heap.updatePriority(t, t.priority - 20);\n            t.priority= t.priority - 20;\n        }\n        Collections.sort(arrayList, comp);\n        if (giveDebugOutput) {\n            System.out.println(\"\" + heap);\n            String res= \"\";\n            for (Thingy t : arrayList) {\n                if (res.length() > 1) res= res + \"\";\n                res= res + t.toString1();\n            }\n            System.out.println(\"\" + res + \"\");\n        }\n\n        \n        for (Thingy t : arrayList) {\n            Thingy t2 = heap.poll();\n            if (t != t2) return false;\n        }\n\n        return true;\n    }", "comment": "/** Return true iff updating priorities functions correctly. */"}}
{"code": {"body": "            public @Override int compare(Thingy t1, Thingy t2) {\n                return (int)(t1.priority - t2.priority);\n            }", "comment": "/** Return neg, 0, or pos depending on whether t1's priority <, = \n             * or > t2's priority. */"}}
{"code": {"body": "public AaGui() {\n\t\tfile1 = null;\n\t\tfile2 = null;\n\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\tsetBounds(0, 20, 950, 780);\n\t\tcontentPane = new JPanel();\n\t\tcontentPane.setBorder(new EmptyBorder(5, 5, 5, 5));\n\t\tsetContentPane(contentPane);\n\n\t\topenFileButton = new JButton(\"\");\n\t\topenFileButton.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\n\t\t\t\tresetForNewSearch();\n\n\t\t\t\t\n\t\t\t\tfile1 = openFile();\n\t\t\t\tstartSearchButton.setEnabled(true);\n\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tinput = new Input(file1);\n\t\t\t\t} catch (Exception exc){\n\t\t\t\t\t\n\t\t\t\t\tappendErrorConsole(\"\" + exc.getMessage());\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\tif (!input.useChunking()){\n\t\t\t\t\tinput.setChunkSize(DEFAULT_NUM_PREMISES);\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\tsetSearchControls();\n\n\t\t\t\tprintInputSummary();\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t});\n\n\t\tJScrollPane scrollPane = new JScrollPane();\n\n\t\tlinkProverButton = new JButton(\"\");\n\t\tlinkProverButton.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tlinkProver();\n\t\t\t}\n\t\t});\n\n\t\tJScrollPane scrollPane_1 = new JScrollPane();\n\n\t\tSpinnerModel sm = new SpinnerNumberModel(100, 0, 500, 1);\n\n\t\tstartSearchButton = new JButton(\"\");\n\t\tstartSearchButton.setEnabled(false);\n\n\t\taxiomOutputArea = new JTextPane();\n\t\tscrollPane_1.setViewportView(axiomOutputArea);\n\n\t\ttextConsoleArea = new JTextPane();\n\t\tscrollPane.setViewportView(textConsoleArea);\n\n\t\tinitTextConsoleDocument();\n\t\tinitAxiomOutputDocument();\n\n\n\n\t\t\n\t\tstartSearchButton.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\n\t\t\t\t\n\t\t\t\tUIManager.put(\"\", \"\");\n\t\t\t\tprogressMonitor = new ProgressMonitor(textConsoleArea,\n\t\t\t\t\t\t\"\", \"\", -2, 100);\n\t\t\t\tprogressMonitor.setProgress(-3);\n\t\t\t\tprogressMonitor.setMillisToDecideToPopup(100);\n\t\t\t\tstartSearchButton.setEnabled(false);\n\n\t\t\t\t\n\t\t\t\tGUIoutputWritten = false;\n\n\t\t\t\t\n\t\t\t\tdoneProverCalls = false;  \t\n\n\t\t\t\t\n\t\t\t\tcancelNotified = false; \t\n\n\t\t\t\tstartTime = System.currentTimeMillis();\n\t\t\t\t\n\t\t\t\tif (!isRepeatSearch){\n\n\t\t\t\t\t\n\t\t\t\t\tif (input.hasTypes()){\n\t\t\t\t\t\tappendConsole(\"\");\n\t\t\t\t\t\ttypedFormGen = new TypedFormulaGenerator(input);\n\t\t\t\t\t\ttypedFormGen.addPropertyChangeListener(propertyChangeListener);\n\t\t\t\t\t\ttypedFormGen.execute();\n\n\n\t\t\t\t\t} else { \n\n\t\t\t\t\t\t\n\t\t\t\t\t\tformGen = new FormulaGenerator(input);\n\t\t\t\t\t\tformGen.addPropertyChangeListener(propertyChangeListener);\n\t\t\t\t\t\tformGen.execute();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\t\n\t\t\t\t\tappendConsole(\"\" + input.filename() + \"\");\n\n\t\t\t\t\tproverCalls = new ParallelProver(input, firstMinSet, proverPath);\t\t\t\t\n\t\t\t\t\tproverCalls.addPropertyChangeListener(propertyChangeListener);\n\t\t\t\t\tproverTime = System.currentTimeMillis();\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tproverCalls.execute();\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tpanel = new JPanel();\n\t\tpanel.setToolTipText(\"\");\n\t\tpanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));\n\t\tspinnerChunkSize = new JSpinner(sm);\n\t\tspinnerChunkSize.setEnabled(false);\n\t\tspinnerChunkSize.addChangeListener(new ChangeListener() {\n\t\t\tpublic void stateChanged(ChangeEvent e) {\n\t\t\t\tint value = (int) spinnerChunkSize.getValue();\n\t\t\t\tif (input != null){\t\t\t\t\n\t\t\t\t\tinput.setChunkSize(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tpanel_2 = new JPanel();\n\t\tpanel_2.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));\n\n\t\tGroupLayout gl_contentPane = new GroupLayout(contentPane);\n\t\tgl_contentPane.setHorizontalGroup(\n\t\t\t\tgl_contentPane.createParallelGroup(Alignment.LEADING)\n\t\t\t\t.addComponent(scrollPane, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 940, Short.MAX_VALUE)\n\t\t\t\t.addComponent(scrollPane_1, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 940, Short.MAX_VALUE)\n\t\t\t\t.addGroup(gl_contentPane.createSequentialGroup()\n\t\t\t\t\t\t.addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING)\n\t\t\t\t\t\t\t\t.addGroup(gl_contentPane.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t.addComponent(openFileButton, GroupLayout.PREFERRED_SIZE, 115, GroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t.addPreferredGap(ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t.addComponent(startSearchButton, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t.addPreferredGap(ComponentPlacement.RELATED, 577, Short.MAX_VALUE)\n\t\t\t\t\t\t\t\t\t\t.addComponent(linkProverButton))\n\t\t\t\t\t\t\t\t\t\t.addGroup(gl_contentPane.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(panel_2, GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)\n\t\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(panel, GroupLayout.PREFERRED_SIZE, 504, GroupLayout.PREFERRED_SIZE)))\n\t\t\t\t\t\t\t\t\t\t\t\t.addContainerGap())\n\t\t\t\t);\n\t\tgl_contentPane.setVerticalGroup(\n\t\t\t\tgl_contentPane.createParallelGroup(Alignment.LEADING)\n\t\t\t\t.addGroup(gl_contentPane.createSequentialGroup()\n\t\t\t\t\t\t.addGap(6)\n\t\t\t\t\t\t.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)\n\t\t\t\t\t\t\t\t.addComponent(openFileButton)\n\t\t\t\t\t\t\t\t.addComponent(startSearchButton)\n\t\t\t\t\t\t\t\t.addComponent(linkProverButton))\n\t\t\t\t\t\t\t\t.addPreferredGap(ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)\n\t\t\t\t\t\t\t\t\t\t.addComponent(panel_2, GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)\n\t\t\t\t\t\t\t\t\t\t.addComponent(panel, 0, 0, Short.MAX_VALUE))\n\t\t\t\t\t\t\t\t\t\t.addPreferredGap(ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t.addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t.addPreferredGap(ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t.addComponent(scrollPane_1, GroupLayout.PREFERRED_SIZE, 464, GroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t.addContainerGap())\n\t\t\t\t);\n\n\t\tJLabel label = new JLabel(\"\");\n\t\tSpinnerModel varSpinModel = new SpinnerNumberModel(1, 1, 4, 1);\n\t\tvarLimitSpinner = new JSpinner(varSpinModel);\n\t\tvarLimitSpinner.addChangeListener(new ChangeListener() {\n\t\t\tpublic void stateChanged(ChangeEvent e) {\n\t\t\t\tif (input != null){\n\t\t\t\t\tinput.setVarLimit((int) varLimitSpinner.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tJLabel label_1 = new JLabel(\"\");\n\t\tsizeLimitSpinner = new JSpinner(new SpinnerNumberModel(0, 0, 10, 1));\n\t\tsizeLimitSpinner.addChangeListener(new ChangeListener() {\n\t\t\tpublic void stateChanged(ChangeEvent e) {\n\t\t\t\tif (input != null){\n\t\t\t\t\tinput.setSizeLimit((int) sizeLimitSpinner.getValue() ); \n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tlblFormulaGeneration = new JLabel(\"\");\n\t\tcommonAxiomsCheckBox = new JCheckBox(\"\");\n\t\tcommonAxiomsCheckBox.setSelected(true);\n\t\tcommonAxiomsCheckBox.addChangeListener(new ChangeListener() {\n\t\t\tpublic void stateChanged(ChangeEvent e) {\n\t\t\t\tif (input != null){\n\t\t\t\t\tinput.setSearchCommonAxioms(commonAxiomsCheckBox.isSelected());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tGroupLayout gl_panel_2 = new GroupLayout(panel_2);\n\t\tgl_panel_2.setHorizontalGroup(\n\t\t\t\tgl_panel_2.createParallelGroup(Alignment.LEADING)\n\t\t\t\t.addGroup(gl_panel_2.createSequentialGroup()\n\t\t\t\t\t\t.addGroup(gl_panel_2.createParallelGroup(Alignment.LEADING)\n\t\t\t\t\t\t\t\t.addGroup(gl_panel_2.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t.addContainerGap()\n\t\t\t\t\t\t\t\t\t\t.addComponent(lblFormulaGeneration)\n\t\t\t\t\t\t\t\t\t\t.addPreferredGap(ComponentPlacement.RELATED, 132, Short.MAX_VALUE))\n\t\t\t\t\t\t\t\t\t\t.addGroup(Alignment.TRAILING, gl_panel_2.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t.addContainerGap()\n\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(commonAxiomsCheckBox)\n\t\t\t\t\t\t\t\t\t\t\t\t.addGap(19)))\n\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(gl_panel_2.createParallelGroup(Alignment.TRAILING)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(gl_panel_2.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(label_1)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(sizeLimitSpinner, GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(gl_panel_2.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(label)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(varLimitSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(30))\n\t\t\t\t);\n\t\tgl_panel_2.setVerticalGroup(\n\t\t\t\tgl_panel_2.createParallelGroup(Alignment.LEADING)\n\t\t\t\t.addGroup(gl_panel_2.createSequentialGroup()\n\t\t\t\t\t\t.addComponent(lblFormulaGeneration)\n\t\t\t\t\t\t.addContainerGap(59, Short.MAX_VALUE))\n\t\t\t\t\t\t.addGroup(gl_panel_2.createSequentialGroup()\n\t\t\t\t\t\t\t\t.addContainerGap(13, Short.MAX_VALUE)\n\t\t\t\t\t\t\t\t.addGroup(gl_panel_2.createParallelGroup(Alignment.BASELINE)\n\t\t\t\t\t\t\t\t\t\t.addComponent(varLimitSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t.addComponent(label))\n\t\t\t\t\t\t\t\t\t\t.addPreferredGap(ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t.addGroup(gl_panel_2.createParallelGroup(Alignment.BASELINE)\n\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(sizeLimitSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(label_1)\n\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(commonAxiomsCheckBox)))\n\t\t\t\t);\n\t\tpanel_2.setLayout(gl_panel_2);\n\n\t\tJLabel lblProverTimeoutIn = new JLabel(\"\");\n\t\ttimeoutSpinner = new JSpinner(new SpinnerNumberModel(5, 1, 99, 1));\n\t\ttimeoutSpinner.addChangeListener(new ChangeListener() {\n\t\t\tpublic void stateChanged(ChangeEvent e) {\n\t\t\t\tif (input != null){\n\t\t\t\t\tinput.setTimeout((int) timeoutSpinner.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tlblTheoremProverCalls = new JLabel(\"\");\n\n\t\tJLabel lblMax = new JLabel(\"\");\n\t\tGroupLayout gl_panel = new GroupLayout(panel);\n\t\tgl_panel.setHorizontalGroup(\n\t\t\t\tgl_panel.createParallelGroup(Alignment.LEADING)\n\t\t\t\t.addGroup(gl_panel.createSequentialGroup()\n\t\t\t\t\t\t.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)\n\t\t\t\t\t\t\t\t.addGroup(gl_panel.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t.addGap(6)\n\t\t\t\t\t\t\t\t\t\t.addComponent(lblTheoremProverCalls))\n\t\t\t\t\t\t\t\t\t\t.addGroup(gl_panel.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t.addContainerGap()\n\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(lblMax, GroupLayout.PREFERRED_SIZE, 161, GroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(spinnerChunkSize, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t\t\t.addGap(28)\n\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(lblProverTimeoutIn)\n\t\t\t\t\t\t\t\t\t\t\t\t.addGap(12)\n\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(timeoutSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))\n\t\t\t\t\t\t\t\t\t\t\t\t.addGap(125))\n\t\t\t\t);\n\t\tgl_panel.setVerticalGroup(\n\t\t\t\tgl_panel.createParallelGroup(Alignment.TRAILING)\n\t\t\t\t.addGroup(gl_panel.createSequentialGroup()\n\t\t\t\t\t\t.addGap(3)\n\t\t\t\t\t\t.addComponent(lblTheoremProverCalls)\n\t\t\t\t\t\t.addGap(18)\n\t\t\t\t\t\t.addGroup(gl_panel.createParallelGroup(Alignment.BASELINE)\n\t\t\t\t\t\t\t\t.addComponent(lblMax, GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)\n\t\t\t\t\t\t\t\t.addComponent(spinnerChunkSize, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t.addComponent(lblProverTimeoutIn)\n\t\t\t\t\t\t\t\t.addComponent(timeoutSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))\n\t\t\t\t\t\t\t\t.addGap(10))\n\t\t\t\t);\n\t\tpanel.setLayout(gl_panel);\n\n\t\tcontentPane.setLayout(gl_contentPane);\n\n\t\tproverPath = getProverPathFromFile();\n\n\t\tif (proverPath == null){\n\t\t\t\n\t\t\tappendErrorConsole(\"\");\n\t\t}\n\t}", "comment": "/**\n\t * GUI constructor.\n\t * \n\t * Includes some ugly layout code autogenerated by the GUI tools.\n\t */"}}
{"code": {"body": "\tpublic static void main(String[] args) {\n\t\tEventQueue.invokeLater(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tAaGui frame = null;\n\t\t\t\ttry {\n\t\t\t\t\tframe = new AaGui();\n\t\t\t\t\tframe.setVisible(true);\n\t\t\t\t\tframe.setTitle(\"\");\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tframe.appendErrorConsole(e.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}", "comment": "/**\n\t * Main method, launch the application.\n\t */"}}
{"code": {"body": "\tpublic String getProverPathFromFile(){\n\n\t\tString path = \"\";\n\n\t\tFile f = new File(\"\");\n\t\tif(f.exists() && !f.isDirectory()) { \n\n\t\t\tpath = getProverPath();\n\t\t\tproverIsConnected = testProverConnection(path);\n\t\t\tif (proverIsConnected){\n\t\t\t\tlinkProverButton.setText(\"\");\n\t\t\t\tColor darkGreen = new Color(0,50,0);\n\t\t\t\tlinkProverButton.setForeground(darkGreen);\n\t\t\t\topenFileButton.setEnabled(true);\n\t\t\t\tlinkProverButton.setEnabled(false);\n\n\t\t\t} else {  \n\t\t\t\tappendErrorConsole(\"\");\n\t\t\t\tappendErrorConsole(\"\");\n\t\t\t\tappendErrorConsole(\"\" + path + \"\");\n\t\t\t\tlinkProverButton.setForeground(Color.RED);\n\t\t\t\topenFileButton.setEnabled(false);\n\n\t\t\t}\n\n\t\t} else { \n\t\t\tappendErrorConsole(\"\");\n\t\t\tlinkProverButton.setForeground(Color.RED);\n\t\t\topenFileButton.setEnabled(false);\n\n\t\t}\n\n\t\tif (!path.isEmpty()){\n\t\t\treturn path;\n\t\t}\n\t\treturn null;\n\t}", "comment": "/**\n\t * Returns the path to the prover application\n\t * if file exists and prover is reachable, top-right button reads \"Prover connected\" \n\t * in green. Else button reads \"Link prover\" in red.\n\t * @return String for the prover path\n\t */"}}
{"code": {"body": "\tpublic void linkProver(){\n\n\t\tString tempFilePath;\n\n\t\tJFileChooser openProverDialog = new JFileChooser();\n\t\tint returnVal = openProverDialog.showOpenDialog(textConsoleArea);\n\n\t\t\n\t\t\n\t\t\n\n\t\tif (returnVal == JFileChooser.APPROVE_OPTION) {\n\t\t\tFile proverFile = openProverDialog.getSelectedFile();\n\t\t\ttempFilePath = proverFile.getAbsolutePath();\n\n\t\t\t\n\t\t\tif (tempFilePath.endsWith(\"\")){\n\t\t\t\t\n\t\t\t\tproverPath = tempFilePath.substring(0, tempFilePath.length() - 7);\n\t\t\t} \n\n\t\t\tif (tempFilePath.endsWith(\"\")){\n\t\t\t\tif (tempFilePath.endsWith(\"\")){\n\t\t\t\t\t\n\t\t\t\t\tproverPath = tempFilePath.substring(0, tempFilePath.length() - 13);\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tproverPath = tempFilePath.substring(0, tempFilePath.length() - 4);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry{\n\t\t\t\t\n\t\t\t\tFileWriter f = new FileWriter(\"\"); \n\t\t\t\tf.write(proverPath);\n\t\t\t\tf.close();\n\n\t\t\t\t\n\t\t\t\tboolean proverConnected = testProverConnection(proverPath);\n\t\t\t\tif (proverConnected){\n\t\t\t\t\tColor darkGreen = new Color(0,50,0);\n\t\t\t\t\tlinkProverButton.setForeground(darkGreen);\n\t\t\t\t\tlinkProverButton.setText(\"\");\n\t\t\t\t\ttextConsoleArea.setText(\"\");\n\t\t\t\t\topenFileButton.setEnabled(true);\n\n\t\t\t\t} else {\n\t\t\t\t\ttextConsoleArea.setText(\"\");\n\t\t\t\t}\n\n\t\t\t} catch (IOException ioe){\n\t\t\t\tappendErrorConsole(\"\");\n\t\t\t}\n\t\t} else {\n\t\t\t\n\t\t}\n\n\t}", "comment": "/**\n\t * Get prover information from user\n\t */"}}
{"code": {"body": "\tpublic boolean testProverConnection(String path){\n\t\tboolean isConnected  = false;\n\t\tint exitValue;\n\t\tProcess proverProcess = null;\n\n\t\tRuntime r = Runtime.getRuntime();\n\t\tString callString = path + \"\";\n\t\ttry{\n\t\t\tproverProcess = r.exec(callString);\n\t\t} catch (Exception e){\n\t\t\tappendErrorConsole(\"\");\n\t\t\treturn false;\n\t\t}\n\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(proverProcess.getInputStream()));\n\n\t\ttry{\n\t\t\t\n\t\t\twhile ((!Thread.currentThread().isInterrupted() && ((in.readLine()) != null))) {;}\n\t\t\tproverProcess.waitFor();  \n\t\t} catch (Exception e){\n\t\t\tappendErrorConsole(\"\" + e.getMessage());\n\n\t\t}\n\n\t\texitValue  = proverProcess.exitValue();\n\n\t\t\n\t\tif (exitValue <= 102) {isConnected = true;}\n\n\t\treturn isConnected;\n\t}", "comment": "/**\n\t * Opens a connection to prover software, checks for appropriate response\n\t * @param path a String representing the path to the prover9/mace4 \"bin\" folder\n\t * @return true if prover is present and responding\n\t */"}}
{"code": {"body": "\tpublic String getProverPath(){\n\t\tBufferedReader buffReader = null;\n\t\tString path = \"\";\n\n\t\ttry{\n\n\t\t\tbuffReader = new BufferedReader(new FileReader(\"\"));\n\t\t\tif ((path = buffReader.readLine()) != null){\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tpath = \"\";\n\t\t\t}\n\t\t\tbuffReader.close();\n\t\t} catch (Exception e){\n\t\t\tappendErrorConsole(\"\");\n\t\t}\n\t\treturn path;\n\t}", "comment": "/**\n\t * reads absolute path for prover from file\n\t * @return a String representing the path\n\t */"}}
{"code": {"body": "\tpublic File openFile(){\n\t\t\n\t\tJFileChooser chosenFile = new JFileChooser(currentDirectory);\n\n\t\tint returnVal = chosenFile.showOpenDialog(textConsoleArea);\n\n\t\t\n\t\tif (returnVal == JFileChooser.APPROVE_OPTION) {\n\t\t\tcurrentDirectory = chosenFile.getSelectedFile();\n\t\t\treturn chosenFile.getSelectedFile();\n\t\t} \n\t\treturn null;\n\t}", "comment": "/**\n\t * Opens an \"open file\" dialog box and returns a reference to the file chosen\n\t * @return a Java File reference for the chosen file\n\t */"}}
{"code": {"body": "\tpublic void printInputSummary(){\n\t\ttextConsoleArea.setText(\"\");\t\t\t\t\t\t\t\t\n\t\tappendConsole(\"\"+ input.filename() + \"\");\n\t\tappendConsole(\"\" + input.relations().size());\n\t\tappendConsole(input.relations().size() > 1? \"\" + \"\" : \"\" + \"\");\n\n\t\tfor (Relation r : input.relations()){\n\t\t\tappendConsole(r.name() + \"\" + r.arity() + \"\" + r.numFacts() + \"\" + \"\");\n\t\t}\n\n\t\tappendConsole(\"\" + input.varLimit() + \"\");\n\t\tappendConsole(\"\" + input.sizeLimit() + \"\");\n\t\tappendConsole(\"\");\n\t}", "comment": "/**\n\t * Summarize contents of input file. Print to top console window. \n\t */"}}
{"code": {"body": "\tpublic void writeResultstoGUI(){\n\n\t\t\n\t\t\n\n\t\taxiomOutputArea.setText(\"\");\n\t\tappendAxiomArea(proverStats());\n\n\n\n\t\tif (GUIoutputWritten){\n\t\t\tSystem.err.println(\"\");\n\t\t\treturn;\n\t\t}\n\t\n\t\tGUIoutputWritten = true;\n\n\t\tif (isRepeatSearch){\n\t\t\tappendAxiomArea(\"\");\n\t\t}\n\n\t\tappendAxiomArea(\"\" + file1.getName() + \"\");\n\t\tappendAxiomArea(\"\" + firstMinSet.size() + \"\");\n\n\t\t\n\t\tappendAxiomArea(\"\" + minSetFromProver.size() + \"\");\n\n\t\tappendAxiomArea(\"\");\n\t\tappendAxiomArea(Interesting());\n\n\t\tappendAxiomArea(\"\");\n\t\tappendAxiomArea(Uninteresting());\n\t}", "comment": "/**\n\t * Print results of search to bottom console window. \t\t\t\tTODO: full results\n\t */"}}
{"code": {"body": "\tpublic String results(){\n\t\tStringBuilder s = new StringBuilder();\n\n\t\tif (GUIoutputWritten){\n\t\t\treturn \"\";\n\t\t}\n\n\t\n\t\tGUIoutputWritten = true;\n\n\t\tif (isRepeatSearch){\n\t\t\ts.append(\"\"+ file1.getName() + \"\");\n\t\t} else {\n\t\t\ts.append(\"\" + file1.getName() + \"\");\n\t\t\ts.append(\"\" + firstMinSet.size() + \"\");\n\t\t}\n\n\t\t\n\t\ts.append(\"\" + minSetFromProver.size() + \"\");\n\n\t\ts.append(\"\");\n\n\t\ts.append(Interesting());\n\n\t\ts.append(\"\");\n\n\t\ts.append(Uninteresting());\n\n\t\treturn s.toString();\n\t}", "comment": "/**\n\t * make the String output of search results\n\t * @return the String\n\t */"}}
{"code": {"body": "\tpublic String Interesting(){\n\t\tStringBuilder s = new StringBuilder();\n\n\t\tint count = 0;\n\t\tfor (Map.Entry<String, FormulaTree> f : minSetFromProver.entrySet()){\n\t\t\tif (f.getValue().isInteresting() || f.getValue() instanceof CommonAxiom){\n\t\t\t\ts.append(f.getKey());\n\t\t\t\tif (f.getValue() instanceof CommonAxiom){\n\t\t\t\t\ts.append(\"\" + ((CommonAxiom) f.getValue()).label() + \"\");\n\t\t\t\t}\t\t\t\n\t\t\t\ts.append(\"\");\n\n\t\t\t\tcount++;\n\t\t\t}\t\t\t\n\t\t}\t\t\n\t\tif (count==0){\n\t\t\ts.append(\"\");\n\t\t}\n\t\treturn s.toString();\n\t}", "comment": "/**\n\t * output any \"interesting\" formulas\n\t */"}}
{"code": {"body": "\tpublic String Uninteresting(){\n\t\tStringBuilder s = new StringBuilder();\n\n\t\tint count=0;\n\t\tfor (Map.Entry<String, FormulaTree> f : minSetFromProver.entrySet()){\n\t\t\tif (!f.getValue().isInteresting() && !(f.getValue() instanceof CommonAxiom)){\n\t\t\t\ts.append(f.getKey());\n\t\t\t\tif (f.getValue() instanceof CommonAxiom){\n\t\t\t\t\ts.append(\"\" + ((CommonAxiom) f.getValue()).label() + \"\");\n\t\t\t\t}\t\t\t\n\t\t\t\ts.append(\"\");\n\t\t\t\tcount++;\n\t\t\t}\t\t\t\n\t\t}\t\t\n\t\tif (count==0){\n\t\t\ts.append(\"\");\n\t\t}\n\t\treturn s.toString();\n\t}", "comment": "/**\n\t * output any \"uninteresting\" formulas\n\t */"}}
{"code": {"body": "\tpublic void launchProver(){\n\n\t\tnumProverCalls = firstMinSet.size();\n\t\tproverCalls = new ParallelProver(input, firstMinSet, proverPath);\t\t\t\t\n\t\tproverCalls.addPropertyChangeListener(propertyChangeListener);\n\n\t\t\n\t\tproverCalls.execute();\t\t\t\t\t\n\t}", "comment": "/**\n\t * launch the prover\n\t */"}}
{"code": {"body": "\tpublic void resetForRepeatSearch(){\n\t\tisRepeatSearch = true;\n\t\t\n\t\tGUIoutputWritten = false;\n\n\t\t\n\t\tfirstMinSet = minSetFromProver;\n\t\tnumProverCalls = firstMinSet.size();\n\n\t\t\n\t\tvarLimitSpinner.setEnabled(false);\n\t\tsizeLimitSpinner.setEnabled(false);\n\n\t\t\n\t\tstartSearchButton.setText(\"\");\n\t\tstartSearchButton.setEnabled(true);\n\t}", "comment": "/**\n\t * Reset control flow and other values for a repeat search through the axiom set.\n\t * In particular it takes the output axiom set from the first round and makes\n\t * it the input set for the next round. \n\t */"}}
{"code": {"body": "\tpublic void setSearchControls(){\n\n\t\t\n\n\t\tvarLimitSpinner.setValue(input.varLimit());\n\t\tsizeLimitSpinner.setValue(input.sizeLimit());\n\t\ttimeoutSpinner.setValue(input.timeout());\n\n\t\tif (input.useChunking()){\n\t\t\tspinnerChunkSize.setValue(input.chunkSize());\t\n\t\t\tspinnerChunkSize.setEnabled(true);\n\t\t}\t\t\n\t\t\n\t\tinput.setSearchCommonAxioms(commonAxiomsCheckBox.isSelected());\n\t}", "comment": "/**\n\t * Set search controls on the GUI to match the input file. \n\t */"}}
{"code": {"body": "\tpublic void resetForNewSearch(){\n\t\tvarLimitSpinner.setEnabled(true);\n\t\tsizeLimitSpinner.setEnabled(true);\n\t\ttimeoutSpinner.setEnabled(true);\n\t\tstartSearchButton.setText(\"\");\n\t\t\n\t\tisRepeatSearch = false;\n\t\tdoneGeneration = false;\n\t\tdoneTypedGeneration = false;\n\t\tGUIoutputWritten = true;\n\t\toutputFileName = null;\n\t\t\n\t\tproverCalls = null;\n\t\tformGen = null;\n\t}", "comment": "/**\n\t * Reset control flow for a new search with a new input file\n\t */"}}
{"code": {"body": "\tpublic String showControlBooleans(){\n\t\tStringBuilder s = new StringBuilder();\n\t\ts.append(\"\");\n\t\ts.append(\"\"+ doneGeneration + \"\");\n\t\ts.append(\"\"+ doneProverCalls + \"\");\n\t\ts.append(\"\"+ isRepeatSearch + \"\");\n\t\ts.append(\"\"+ GUIoutputWritten + \"\");\n\t\ts.append(\"\" + SwingUtilities.isEventDispatchThread() + \"\");\n\t\treturn s.toString();\n\t}", "comment": "/**\n\t * Debug method\n\t */"}}
{"code": {"body": "\tpublic void initAxiomOutputDocument(){\n\t\taxiomDoc = axiomOutputArea.getStyledDocument();\n\t\taxiomText = axiomOutputArea.addStyle(\"\", null);\n\t\tStyleConstants.setForeground(axiomText, Color.BLACK);\n\t\tint w = axiomOutputArea.getFontMetrics(axiomOutputArea.getFont()).charWidth('');\n\t\tTabStop[] stops={new TabStop(w*15), new TabStop(w*38), \n\t\t\t\tnew TabStop(w*57), new TabStop(w*73)};\n\n\t\tMutableAttributeSet attrs = new SimpleAttributeSet();\n\t\tStyleConstants.setTabSet(attrs, new TabSet(stops) );\n\t\taxiomOutputArea.setParagraphAttributes(attrs, false);\n\t}", "comment": "/**\n\t * Initialize background document for axiom output area\n\t */"}}
{"code": {"body": "\tpublic void initTextConsoleDocument(){\n\t\tconsoleDoc = textConsoleArea.getStyledDocument();\n\t\tredText = textConsoleArea.addStyle(\"\", null); \n\t\tStyleConstants.setForeground(redText, Color.RED);\n\t\tblackText = textConsoleArea.addStyle(\"\", null); \n\t\tStyleConstants.setForeground(blackText, Color.BLACK);\n\t}", "comment": "/**\n\t * Initialize background document for upper console area\n\t */"}}
{"code": {"body": "\tpublic void appendConsole(String text){\n\t\ttextOutput(text, blackText, consoleDoc);\n\t}", "comment": "/**\n\t * Print black text to the upper text pane\n\t * @param text the text to print\n\t */"}}
{"code": {"body": "\tpublic void appendErrorConsole(String text){\n\t\ttextOutput(text, redText, consoleDoc);\n\t}", "comment": "/**\n\t * Print red text to the upper text pane.\n\t * Used for error messages or other warnings. \n\t * @param text the text to print\n\t */"}}
{"code": {"body": "\tpublic void appendAxiomArea(String text){\n\t\ttextOutput(text, axiomText, axiomDoc);\n\t}", "comment": "/**\n\t * Print black text to lower text pane.\n\t * @param text the text to print\n\t */"}}
{"code": {"body": "\tpublic void textOutput(String text, Style style, StyledDocument doc){\n\t\ttry {\n\t\t\tdoc.insertString(doc.getLength(), text, style);\n\t\t} catch (BadLocationException badloc) {\n\t\t\tappendErrorConsole(\"\" + badloc.getMessage());\n\t\t}\n\t}", "comment": "/**\n\t * General printing method to print to either text area in a given text style.\n\t * @param text the text to print\n\t * @param style a text style (red or black text)\n\t * @param doc the background document for a text pane\n\t */"}}
{"code": {"body": "\tpublic void printProverStats(){\n\t\taxiomOutputArea.setText(\"\");\n\t\t\n\n\n\t\tappendAxiomArea(\"\");\n\t\tappendAxiomArea(\"\");\n\t\tappendAxiomArea(\"\" + proverCalls.numProofsFound());\n\t\tappendAxiomArea(\"\" + proverCalls.numNoProofsFound());\n\t\tappendAxiomArea(\"\" + proverCalls.numProver9Timeouts());\t\n\t\tappendAxiomArea(\"\" + proverCalls.numProver9OtherResult() + \"\");\n\n\t\tappendAxiomArea(\"\");\n\t\tappendAxiomArea(\"\" + proverCalls.numCounterexamplesFound());\n\t\tappendAxiomArea(\"\" + proverCalls.numMace4NoModelsFound());\n\t\tappendAxiomArea(\"\" + proverCalls.numMace4Timeouts());\t\t\t\t\n\t\tappendAxiomArea(\"\" + proverCalls.numMace4OtherResult() + \"\");\n\n\t\tappendAxiomArea(\"\"+ proverCalls.minSetSize());\n\t\tint numDiscarded = proverCalls.numProofsFound() + proverCalls.numMace4NoModelsFound();\n\t\tappendAxiomArea(\"\"+ numDiscarded + \"\");\n\t}", "comment": "/**\n\t * Print prover call statistics to lower output pane\n\t */"}}
{"code": {"body": "\tpublic String proverStats(){\n\t\tif (proverCalls.isCancelled()){return \"\";}\n\t\t\n\t\tStringBuilder s = new StringBuilder();\n\t\ts.append(\"\");\n\t\ts.append(\"\");\n\t\ts.append(\"\" + proverCalls.numProofsFound());\n\t\ts.append(\"\" + proverCalls.numNoProofsFound());\n\t\ts.append(\"\" + proverCalls.numProver9Timeouts());\t\n\t\ts.append(\"\" + proverCalls.numProver9OtherResult() + \"\");\n\n\t\ts.append(\"\");\n\t\ts.append(\"\" + proverCalls.numCounterexamplesFound());\n\t\ts.append(\"\" + proverCalls.numMace4NoModelsFound());\n\t\ts.append(\"\" + proverCalls.numMace4Timeouts());\t\t\t\t\n\t\ts.append(\"\" + proverCalls.numMace4OtherResult() + \"\");\n\n\t\ts.append(\"\"+ proverCalls.minSetSize());\n\t\tint numDiscarded = proverCalls.numProofsFound() + proverCalls.numMace4NoModelsFound();\n\t\ts.append(\"\"+ numDiscarded + \"\");\n\n\t\treturn s.toString();\n\t}", "comment": "/**\n\t * String output of prover call statistics.\n\t * Used for file output.\n\t * @return the String\n\t */"}}
{"code": {"body": "\tpublic void writeResultsToFile() {\n\t\toutputFileName = input.generateOutputName();\n\t\tFile outfile = new File(outputFileName);\n\t\tPrintWriter fileOutput = null;\n\t\ttry {\n\t\t\toutfile.createNewFile();\n\t\t\tfileOutput = new PrintWriter(outfile);\n\t\t} catch (IOException e) {\n\t\t\tappendErrorConsole(\"\" + e.getMessage());\n\t\t}\n\t\t\n\t\t\n\t\tfileOutput.println(\"\" + input.filename());\n\n\t\tfileOutput.println(\"\" +  minSetFromProver.size() +\"\" + runTime/1000.0 + \"\" );\n\t\tfileOutput.println(firstMinSet.size() + \"\");\n\t\t\n\t\tfileOutput.println(\"\");\n\t\tfileOutput.println(\"\");\n\t\tfileOutput.print(input.relations().size() > 1 ? \"\" : \"\");\n\t\tint commasToPrint = input.relations().size() -1;\n\t\tfor (int index = 0; index < input.relations().size(); index++){\n\t\t\tfileOutput.print(input.relations().get(index).name());\n\t\t\tif (commasToPrint > 0){\n\t\t\t\tfileOutput.print(\"\");\n\t\t\t\tcommasToPrint --;\n\t\t\t}\n\t\t}\n\t\tfileOutput.print(\"\");\n\n\t\tif (input.hasTypes()){\n\t\t\tfileOutput.print(input.types().size() > 1 ? \"\" : \"\");\n\t\t\tcommasToPrint = input.types().size() -1;\n\t\t\tfor (int index = 0; index < input.types().size(); index++){\n\t\t\t\tfileOutput.print(input.types().get(index).name());\n\t\t\t\tif (commasToPrint > 0){\n\t\t\t\t\tfileOutput.print(\"\");\n\t\t\t\t\tcommasToPrint --;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfileOutput.println(\"\");\n\t\t}\n\t\t\n\t\tfileOutput.println(\"\" + firstMinSet.size() + \"\" + (formGenEndTime - startTime)/1000.0 + \"\");\n\t\tfileOutput.println(\"\" + input.chunkSize() + \"\" + input.timeout());\n\t\tfileOutput.println(\"\" + proverTime/1000.0 + \"\");\n\t\tfileOutput.println(\"\" + runTime/1000 + \"\");\n\t\t\n\t\n\t\tfileOutput.println();\n\t\tfileOutput.println(fileProverStats()+ \"\");\n\n\t\tfileOutput.println(\"\");\n\t\tfileOutput.println(\"\");\n\t\tfileOutput.println(minSet());\n\t\t\n\t\t\n\t\tfileOutput.println(\"\");\n\t\tfileOutput.println(\"\");\n\t\tfileOutput.println(allGeneratedFormulas());\n\n\t\tfileOutput.close();\t\t\n\t}", "comment": "/**\n\t * Write to file\n\t */"}}
{"code": {"body": "\tpublic String allGeneratedFormulas(){\n\t\tStringBuilder s = new StringBuilder();\n\t\tfor (FormulaTree f : firstMinSet.values()){\n\n\t\t\t\n\t\t\ts.append(f.outputTextFormula() + \"\");\t\n\t\t\tif (f instanceof CommonAxiom){\n\t\t\t\ts.append(\"\" + ((CommonAxiom) f).label() + \"\");\n\t\t\t}\n\t\t}\n\t\treturn s.toString();\n\t}", "comment": "/**\n\t * String output of all formulas generated\n\t * @return  the String\n\t */"}}
{"code": {"body": "\tpublic String minSet(){\n\t\tStringBuilder s = new StringBuilder();\t\t\n\t\tfor (FormulaTree f : minSetFromProver.values()){\n\t\t\ts.append(f.outputTextFormula() + \"\");\t\n\t\t\tif (f instanceof CommonAxiom){\n\t\t\t\ts.append(\"\" + ((CommonAxiom) f).label() + \"\");\n\t\t\t}\n\t\t\t\n\t\t}\n\t\treturn s.toString();\n\t}", "comment": "/**\n\t * String output of minSet for user\n\t * @return the String\n\t */"}}
{"code": {"body": "        public void onReceive(Context context, Intent intent) {\n\n            Log.i(TAG, \"\");\n\n            if (intent.getExtras() != null) {\n            \t\n            \t\n                NetworkInfo ni = (NetworkInfo) intent.getExtras().get(ConnectivityManager.EXTRA_NETWORK_INFO);\n                if (ni != null && ni.getState() == NetworkInfo.State.CONNECTED) {\n                    Toast.makeText(context, \"\" + ni.getTypeName(), Toast.LENGTH_LONG).show();\n                }\n            }\n\n            \n            if (intent.getExtras().getBoolean(ConnectivityManager.EXTRA_NO_CONNECTIVITY, Boolean.FALSE)) {\n                Toast.makeText(context, \"\", Toast.LENGTH_LONG).show();\n            }\n\n            LocalBroadcastManager.getInstance(context).sendBroadcast(new Intent(UPDATE_ACTION));\n        }", "comment": "/** \n     * Called when the activity is first created.\n     */"}}
{"code": {"body": "        public void handleMessage(Message msg) {\n            MainActivity activity = mActivity.get();\n            if (activity != null) {\n                activity.updateUI();\n            }\n        }", "comment": "/** \n     * Called when the activity is first created.\n     */"}}
{"code": {"body": "    private void updateUI() {\n        Log.i(TAG, \"\");\n\n        mTextView = (TextView) this.findViewById(R.id.mainTextView);\n\n        StringBuilder sb = new StringBuilder();\n     \n        \n        BluetoothAdapter defaultBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();\n        \n        if (defaultBluetoothAdapter != null) {\n        \t\n        \tsb.append(\"\" + defaultBluetoothAdapter.getName());\n            sb.append(\"\" + defaultBluetoothAdapter.getAddress());\n            sb.append(\"\" + defaultBluetoothAdapter.isEnabled() + \"\");\n        }\n        \n        \n        NfcAdapter defaultNfcAdapter = NfcAdapter.getDefaultAdapter(this);\n        \n        if (defaultNfcAdapter != null) {\n        \t\n            sb.append(\"\" + defaultNfcAdapter.isEnabled() + \"\");\n        }\n        \n        \n        mConnectivityManager = (ConnectivityManager) this.getSystemService(CONNECTIVITY_SERVICE);\n        NetworkInfo activeNetwork = mConnectivityManager.getActiveNetworkInfo();\n        if (activeNetwork == null) {\n            sb.append(\"\");\n        }\n        else {\n\n            boolean isConnected = activeNetwork.isConnectedOrConnecting();\n            sb.append(\"\" + activeNetwork.getTypeName());\n            sb.append(\"\" + isConnected + \"\");\n\n            sb.append(\"\");\n            NetworkInfo[] networks = mConnectivityManager.getAllNetworkInfo();\n            for (NetworkInfo ni : networks) {\n                sb.append(\"\" + ni.getTypeName() + \"\" + ni.getSubtypeName());\n\n                if (ni.getType() == ConnectivityManager.TYPE_WIFI) {\n                    \n                    mWifiManager = (WifiManager) this.getSystemService(WIFI_SERVICE);\n\n                    if (mWifiManager == null)\n                        break;\n\n                    sb.append(\"\" + mWifiManager.getWifiState());\n                    List<ScanResult> scanResults = mWifiManager.getScanResults();\n\n                    if (scanResults != null) {\n                        for (ScanResult sr : scanResults) {\n                            sb.append(\"\" + sr.SSID + \"\" + sr.level + \"\");\n                        }\n                    }\n                }\n            }\n        }\n\n        mTextView.setText(sb.toString());\n    }", "comment": "/**\n     * Update the TextView.\n     */"}}
{"code": {"body": "        public void onDrawShadow(Canvas canvas) {\n\n            mBitmapDrawable.draw(canvas);\n        }", "comment": "/** Called when the activity is first created. */"}}
{"code": {"body": "        public void onProvideShadowMetrics(Point shadowSize, Point shadowTouchPoint) {\n\n            super.onProvideShadowMetrics(shadowSize, shadowTouchPoint);\n\n            \n            int height = getView().getHeight() * 2;\n            int width = getView().getWidth() * 2;            \n            mBitmapDrawable.setBounds(0, 0, width, height);\n            shadowSize.set(width, height);\n            \n            \n            shadowTouchPoint.set(width / 2, height / 2);\n        }", "comment": "/** Called when the activity is first created. */"}}
{"code": {"body": "    private void addSpot(float x, float y) {\n        Spot spot = new Spot(this);\n        spot.setX(x);\n        spot.setY(y);     \n        mMainRelativeLayout.addView(spot);\n    }", "comment": "/** Called when the activity is first created. */"}}
{"code": {"body": "\tprivate void java_Access() {\n\n\t\tLog.d(TAG, \"\");\n\n\t\tfloat pi = Utility.getPI();\n\t\tLog.d(TAG, \"\" + pi); \n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tLog.d(TAG, \"\" + String.valueOf(pi)); \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t}", "comment": "/** Examples of access methods */"}}
{"code": {"body": "\tprivate void java_Block() {\n\n\t\tLog.d(TAG, \"\");\n\n\t\t{\n\t\t\t;\n\t\t}\n\n\t}", "comment": "/** Examples of Blocks */"}}
{"code": {"body": "\tprivate void java_AnonymousClasses() {\n\n\t\tLog.d(TAG, \"\");\n\n\t\t\n\t\tfindViewById(R.id.testButton).setOnClickListener(new OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tToast.makeText(getApplicationContext(), \"\", Toast.LENGTH_LONG).show();\n\t\t\t}\n\t\t});\n\n\t}", "comment": "/** Examples of classes and their usage */"}}
{"code": {"body": "    public native String getHelloWorldJNI();\n ", "comment": "/** Called when the activity is first created. */"}}
{"code": {"body": "    public native int incrementJNI(int value);\n        \n ", "comment": "/** Called when the activity is first created. */"}}
{"code": {"body": "        public void handleMessage(Message msg) {\n            TextView tv = (TextView) findViewById(R.id.serviceTextView);\n            tv.setText(tv.getText().toString() + \"\" );\n            super.handleMessage(msg);\n        }", "comment": "/** \n     * Service Binding callbacks\n     **/"}}
{"code": {"body": "        public void onReceive(Context context, Intent intent) {\n            Log.d(TAG, \"\" + intent);\n            mGoodbyeHandler.sendEmptyMessage(1);            \n        }", "comment": "/** \n     * Service Binding callbacks\n     **/"}}
{"code": {"body": "        public void handleMessage(Message msg) {\n            TextView tv = (TextView) findViewById(R.id.serviceTextView);\n            tv.setText(tv.getText().toString() + \"\" );\n            super.handleMessage(msg);\n        }", "comment": "/** \n     * Service Binding callbacks\n     **/"}}
{"code": {"body": "        public void onReceive(Context context, Intent intent) {\n            Log.d(TAG, \"\" + intent);\n            mGoodbyeHandler.sendEmptyMessage(1);            \n        }", "comment": "/** \n     * Service Binding callbacks\n     **/"}}
{"code": {"body": "\tprivate File createImageFile() throws IOException {\n\t\t\n\t    \n\t    String timeStamp = new SimpleDateFormat(\"\").format(new Date());\n\t    String imageFileName = \"\" + timeStamp + \"\";\n\t    \n\t    \n\t    File pictureDirectory = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);\n\t    File imageFile = File.createTempFile(imageFileName, \"\", pictureDirectory);\n\n\t    mCurrentPhotoPath = \"\" + imageFile.getAbsolutePath();\n\t    Log.i(TAG, \"\" + mCurrentPhotoPath);\n\t    \n\t    return imageFile;\n\t}", "comment": "/** Called when the activity is first created. */"}}
{"code": {"body": "\tprivate Intent getPhotoIntent(Uri currentPhotoUri) {\n\t    Intent intent = new Intent(Intent.ACTION_SEND);\n\t    intent.setType(\"\");\n\t    intent.putExtra(Intent.EXTRA_STREAM, currentPhotoUri);\n\t    return intent;\n\t}", "comment": "/** Called when the activity is first created. */"}}
{"code": {"body": "    public static String getLocalIP() {\n        String sIP = \"\";\n        InetAddress ip = null;\n        try {\n            boolean bFindIP = false;\n            Enumeration<NetworkInterface> netInterfaces = NetworkInterface.getNetworkInterfaces();\n            while (netInterfaces.hasMoreElements()) {\n                if (bFindIP) {\n                    break;\n                }\n                NetworkInterface ni = (NetworkInterface) netInterfaces\n                        .nextElement();\n\n                Enumeration<InetAddress> ips = ni.getInetAddresses();\n                while (ips.hasMoreElements()) {\n                    ip = (InetAddress) ips.nextElement();\n                    if (!ip.isLoopbackAddress()\n                            && ip.getHostAddress().matches(\n                            \"\")) {\n                        bFindIP = true;\n                        break;\n                    }\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"\", e.getMessage());\n        }\n        if (null != ip) {\n            sIP = ip.getHostAddress();\n        }\n        return sIP;\n    }", "comment": "/**\n     * \u6b64\u65b9\u6cd5\u63cf\u8ff0\u7684\u662f\uff1a\u83b7\u5f97\u670d\u52a1\u5668\u7684IP\u5730\u5740\n     */"}}
{"code": {"body": "    public static List<String> getLocalIPS() {\n        InetAddress ip = null;\n        List<String> ipList = new ArrayList<String>();\n        try {\n            Enumeration<NetworkInterface> netInterfaces = NetworkInterface.getNetworkInterfaces();\n            while (netInterfaces.hasMoreElements()) {\n                NetworkInterface ni = (NetworkInterface) netInterfaces\n                        .nextElement();\n                Enumeration<InetAddress> ips = ni.getInetAddresses();\n                while (ips.hasMoreElements()) {\n                    ip = ips.nextElement();\n                    if (!ip.isLoopbackAddress()\n                            && ip.getHostAddress().matches(\n                            \"\")) {\n                        ipList.add(ip.getHostAddress());\n                    }\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"\", e.getMessage());\n        }\n        return ipList;\n    }", "comment": "/**\n     * \u6b64\u65b9\u6cd5\u63cf\u8ff0\u7684\u662f\uff1a\u83b7\u5f97\u670d\u52a1\u5668\u7684IP\u5730\u5740(\u591a\u7f51\u5361)\n     */"}}
{"code": {"body": "    public static String getMacId() {\n        String macId = \"\";\n        InetAddress ip = null;\n        NetworkInterface ni = null;\n        try {\n            boolean bFindIP = false;\n            Enumeration<NetworkInterface> netInterfaces = NetworkInterface.getNetworkInterfaces();\n            while (netInterfaces.hasMoreElements()) {\n                if (bFindIP) {\n                    break;\n                }\n                ni = netInterfaces\n                        .nextElement();\n                \n                \n                Enumeration<InetAddress> ips = ni.getInetAddresses();\n                while (ips.hasMoreElements()) {\n                    ip = ips.nextElement();\n                    if (!ip.isLoopbackAddress() \n                            && ip.getHostAddress().matches(\n                            \"\")) {\n                        bFindIP = true;\n                        break;\n                    }\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"\", e.getMessage());\n        }\n        if (null != ip) {\n            try {\n                macId = getMacFromBytes(ni.getHardwareAddress());\n            } catch (SocketException e) {\n                logger.error(\"\", e.getMessage());\n            }\n        }\n        return macId;\n    }", "comment": "/**\n     * \u6b64\u65b9\u6cd5\u63cf\u8ff0\u7684\u662f\uff1a\u83b7\u5f97\u670d\u52a1\u5668\u7684MAC\u5730\u5740\n     */"}}
{"code": {"body": "    public static List<String> getMacIds() {\n        InetAddress ip = null;\n        NetworkInterface ni = null;\n        List<String> macList = new ArrayList<String>();\n        try {\n            Enumeration<NetworkInterface> netInterfaces = NetworkInterface.getNetworkInterfaces();\n            while (netInterfaces.hasMoreElements()) {\n                ni = netInterfaces\n                        .nextElement();\n                \n                \n                Enumeration<InetAddress> ips = ni.getInetAddresses();\n                while (ips.hasMoreElements()) {\n                    ip = ips.nextElement();\n                    if (!ip.isLoopbackAddress() \n                            && ip.getHostAddress().matches(\n                            \"\")) {\n                        macList.add(getMacFromBytes(ni.getHardwareAddress()));\n                    }\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"\", e.getMessage());\n        }\n        return macList;\n    }", "comment": "/**\n     * \u6b64\u65b9\u6cd5\u63cf\u8ff0\u7684\u662f\uff1a\u83b7\u5f97\u670d\u52a1\u5668\u7684MAC\u5730\u5740(\u591a\u7f51\u5361)\n     */"}}
{"code": {"body": "    public static void main(String[] args) {\n        System.out.println(System.getProperty(\"\"));\n    }", "comment": "/*    static{\n        try {\n            Properties p =  new Properties();\n            p.load(Test.class.getClassLoader().getResourceAsStream(\"config.properties\"));\n            System.out.println(p.get(\"InitRTDB\").equals(\"1\"));\n            \n        } catch (IOException e) {\n            e.printStackTrace();\n            \n        }\n    \n    }*/"}}
{"code": {"body": "public Ajustes() {\n        initComponents();\n    }", "comment": "/**\n     * Creates new form Ajustes\n     */"}}
{"code": {"body": "    public static void main(String args[]) {\n        \n        \n        \n        try {\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n                if (\"\".equals(info.getName())) {\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                    break;\n                }\n            }\n        } catch (ClassNotFoundException ex) {\n            java.util.logging.Logger.getLogger(Ajustes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (InstantiationException ex) {\n            java.util.logging.Logger.getLogger(Ajustes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (IllegalAccessException ex) {\n            java.util.logging.Logger.getLogger(Ajustes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n            java.util.logging.Logger.getLogger(Ajustes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        }\n        \n\n        \n        java.awt.EventQueue.invokeLater(new Runnable() {\n            public void run() {\n                new Ajustes().setVisible(true);\n            }\n        });\n    }", "comment": "/**\n     * @param args the command line arguments\n     */"}}
{"code": {"body": "\tpublic static void main( final String[] arguments ) {\n\t\tLocale.setDefault( Locale.US );\n\t\t\n\t\t\n\t\tMainShell.INSTANCE.startup();\n\t}", "comment": "/**\n\t * This is the entry point of Abdra Commander.\n\t * \n\t * @param arguments arguments passed on to us\n\t */"}}
{"code": {"body": "public BitFlags(final BitFlags other)", "comment": "/** clone constructor */"}}
{"code": {"body": "public BitFlags and(final BitFlags other)", "comment": "/**\n\t * Experimental.  Returns a new BitFlags with flags set as the logical AND of both BitFlags.\n     * The length of both must be the same.\n\t * @param other BitFlags to be ANDed with this BitFlags. Must not be null.\n\t * @return new BitFlags representing the logical AND of the two\n\t */"}}
{"code": {"body": "    public int size()\n    {\n        return flags.length;\n    }", "comment": "/** You can read flags.length instead (but please don't modify it)\n     * @return the number of elements in this array\n     */"}}
{"code": {"body": "\tpublic void setStart(final int i)\n\t{\n\t\tflags[i] =true;\n\t\tnbSet++;\n\t\tstart =i;\n\t}", "comment": "/** for setting a flag that is already known to be the first true flag */"}}
{"code": {"body": "\tpublic void set(final int i)\n\t{\n\t\tif (!flags[i])\n\t\t{\n\t\t\tflags[i] =true;\n\t\t\tnbSet++;\n\t\t\tif (start >i)\n\t\t\t\tstart =i;\n\t\t\tif (end <i)\n\t\t\t\tend =i;\n\t\t}\n\t}", "comment": "/** for setting a flag that is not known to be the first or last, or not */"}}
{"code": {"body": "\tpublic void setEnd(final int i)\n\t{\n\t\tflags[i] =true;\n\t\tnbSet++;\n\t\tend =i;\n\t}", "comment": "/** this is for setting a flag that is already known to be the last true flag */"}}
{"code": {"body": "\tpublic void setOnly(final int i)\n\t{\n        if (start <flags.length)\n            Arrays.fill(flags, start, end, false);\n\t\tnbSet =1;\n\t\tstart =i;\n\t\tend =i;\n\t\tflags[i] =true;\n\t}", "comment": "/** clears the array then sets the given flag */"}}
{"code": {"body": "\tpublic BitFlags and(final BitFlags other)\n\t{\n\t\tfinal BitFlags result =new BitFlags(flags.length);\n\t\tif (this.nbSet >0 &&other.nbSet >0)\n\t\t{\n            \n\t\t\tint i =this.start >other.start ?this.start :other.start;\n\t\t\tfinal int endI =this.end <other.end ?this.end :other.end;\n            \n\t\t\tfor (; i <=endI; i++)\n\t\t\t{\n\t\t\t\tif (this.flags[i] &&other.flags[i])\n\t\t\t\t{\n                    result.flags[i] =true;\n                    result.nbSet++;\n                    result.start =i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n            \n\t\t\tfor (; i <=endI; i++)\n\t\t\t{\n\t\t\t\tif (this.flags[i] &&other.flags[i])\n\t\t\t\t{\n                    result.flags[i] =true;\n                    result.nbSet++;\n                    result.end =i;\n\t\t\t\t}\n\t\t\t}\n            if (result.end <result.start)\n                result.end =result.start;\n\t\t}\n\t\treturn result;\n\t}", "comment": "/**\n\t * Experimental.  Returns a new BitFlags with flags set as the logical AND of both BitFlags.\n     * The length of both must be the same.\n\t * @param other BitFlags to be ANDed with this BitFlags. Must not be null.\n\t * @return new BitFlags representing the logical AND of the two\n\t */"}}
{"code": {"body": "public MultiUserConsoleInput(String con, AzureusCore _azureus_core,", "comment": "/**\n\t * set up the lists of commands that we prohibit, based upon the user type.\n\t * @param con\n\t * @param _azureus_core\n\t * @param _in\n\t * @param _out\n\t * @param _controlling\n\t * @param profile\n\t */"}}
{"code": {"body": "\tprotected void initialise() {\n\t\t\n\t\tadminCommands = new ArrayList();\n\t\tadminCommands.add(\"\");\n\t\tadminCommands.add(\"\");\n\t\tadminCommands.add(\"\");\n\t\t\n\t\t\n\t\tadminCommands.add(\"\");\n\t\tadminCommands.add(\"\");\n\t\tadminCommands.add(\"\");\n\t\t\n\t\tuserCommands = new ArrayList();\n\t\tuserCommands.add(\"\");\n\t\tuserCommands.add(\"\");\n\t\tuserCommands.add(\"\");\n\t\t\n\t\tsuper.initialise();\n\t}", "comment": "/**\n\t * initialize our list of commands that need specific roles\n\t */"}}
{"code": {"body": "\tprotected void registerCommands() {\n\t\tsuper.registerCommands();\n\t\t\n\t\tregisterCommand(new Show());\n\t}", "comment": "/**\n\t * add some multi-user specific commands\n\t */"}}
{"code": {"body": "\tpublic void registerCommand(IConsoleCommand command) {\n\t\tif( ! UserProfile.ADMIN.equals( getUserProfile().getUserType() ) )\n\t\t{\n\t\t\tSet commandNames = command.getCommandNames();\n            for (Object commandName : commandNames) {\n                String cmdName = (String) commandName;\n                if (adminCommands.contains(cmdName))\n                    return;\n                if (!UserProfile.USER.equals(getUserProfile().getUserType())) {\n                    if (userCommands.contains(cmdName))\n                        return;\n                }\n            }\n\t\t}\t\n\t\tsuper.registerCommand(command);\n\t}", "comment": "/**\n\t * check whether the specified command is one of our banned commands for \n\t * this particular user type. some commands are able to handle different \n\t * user types, others are not relevant to anybody but admin\n\t */"}}
{"code": {"body": "public ExtendedFileFilter()", "comment": "/**\n   * Initialize the new instance with default values.\n   */"}}
{"code": {"body": "\tpublic void addPattern( String pattern, boolean ignoreCase, char digitWildcard )\n\t{\n\t\tStringPattern stringPattern\t\t= null ;\n\t\t\n\t\tstringPattern = new StringPattern( pattern, ignoreCase, digitWildcard ) ;\n\t\tthis.getStringPatterns().add( stringPattern ) ;\n\t}", "comment": "/**\n\t * Adds a pattern. All filenames that match this pattern are acceptable.\n\t * Additionally to the standard wildcards '*' and '?' a wildcard for single\n\t * digit characters ('0' - '9') can be specified here.\n\t * \n\t * @param pattern The pattern string containing  optional wildcards ( '*', '?' ) \n\t * @param ignoreCase If true, all character comparisons are ignoring uppercase/lowercase\n\t * @param digitWildcard The character that will be treated as wildcard for digits ('0'-'9')\n\t */"}}
{"code": {"body": "\tpublic void checkNameOfDirectories()\n\t{\n\t\tthis.setDirHandling( DIR_CHECK_NAME ) ;\n\t}", "comment": "/**\n\t * Sets the filter to only accept directories that match a defined pattern.\n\t */"}}
{"code": {"body": "\tpublic void alwaysIncludeDirectories()\n\t{\n\t\tthis.setDirHandling( DIR_INCLUDE ) ;\n\t}", "comment": "/**\n\t * Sets the filter to always accept directories, even if they don't match\n\t * a given pattern.\n\t */"}}
{"code": {"body": "\tpublic void alwaysExcludeDirectories()\n\t{\n\t\tthis.setDirHandling( DIR_EXCLUDE ) ;\n\t}", "comment": "/**\n\t * Sets the filter to never accept directories.\n\t */"}}
{"code": {"body": "\tpublic boolean accept( File dir, String name )\n\t{\t\t\n\t\tFile fileOrDir\t\t= null ;\n\t\t\n\t\tfileOrDir = new File( dir, name ) ;\n\t\tif ( fileOrDir.isDirectory() )\n\t\t{\n\t\t\tif ( this.mustIncludeDirectories() )\n\t\t\t\treturn true ;\n\t\t\tif ( this.mustExcludeDirectories() )\n\t\t\t\treturn false ;\n\t\t}\n\t\t\n\t\treturn ( this.checkAgainstPatterns( name ) ) ;\n\t}", "comment": "/**\n   * Tests if a specified file should be included in a file list.\n   *\n   * @param dir the directory in which the file was found.\n   * @param name the name of the file.\n   * @return true if and only if the name should be included in the file list, false otherwise.\n   */"}}
{"code": {"body": "\tpublic boolean mustIncludeDirectories()\n\t{\n\t\treturn ( this.getDirHandling() == DIR_INCLUDE ) ;\n\t}", "comment": "/**\n\t * Returns true if the filter always accepts directories, even if they don't match\n\t * a given pattern.\n\t */"}}
{"code": {"body": "\tpublic boolean mustExcludeDirectories()\n\t{\n\t\treturn ( this.getDirHandling() == DIR_EXCLUDE ) ;\n\t}", "comment": "/**\n\t * Returns true if the filter never accepts directories.\n\t */"}}
{"code": {"body": "public AbyssFateApp(){\n        Hero testHero = new Hero(\"\", $RACE.ELF, $CLASS.WARRIOR, $GENDER.MALE);\n\n    }", "comment": "/*String musicFile = \"music/Soundtrack.mp3\";     // For example\n        Media sound = new Media(new File(musicFile).toURI().toString());\n        MediaPlayer mediaPlayer = new MediaPlayer(sound);\n        mediaPlayer.play();*/"}}
{"code": {"body": "    public void start(Stage primaryStage) throws Exception{\n        \n\n        this.primaryStage = primaryStage;\n        this.primaryStage.setTitle(\"\");\n        this.primaryStage.setMinWidth(1366);\n        this.primaryStage.setMinHeight(768);\n\n        initRootLayout(); \n\n        showStartScreen();\n\n        \n\n        \n\n\n\n        }", "comment": "/*String musicFile = \"music/Soundtrack.mp3\";     // For example\n        Media sound = new Media(new File(musicFile).toURI().toString());\n        MediaPlayer mediaPlayer = new MediaPlayer(sound);\n        mediaPlayer.play();*/"}}
{"code": {"body": "    public Stage getPrimaryStage() {\n        return primaryStage;\n    }", "comment": "/**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0433\u043b\u0430\u0432\u043d\u0443\u044e \u0441\u0446\u0435\u043d\u0443.\n     * @return\n     */"}}
{"code": {"body": "public Academy(List<Course> courses, List<User> users) {\n    super();\n    this.courses = courses;\n    this.users = users;\n  }", "comment": "/**\n   * Academy constructor\n   */"}}
{"code": {"body": "\tpublic static void main(String args[])\n\t{\n\t \n\t \n\t short s;\n\t s = 99999999;\n\t \n\t int i ;\n\t i = true;\n\t i = rio;\n\t i = 2147483648;\n\t System.out.println(\"\" +s );\n\t}", "comment": "/*the following cannot be done\n\t out of range , \n\t exact error prompt = possible loss of precision\n\t */"}}
{"code": {"body": "    private float[] highPass(float x, float y, float z)\n    {\n        float[] filteredValues = new float[3];\n        \n        gravity[0] = ALPHA * gravity[0] + (1 - ALPHA) * x;\n        gravity[1] = ALPHA * gravity[1] + (1 - ALPHA) * y;\n        gravity[2] = ALPHA * gravity[2] + (1 - ALPHA) * z;\n\n        filteredValues[0] = x - gravity[0];\n        filteredValues[1] = y - gravity[1];\n        filteredValues[2] = z - gravity[2];\n        \n        return filteredValues;\n    }", "comment": "/**\n     * This method derived from the Android documentation and is available under\n     * the Apache 2.0 license.\n     * \n     * @see http://developer.android.com/reference/android/hardware/SensorEvent.html\n     */"}}
{"code": {"body": "\tpublic float[] filterFloat(float[] data)\n\t{\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t{\n\t\t\t\n\t\t\tif (!dataInit)\n\t\t\t{\n\t\t\t\tdataLists.add(new LinkedList<Number>());\n\t\t\t}\n\n\t\t\tdataLists.get(i).addLast(data[i]);\n\n\t\t\tif (dataLists.get(i).size() > filterWindow)\n\t\t\t{\n\t\t\t\tdataLists.get(i).removeFirst();\n\t\t\t}\n\t\t}\n\n\t\tdataInit = true;\n\n\t\tfloat[] means = new float[dataLists.size()];\n\n\t\tfor (int i = 0; i < dataLists.size(); i++)\n\t\t{\n\t\t\tmeans[i] = (float) getMean(dataLists.get(i));\n\t\t}\n\n\t\treturn means;\n\t}", "comment": "/**\n\t * Filter the data.\n\t * \n\t * @param iterator\n\t *            contains input the data.\n\t * @return the filtered output data.\n\t */"}}
{"code": {"body": "\tpublic double[] filterDouble(double[] data)\n\t{\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t{\n\t\t\t\n\t\t\tif (!dataInit)\n\t\t\t{\n\t\t\t\tdataLists.add(new LinkedList<Number>());\n\t\t\t}\n\n\t\t\tdataLists.get(i).addLast(data[i]);\n\n\t\t\tif (dataLists.get(i).size() > filterWindow)\n\t\t\t{\n\t\t\t\tdataLists.get(i).removeFirst();\n\t\t\t}\n\t\t}\n\n\t\tdataInit = true;\n\n\t\tdouble[] means = new double[dataLists.size()];\n\n\t\tfor (int i = 0; i < dataLists.size(); i++)\n\t\t{\n\t\t\tmeans[i] = getMean(dataLists.get(i));\n\t\t}\n\n\t\treturn means;\n\t}", "comment": "/**\n\t * Filter the data.\n\t * \n\t * @param iterator\n\t *            contains input the data.\n\t * @return the filtered output data.\n\t */"}}
{"code": {"body": "\tprivate float getMean(List<Number> data)\n\t{\n\t\tfloat m = 0;\n\t\tfloat count = 0;\n\n\t\tfor (int i = 0; i < data.size(); i++)\n\t\t{\n\t\t\tm += data.get(i).floatValue();\n\t\t\tcount++;\n\t\t}\n\n\t\tif (count != 0)\n\t\t{\n\t\t\tm = m / count;\n\t\t}\n\n\t\treturn m;\n\t}", "comment": "/**\n\t * Get the mean of the data set.\n\t * \n\t * @param data\n\t *            the data set.\n\t * @return the mean of the data set.\n\t */"}}
{"code": {"body": "public Account(String accountNumber,", "comment": "/**\n     * Constructor.\n     * \n     * @param accountNumber     The account number (identity) for the account.\n     * @param initialBalance    The initial balance for the account.\n     */"}}
{"code": {"body": "public Account transferFrom(Account target, Money amount) {\n        \n        target.transferTo(this, amount);\n        \n        return this;        \n    }", "comment": "/**\n     * Transfer money to this account from another.\n     * \n     * This is a transactional action (will succeed or fail as a whole).\n     * This operation satisfies the double-entry accounting requirement,\n     * sometimes refered to as \"conservation of money\". In particular, the\n     * debit and offsetting credit are carried out together.\n     * \n     * @param target    the account sourcing the funds.\n     * @param amount    the amount to be transfered.\n     * \n     * @return  {@code this}\n     */"}}
{"code": {"body": "    public String getAccountNumber() {\n        return accountNumber;\n    }", "comment": "/**\n     * @return the account number (identity) for the account.\n     */"}}
{"code": {"body": "    public Money getBalance() {\n        return balance;\n    }", "comment": "/**\n     * @return the current balance in the account.\n     */"}}
{"code": {"body": "    public Account transferFrom(Account target, Money amount) {\n        \n        target.transferTo(this, amount);\n        \n        return this;        \n    }", "comment": "/**\n     * Transfer money to this account from another.\n     * \n     * This is a transactional action (will succeed or fail as a whole).\n     * This operation satisfies the double-entry accounting requirement,\n     * sometimes refered to as \"conservation of money\". In particular, the\n     * debit and offsetting credit are carried out together.\n     * \n     * @param target    the account sourcing the funds.\n     * @param amount    the amount to be transfered.\n     * \n     * @return  {@code this}\n     */"}}
{"code": {"body": "    private void debit(Money amount) {\n        assert !amount.isNegative();\n        balance = balance.subtract(amount);\n    }", "comment": "/*\n     * Debit the account by a specified amount.\n     * \n     * This operation is private, reserved for internal use only.\n     * Note: the amount should be non-negative.\n     * \n     * @param amount    the amount to debit.\n     * \n     * @return  {@code this}\n     */"}}
{"code": {"body": "    private void credit(Money amount) {\n        assert !amount.isNegative();\n        balance = balance.add(amount);\n    }", "comment": "/*\n     * Credit the account by a specified amount.\n     * \n     * This operation is private, reserved for internal use only.\n     * Note: the amount should be non-negative.\n     * \n     * @param amount    the amount to credit.\n     * \n     * @return  {@code this}\n     */"}}
{"code": {"body": "    public String getAction() {\n        return action;\n    }", "comment": "/**\n     * Getter for property 'action'.\n     *\n     * @return Value for property 'action'.\n     */"}}
{"code": {"body": "    public void setAction(String action) {\n        this.action = action;\n    }", "comment": "/**\n     * Setter for property 'action'.\n     *\n     * @param action Value to set for property 'action'.\n     */"}}
{"code": {"body": "    public String getUser_login() {\n        return user_login;\n    }", "comment": "/**\n     * Getter for property 'user_login'.\n     *\n     * @return Value for property 'user_login'.\n     */"}}
{"code": {"body": "    public void setUser_login(String user_login) {\n        this.user_login = user_login;\n    }", "comment": "/**\n     * Setter for property 'user_login'.\n     *\n     * @param user_login Value to set for property 'user_login'.\n     */"}}
{"code": {"body": "    public String getEmail() {\n        return email;\n    }", "comment": "/**\n     * Getter for property 'email'.\n     *\n     * @return Value for property 'email'.\n     */"}}
{"code": {"body": "    public void setEmail(String email) {\n        this.email = email;\n    }", "comment": "/**\n     * Setter for property 'email'.\n     *\n     * @param email Value to set for property 'email'.\n     */"}}
{"code": {"body": "    public String getFirst_name() {\n        return first_name;\n    }", "comment": "/**\n     * Getter for property 'first_name'.\n     *\n     * @return Value for property 'first_name'.\n     */"}}
{"code": {"body": "    public void setFirst_name(String first_name) {\n        this.first_name = first_name;\n    }", "comment": "/**\n     * Setter for property 'first_name'.\n     *\n     * @param first_name Value to set for property 'first_name'.\n     */"}}
{"code": {"body": "    public String getLast_name() {\n        return last_name;\n    }", "comment": "/**\n     * Getter for property 'last_name'.\n     *\n     * @return Value for property 'last_name'.\n     */"}}
{"code": {"body": "    public void setLast_name(String last_name) {\n        this.last_name = last_name;\n    }", "comment": "/**\n     * Setter for property 'last_name'.\n     *\n     * @param last_name Value to set for property 'last_name'.\n     */"}}
{"code": {"body": "    public String getUrl() {\n        return url;\n    }", "comment": "/**\n     * Getter for property 'url'.\n     *\n     * @return Value for property 'url'.\n     */"}}
{"code": {"body": "    public void setUrl(String url) {\n        this.url = url;\n    }", "comment": "/**\n     * Setter for property 'url'.\n     *\n     * @param url Value to set for property 'url'.\n     */"}}
{"code": {"body": "    public String getPass1() {\n        return pass1;\n    }", "comment": "/**\n     * Getter for property 'pass1'.\n     *\n     * @return Value for property 'pass1'.\n     */"}}
{"code": {"body": "    public void setPass1(String pass1) {\n        this.pass1 = pass1;\n    }", "comment": "/**\n     * Setter for property 'pass1'.\n     *\n     * @param pass1 Value to set for property 'pass1'.\n     */"}}
{"code": {"body": "    public String getPass2() {\n        return pass2;\n    }", "comment": "/**\n     * Getter for property 'pass2'.\n     *\n     * @return Value for property 'pass2'.\n     */"}}
{"code": {"body": "    public void setPass2(String pass2) {\n        this.pass2 = pass2;\n    }", "comment": "/**\n     * Setter for property 'pass2'.\n     *\n     * @param pass2 Value to set for property 'pass2'.\n     */"}}
{"code": {"body": "    public String getSend_user_notification() {\n        return send_user_notification;\n    }", "comment": "/**\n     * Getter for property 'send_user_notification'.\n     *\n     * @return Value for property 'send_user_notification'.\n     */"}}
{"code": {"body": "    public void setSend_user_notification(String send_user_notification) {\n        this.send_user_notification = send_user_notification;\n    }", "comment": "/**\n     * Setter for property 'send_user_notification'.\n     *\n     * @param send_user_notification Value to set for property 'send_user_notification'.\n     */"}}
{"code": {"body": "    public String getRole() {\n        return role;\n    }", "comment": "/**\n     * Getter for property 'role'.\n     *\n     * @return Value for property 'role'.\n     */"}}
{"code": {"body": "    public void setRole(String role) {\n        this.role = role;\n    }", "comment": "/**\n     * Setter for property 'role'.\n     *\n     * @param role Value to set for property 'role'.\n     */"}}
{"code": {"body": "    public String getCreateuser() {\n        return createuser;\n    }", "comment": "/**\n     * Getter for property 'createuser'.\n     *\n     * @return Value for property 'createuser'.\n     */"}}
{"code": {"body": "    public void setCreateuser(String createuser) {\n        this.createuser = createuser;\n    }", "comment": "/**\n     * Setter for property 'createuser'.\n     *\n     * @param createuser Value to set for property 'createuser'.\n     */"}}
{"code": {"body": "    private boolean updateIcon() {\n        final int res = CornerHelper.getIconResource(mCornerActionId);\n        if (res == mDrawableResourceId) return false; \n        mDrawableResourceId = res;\n\n        label:\n        {\n            \n            final CharSequence key = Integer.toString(res);\n            mDrawable = mDrawableCache.get(key);\n            if (mDrawable != null) {\n                if (DEBUG) Log.d(TAG, \"\" + key + \"\");\n                break label;\n            }\n\n            \n            mDrawable = ResUtils.getDrawable(getContext(), res);\n            assert mDrawable != null;\n            mDrawable.setBounds(0, 0,\n                    mDrawable.getIntrinsicWidth(),\n                    mDrawable.getIntrinsicHeight());\n            mDrawable = mDrawable.mutate(); \n            mDrawableCache.put(key, mDrawable);\n        }\n        \n        float ratio = calculateRatio();\n        mDrawable.setAlpha((int) (255 * Math.pow(ratio, 3)));\n        return true;\n    }", "comment": "/**\n     * Updates the icon in center of the circle, to the once corresponding\n     * with the current action.\n     *\n     * @see CornerHelper\n     */"}}
{"code": {"body": "    private void setRadius(float radius) {\n        mRadius = radius;\n\n        if (!mCanceled) {\n            \n            \n            if (mRadius > mRadiusMaxPeak) {\n                mRadiusMaxPeak = mRadius;\n            } else if (mRadiusMaxPeak - mRadius > mRadiusDecreaseThreshold) {\n                cancelCircle();\n                return; \n            }\n\n            boolean aimed = mRadius >= mRadiusTarget;\n            if (mRadiusTargetAimed != aimed) {\n                mRadiusTargetAimed = aimed;\n                \n                if (isInTouchMode()) performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);\n            }\n        }\n        final float ratio = calculateRatio();\n        int alpha;\n\n        \n        if (mDrawable != null) {\n            alpha = (int) (255 * Math.pow(ratio, 3));\n            mDrawable.setAlpha(alpha);\n        }\n\n        \n        alpha = (int) (50f * Math.pow(1f - ratio, 0.3f));\n        mDrawableLeftTopCorner.setAlpha(alpha);\n        mDrawableRightTopCorner.setAlpha(alpha);\n        mDrawableLeftBottomCorner.setAlpha(alpha);\n        mDrawableRightBottomCorner.setAlpha(alpha);\n\n        \n        radius = (float) Math.sqrt(mRadius / 50f) * 50f;\n        setRadiusDrawn(radius);\n    }", "comment": "/**\n     * Sets the radius of fake circle.\n     *\n     * @param radius radius to set\n     */"}}
{"code": {"body": "    public ModelAndView getModelAndView(){\n        return new ModelAndView();\n    }", "comment": "/**\n     * \u5f97\u5230ModelAndView\n     */"}}
{"code": {"body": "    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.main);\n\n        mVieClock = (ClockView) findViewById(R.id.vieClock);\n        mVieClock.setOnTouchListener(mAdjustOnTouchListener);\n\n        mVieBackgroundOpacity = findViewById(R.id.vieBackgroundOpacity);\n\n    }", "comment": "/**\n     * Handler to update the brightness periodically.\n     */"}}
{"code": {"body": "    protected void onPostCreate(Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n\n        \n        \n        \n        delayedHide(UI_ANIMATION_DELAY_MS);\n    }", "comment": "/**\n     * Handler to update the brightness periodically.\n     */"}}
{"code": {"body": "    protected void onResume() {\n        super.onResume();\n        mUpdateBrightnessHandler.sendEmptyMessage(0);\n    }", "comment": "/**\n     * Handler to update the brightness periodically.\n     */"}}
{"code": {"body": "    protected void onPause() {\n        mUpdateBrightnessHandler.removeMessages(0);\n        super.onPause();\n    }", "comment": "/**\n     * Handler to update the brightness periodically.\n     */"}}
{"code": {"body": "    private void setBrightness(float value) {\n        if (value < 0) value = 0;\n        if (value > 1) value = 1;\n\n        WindowManager.LayoutParams layout = getWindow().getAttributes();\n        layout.screenBrightness = value;\n        getWindow().setAttributes(layout);\n    }", "comment": "/*\n     * Brightness.\n     */"}}
{"code": {"body": "    private void setBackgroundOpacity(float value) {\n        if (value < 0) value = 0;\n        if (value > 1) value = 1;\n        mVieBackgroundOpacity.setBackgroundColor(Color.argb((int) (255f * (1f - value)), 0, 0, 0));\n    }", "comment": "/*\n     * Background opacity.\n     */"}}
{"code": {"body": "    protected void toast(float brightness, int textRes) {\n        String text = getString(textRes, (int) (brightness * 100));\n        if (mToast == null) mToast = Toast.makeText(this, text, Toast.LENGTH_SHORT);\n        mToast.setText(text);\n        mToast.setDuration(Toast.LENGTH_SHORT);\n        mToast.show();\n    }", "comment": "/*\n     * Toast.\n     */"}}
{"code": {"body": "    public static <T> T newInstance(Class<T> c) throws ReflectionException {\n        try {\n            return c.newInstance();\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new ReflectionException(\"\" + c.getName(), e);\n        }\n    }", "comment": "/**\n     * Creates a new instance of the class represented by the supplied Class.\n     */"}}
{"code": {"body": "    public static Field[] getDeclaredFields(Class c) {\n        java.lang.reflect.Field[] fields = c.getDeclaredFields();\n        Field[] result = new Field[fields.length];\n        for (int i = 0, j = fields.length; i < j; i++) {\n            result[i] = new Field(fields[i]);\n        }\n        return result;\n    }", "comment": "/**\n     * Returns an array of {@link Field} objects reflecting all the fields declared by the supplied class.\n     */"}}
{"code": {"body": "    public static boolean isAnnotationPresent(Class c, Class<? extends java.lang.annotation.Annotation> annotationType) {\n        return c.isAnnotationPresent(annotationType);\n    }", "comment": "/**\n     * Returns true if the supplied class includes an annotation of the given class type.\n     */"}}
{"code": {"body": "public KnownListSystem() {\n        super(KnownListNode.class);\n    }", "comment": "/**\n     * Updates known list for the given node\n     *\n     * @param knownListNode node\n     */"}}
{"code": {"body": "    protected void processNode(KnownListNode knownListNode, float deltaTime) {\n        updateKnownList(knownListNode);\n    }", "comment": "/**\n     * Updates known list for the given node\n     *\n     * @param knownListNode node\n     */"}}
{"code": {"body": "    public void updateKnownList(KnownListNode knownListNode) {\n        removeUnknownNodes(knownListNode);\n        addKnownNodes(knownListNode);\n    }", "comment": "/**\n     * Updates known list for the given node\n     *\n     * @param knownListNode node\n     */"}}
{"code": {"body": "    public void clearKnownList(KnownListNode knownListNode) {\n        NodeList<PositionNode> knownNodes = knownListNode.getKnownList().knownNodes;\n        for (int i = knownNodes.size() - 1; i >= 0; i--) {\n            PositionNode positionNode = knownNodes.get(i);\n            knownNodes.remove(i);\n            event(KnownListListener.class).dispatch().onKnownNodeRemoved(knownListNode, positionNode);\n            sendDespawnPacket(knownListNode, positionNode);\n        }\n    }", "comment": "/**\n     * Clears known list for the given node\n     *\n     * @param knownListNode node\n     */"}}
{"code": {"body": "    public static void main(String[] args) {\n        \n        test();\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    }", "comment": "/**\n     * @param args the command line arguments\n     */"}}
{"code": {"body": "\tprivate static void inputPhoneNumbersAndPrint(VanityFinder vf) {\n\t\tString line = null;\n\t\tScanner sc = new Scanner(System.in);\n\t\tdo {\n\t\t\tprint(\"\");\n\t\t\tline = sc.nextLine();\n\t\t\tif (!\"\".equals(line) && line.trim().length() > 0) {\n\t\t\t\ttry {\n\t\t\t\t\tList<String> al = vf.findMatch(line);\n\t\t\t\t\tif (al != null && al.size() > 0) {\n\t\t\t\t\t\tprint(al);\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException ne) {\n\t\t\t\t\tSystem.err\n\t\t\t\t\t\t\t.println(\"\");\n\t\t\t\t}\n\t\t\t}\n\t\t} while (!\"\".equals(line));\n\t\tsc.close();\n\n\t}", "comment": "/*\n\t * read the phone numbers from console and output the matching vanity words.\n\t */"}}
{"code": {"body": "\tprivate static void readPhoneNumbersAndPrint(String phoneNumbersFileName,\n\t\t\tVanityFinder vf) throws Exception {\n\t\tString line;\n\t\tFileInputStream fis = new FileInputStream(phoneNumbersFileName);\n\t\tInputStreamReader isr = new InputStreamReader(fis);\n\t\tBufferedReader br = new BufferedReader(isr);\n\t\tline = br.readLine();\n\t\twhile (line != null) {\n\t\t\tif (line.trim().length() > 0) {\n\t\t\t\ttry {\n\t\t\t\t\tList<String> al = vf.findMatch(line);\n\t\t\t\t\tSystem.out.println(line);\n\t\t\t\t\tif (al != null && al.size() > 0) {\n\t\t\t\t\t\tprint(al);\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException ne) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tline = br.readLine();\n\t\t}\n\t\tfis.close();\n\n\t}", "comment": "/*\n\t * read the phone numbers from a file and display matching output.\n\t */"}}
{"code": {"body": "    public static void main(String[] args) throws Exception {\n        \n        CNelsonP1 objectIO = new CNelsonP1();\n        \n        ArrayList<RandomVehicles> vehicles = new ArrayList<>(10); \n        \n        for (int i = 0; i < 10; i++) {\n            RandomVehicles randVehicle = new RandomVehicles();\n            vehicles.add(randVehicle);\n            \n        }\n         objectIO.WriteObjectToFile(vehicles); \n         \n        if (args.length == 0) \n        {\n            System.out.println(\n                    \"\" \n                    + File.pathSeparator\n                    + \"\");\n            return;\n        } else {\n            System.out.println(\"\" + args[0]);\n            SimpleDataSource.init(args[0]);\n        }\n        \n        Connection conn = SimpleDataSource.getConnection();\n        Statement stat = conn.createStatement();\n        try {\n            stat.execute(\"\");\n        } catch (Exception e) {\n            System.out.println(\"\");\n        }\n\n        try {\n            \n            stat.execute(\"\");\n            \n            for (int i = 0; i < 10; i++) {\n                stat.execute(\"\"\n                        + vehicles.get(i).getRandMake() + \"\"\n                        + vehicles.get(i).getRandSize() + \"\"\n                        + vehicles.get(i).getRandWeight() + \"\"\n                        + vehicles.get(i).getRandEngineSize() + \"\"\n                        + vehicles.get(i).getRandIsImport() + \"\"\n                        + \"\");\n            }\n            \n\n            \n            \n            ResultSet result = stat.executeQuery(\"\");\n            \n            ResultSet result2 = stat.executeQuery(\"\");\n            \n            ResultSet result3 = stat.executeQuery(\"\");\n           \n            \n            System.out.println(\"\");\n            \n\n            ResultSetMetaData rsm = result.getMetaData();\n            int cols = rsm.getColumnCount();\n            while (result.next()) {\n                for (int i = 1; i <= cols; i++) {\n                    System.out.print(result.getString(i) + \"\");\n                }\n                System.out.println(\"\");\n            }\n            try {\n                stat.execute(\"\");\n            } catch (Exception e) {\n                System.out.println(\"\");\n            }\n        } finally {\n            conn.close();\n            System.out.println(\"\");\n        }\n    }", "comment": "/*\n            System.out.println(\"Vehicle \" + (i + 1) + \" \"\n                    + randVehicle.getRandMake() + \" \"\n                    + randVehicle.getRandSize() + \" \"\n                    + randVehicle.getRandEngineSize() + \" \"\n                    + randVehicle.getRandWeight() + \" \"\n                    + randVehicle.getRandIsImport()\n                    + \"\\n\");\n            */"}}
{"code": {"body": "public IntentIntegrator(Activity activity) {\n        this.activity = activity;\n        this.fragment = null;\n        initializeConfiguration();\n    }", "comment": "/**\n     * @param activity {@link Activity} invoking the integration\n     */"}}
{"code": {"body": "public IntentIntegrator(Fragment fragment) {\n        this.activity = fragment.getActivity();\n        this.fragment = fragment;\n        initializeConfiguration();\n    }", "comment": "/**\n     * @param fragment {@link Fragment} invoking the integration.\n     *  {@link #startActivityForResult(Intent, int)} will be called on the {@link Fragment} instead\n     *  of an {@link Activity}\n     */"}}
{"code": {"body": "    public final AlertDialog initiateScan(Collection<String> desiredBarcodeFormats, int cameraId) {\n        Intent intentScan = new Intent(BS_PACKAGE + \"\");\n        intentScan.addCategory(Intent.CATEGORY_DEFAULT);\n\n        \n        if (desiredBarcodeFormats != null) {\n            \n            StringBuilder joinedByComma = new StringBuilder();\n            for (String format : desiredBarcodeFormats) {\n                if (joinedByComma.length() > 0) {\n                    joinedByComma.append('');\n                }\n                joinedByComma.append(format);\n            }\n            intentScan.putExtra(\"\", joinedByComma.toString());\n        }\n\n        \n        if (cameraId >= 0) {\n            intentScan.putExtra(\"\", cameraId);\n        }\n\n        String targetAppPackage = findTargetAppPackage(intentScan);\n        if (targetAppPackage == null) {\n            return showDownloadDialog();\n        }\n        intentScan.setPackage(targetAppPackage);\n        intentScan.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n        intentScan.addFlags(FLAG_NEW_DOC);\n        attachMoreExtras(intentScan);\n        startActivityForResult(intentScan, REQUEST_CODE);\n        return null;\n    }", "comment": "/**\n     * Initiates a scan, using the specified camera, only for a certain set of barcode types, given as strings corresponding\n     * to their names in ZXing's {@code BarcodeFormat} class like \"UPC_A\". You can supply constants\n     * like {@link #PRODUCT_CODE_TYPES} for example.\n     *\n     * @param desiredBarcodeFormats names of {@code BarcodeFormat}s to scan for\n     * @param cameraId camera ID of the camera to use. A negative value means \"no preference\".\n     * @return the {@link AlertDialog} that was shown to the user prompting them to download the app\n     *   if a prompt was needed, or null otherwise\n     */"}}
{"code": {"body": "    protected void startActivityForResult(Intent intent, int code) {\n        if (fragment == null) {\n            activity.startActivityForResult(intent, code);\n        } else {\n            fragment.startActivityForResult(intent, code);\n        }\n    }", "comment": "/**\n     * Start an activity. This method is defined to allow different methods of activity starting for\n     * newer versions of Android and for compatibility library.\n     *\n     * @param intent Intent to start.\n     * @param code Request code for the activity\n     * @see Activity#startActivityForResult(Intent, int)\n     * @see Fragment#startActivityForResult(Intent, int)\n     */"}}
{"code": {"body": "    public static IntentResult parseActivityResult(int requestCode, int resultCode, Intent intent) {\n        if (requestCode == REQUEST_CODE) {\n            if (resultCode == Activity.RESULT_OK) {\n                String contents = intent.getStringExtra(\"\");\n                String formatName = intent.getStringExtra(\"\");\n                byte[] rawBytes = intent.getByteArrayExtra(\"\");\n                int intentOrientation = intent.getIntExtra(\"\", Integer.MIN_VALUE);\n                Integer orientation = intentOrientation == Integer.MIN_VALUE ? null : intentOrientation;\n                String errorCorrectionLevel = intent.getStringExtra(\"\");\n                byte[] byteSegments0 = intent.getByteArrayExtra(\"\");\n                return new IntentResult(contents,\n                        formatName,\n                        rawBytes,\n                        orientation,\n                        errorCorrectionLevel,\n                        byteSegments0);\n            }\n            return new IntentResult();\n        }\n        return null;\n    }", "comment": "/**\n     * <p>Call this from your {@link Activity}'s\n     * {@link Activity#onActivityResult(int, int, Intent)} method.</p>\n     *\n     * @param requestCode request code from {@code onActivityResult()}\n     * @param resultCode result code from {@code onActivityResult()}\n     * @param intent {@link Intent} from {@code onActivityResult()}\n     * @return null if the event handled here was not related to this class, or\n     *  else an {@link IntentResult} containing the result of the scan. If the user cancelled scanning,\n     *  the fields will be null.\n     */"}}
{"code": {"body": "    public final AlertDialog shareText(CharSequence text, CharSequence type) {\n        Intent intent = new Intent();\n        intent.addCategory(Intent.CATEGORY_DEFAULT);\n        intent.setAction(BS_PACKAGE + \"\");\n        intent.putExtra(\"\", type);\n        intent.putExtra(\"\", text);\n        String targetAppPackage = findTargetAppPackage(intent);\n        if (targetAppPackage == null) {\n            return showDownloadDialog();\n        }\n        intent.setPackage(targetAppPackage);\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n        intent.addFlags(FLAG_NEW_DOC);\n        attachMoreExtras(intent);\n        if (fragment == null) {\n            activity.startActivity(intent);\n        } else {\n            fragment.startActivity(intent);\n        }\n        return null;\n    }", "comment": "/**\n     * Shares the given text by encoding it as a barcode, such that another user can\n     * scan the text off the screen of the device.\n     *\n     * @param text the text string to encode as a barcode\n     * @param type type of data to encode. See {@code com.google.zxing.client.android.Contents.Type} constants.\n     * @return the {@link AlertDialog} that was shown to the user prompting them to download the app\n     *   if a prompt was needed, or null otherwise\n     */"}}
{"code": {"body": "public AspectRatio inverse() {\n        \n        return AspectRatio.of(mY, mX);\n    }", "comment": "/**\n     * @return The inverse of this {@link AspectRatio}.\n     */"}}
{"code": {"body": "    public static AspectRatio of(int x, int y) {\n        int gcd = gcd(x, y);\n        x /= gcd;\n        y /= gcd;\n        SparseArrayCompat<AspectRatio> arrayX = sCache.get(x);\n        if (arrayX == null) {\n            AspectRatio ratio = new AspectRatio(x, y);\n            arrayX = new SparseArrayCompat<>();\n            arrayX.put(y, ratio);\n            sCache.put(x, arrayX);\n            return ratio;\n        } else {\n            AspectRatio ratio = arrayX.get(y);\n            if (ratio == null) {\n                ratio = new AspectRatio(x, y);\n                arrayX.put(y, ratio);\n            }\n            return ratio;\n        }\n    }", "comment": "/**\n     * Returns an instance of {@link AspectRatio} specified by {@code x} and {@code y} values.\n     * The values {@code x} and {@code} will be reduced by their greatest common divider.\n     *\n     * @param x The width\n     * @param y The height\n     * @return An instance of {@link AspectRatio}\n     */"}}
{"code": {"body": "    public static AspectRatio parse(String s) {\n        int position = s.indexOf('');\n        if (position == -1) {\n            throw new IllegalArgumentException(\"\" + s);\n        }\n        try {\n            int x = Integer.parseInt(s.substring(0, position));\n            int y = Integer.parseInt(s.substring(position + 1));\n            return AspectRatio.of(x, y);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"\" + s, e);\n        }\n    }", "comment": "/**\n     * Parse an {@link AspectRatio} from a {@link String} formatted like \"4:3\".\n     *\n     * @param s The string representation of the aspect ratio\n     * @return The aspect ratio\n     * @throws IllegalArgumentException when the format is incorrect.\n     */"}}
{"code": {"body": "    public AspectRatio inverse() {\n        \n        return AspectRatio.of(mY, mX);\n    }", "comment": "/**\n     * @return The inverse of this {@link AspectRatio}.\n     */"}}
{"code": {"body": "    static ArrayList<ContentItem> getSampleContent() {\n        ArrayList<ContentItem> items = new ArrayList<ContentItem>();\n\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_IMAGE, \"\"));\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_TEXT, R.string.quote_1));\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_TEXT, R.string.quote_2));\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_IMAGE, \"\"));\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_TEXT, R.string.quote_3));\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_IMAGE, \"\"));\n\n        return items;\n    }", "comment": "/**\n     * @return An ArrayList of ContentItem's to be displayed in this sample\n     */"}}
{"code": {"body": "    public static void main(String[] args) {\n        \n        \n        \n        \n         \n        \n        \n        try {\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n                if (\"\".equals(info.getName())) {\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                    break;\n                }\n            }\n        } catch (ClassNotFoundException ex) {\n            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (InstantiationException ex) {\n            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (IllegalAccessException ex) {\n            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        }\n        \n\n        \n        java.awt.EventQueue.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                XMLHandler.InitXMLHandler(1, \"\", \"\", \"\", 20, 1200);\n                try {\n                    new MainFrame().setVisible(true);\n                } catch (Exception ex) {\n                    Logger.getLogger(AcTiV.class.getName()).log(Level.SEVERE, null, ex);\n                }\n            }\n        });\n    }", "comment": "/*\n        try {\n            UIManager.setLookAndFeel(\"com.seaglasslookandfeel.SeaGlassLookAndFeel\");\n            //UIManager.getSystemLookAndFeelClassName()\n        }\n        catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {\n            System.out.println(\"Error setting Liquid LAF: \" + e);\n        }\n                */"}}
{"code": {"body": "\tpublic void start(BundleContext context) throws Exception {\n\t\tsuper.start(context);\n\t\tplugin = this;\n\t}", "comment": "/*\n\t * (non-Javadoc)\n\t * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n\t */"}}
{"code": {"body": "\tpublic void stop(BundleContext context) throws Exception {\n\t\tplugin = null;\n\t\tsuper.stop(context);\n\t}", "comment": "/*\n\t * (non-Javadoc)\n\t * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n\t */"}}
{"code": {"body": "\tpublic static Activator getDefault() {\n\t\treturn plugin;\n\t}", "comment": "/**\n\t * Returns the shared instance\n\t *\n\t * @return the shared instance\n\t */"}}
{"code": {"body": "  public String getClassName() {\n    return className;\n  }", "comment": "/**\n   * Returns the name of the class this exception is related to.\n   */"}}
{"code": {"body": "    protected void processRequest(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"\");\n        try (PrintWriter out = response.getWriter()) {\n            \n            out.println(\"\");\n            out.println(\"\");\n            out.println(\"\");\n            out.println(\"\");            \n            out.println(\"\");\n            out.println(\"\");\n            out.println(\"\" + request.getContextPath() + \"\");\n            out.println(\"\");\n            out.println(\"\");\n        }\n    }", "comment": "/**\n     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>\n     * methods.\n     *\n     * @param request servlet request\n     * @param response servlet response\n     * @throws ServletException if a servlet-specific error occurs\n     * @throws IOException if an I/O error occurs\n     */"}}
{"code": {"body": "      public void paint(Graphics g) {\n\n      int age   = 0;\n      String myString = px(age);\n      \n\n      \n      \n      g.setColor(Color.red);\n      g.drawString(myString, 20, 20);\n\n   }", "comment": "/* public static void main(String[] args){\n               Actuariat act= new Actuariat();\n                Sheet theSheet = act.dataTable(\"/home/user/Bureau/prototype/TD88-90.xlsx\");\n                System.out.println(act.px());\n            }*/"}}
{"code": {"body": "\tpublic static void taima1() throws ParseException {\n\t\tfinal Timer timer = new Timer(false);\n\t\tTimerTask task = new TimerTask() {\n\t\t\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tpluskaunnto();\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t};\n\t\ttimer.schedule(task, 0, 10);\n\t}", "comment": "/*public static void taima2() throws ParseException {\n\t\tfinal Timer timer = new Timer(false);\n\t\tTimerTask task = new TimerTask() {\n\t\tint caunto = 0;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tcaunto++;\n\t\t\t\tif (caunto == 2) {\n\t\t\t\ttaima1();\n\t\t\t\tpluskaunnto();\n\t\t\t\t//System.out.println(\"taima2\");\n\t\t\t\ttimer.cancel();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\ttimer.schedule(task, 0, 10);\n\t}*/"}}
{"code": {"body": "\t\t\tpublic void run() {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tpluskaunnto();\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t}", "comment": "/*public static void taima2() throws ParseException {\n\t\tfinal Timer timer = new Timer(false);\n\t\tTimerTask task = new TimerTask() {\n\t\tint caunto = 0;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tcaunto++;\n\t\t\t\tif (caunto == 2) {\n\t\t\t\ttaima1();\n\t\t\t\tpluskaunnto();\n\t\t\t\t//System.out.println(\"taima2\");\n\t\t\t\ttimer.cancel();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\ttimer.schedule(task, 0, 10);\n\t}*/"}}
{"code": {"body": "\tpublic static void pluskaunnto() {\n\t\tif (Minecraft.getMinecraft().thePlayer == null || Minecraft.getMinecraft().theWorld == null || Minecraft.getMinecraft().objectMouseOver == null) return;\n\t\t MovingObjectPosition mop = Minecraft.getMinecraft().objectMouseOver;\n\t\t if (mop.typeOfHit == MovingObjectPosition.MovingObjectType.ENTITY) {\n\t\t\t if (tesutei < 100) tesutei = tesutei + 1;\n\t\t } else {\n\t\t\t if (tesutei > 0) tesutei = tesutei - 1;\n\t\t }\n\t}", "comment": "/*public static void taima2() throws ParseException {\n\t\tfinal Timer timer = new Timer(false);\n\t\tTimerTask task = new TimerTask() {\n\t\tint caunto = 0;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tcaunto++;\n\t\t\t\tif (caunto == 2) {\n\t\t\t\ttaima1();\n\t\t\t\tpluskaunnto();\n\t\t\t\t//System.out.println(\"taima2\");\n\t\t\t\ttimer.cancel();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\ttimer.schedule(task, 0, 10);\n\t}*/"}}
{"code": {"body": "\tpublic static void karakodokousinn() {\n\t\tif (tesutei >= 40) karakodo1 = \"\";\n\t\telse if (tesutei >= 20) karakodo1 = \"\";\n\t\telse if (tesutei > 0) karakodo1 = \"\";\n\t\telse if (tesutei == 0) karakodo1 = \"\";\n\t\thyouzitesutei = tesutei;\n\t}", "comment": "/*public static void kousinn2() throws ParseException {\n\t\tfinal Timer timer = new Timer(false);\n\t\tTimerTask task = new TimerTask() {\n\t\tint caunto = 0;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tcaunto++;\n\t\t\t\tif (caunto == 2) {\n\t\t\t\t\tkousinn1();\n\t\t\t\t\tkarakodokousinn();\n\t\t\t\t\ttimer.cancel();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\ttimer.schedule(task, 0, 200);\n\t}*/"}}
{"code": {"body": "public AdBlockersDetector(Context c)", "comment": "/**\n     * @param c c can be null, in this case the method using package name is not used.\n     */"}}
{"code": {"body": "    public boolean detectAdBlockers()\n    {\n        return detectAdBlockers((Info)null);\n    }", "comment": "/**\n     * Synchronous ad-blockers detection\n     * This is blocking and should be called in a separated thread.\n     * In Android activities, prefer the asynchronous version.\n     * @return true if an adblocker is detected\n     */"}}
{"code": {"body": "    private boolean httpAlmostNoContent(String url)\n    {\n        try\n        {\n            final HttpURLConnection c = (HttpURLConnection)new URL(url).openConnection();\n            final int responseCode = c.getResponseCode();\n            if(200 <= responseCode && responseCode <= 399)\n            {\n            \tfinal InputStream in = c.getInputStream();\n            \tfinal boolean r = in.read(new byte[8]) < 4;\n            \tin.close();\n            \treturn r;\n            }\n        }\n        catch(IOException exception)\n        {\n        }\n        return false;\n    }", "comment": "/**\n     * Return true if the content of url is < 4 bytes.\n     * @param url\n     * @return true if content < 4, false if content >= 4 or url unreachable\n     */"}}
{"code": {"body": "    public CustomAdapterConfig loadConfig(Path configPath){\n        InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(configPath.toString());\n        if (in == null){\n            try\n            {\n                LOG.debug(\"\"+ configPath +\"\");\n                in = new FileInputStream(configPath.toFile());\n            }\n            catch (FileNotFoundException e)\n            {\n                LOG.error(\"\" + configPath, e);\n            }\n        }\n        try\n        {\n            JAXBContext jc = JAXBContext.newInstance(CustomAdapterConfig.class.getPackage().getName());\n            generatedConfig = (CustomAdapterConfig) jc.createUnmarshaller().unmarshal(in);\n            LOG.info(\"\"+configPath+\"\");\n        }\n        catch (JAXBException jaxbExc)\n        {\n            LOG.error(\"\" + configPath + \"\", jaxbExc);\n            AdapterCore.shutDown(172);\n        }\n        return generatedConfig;\n    }", "comment": "/**\n     * Method loadConfig will try to load configuration from jar file resources or external file\n     * In case of binding error application is terminated.\n     * ConfigFile.xml is bounded with XSD schema for generated classes @see CustomAdapterConfig\n     *\n     * @param configPath relative or absolute path to file in Path format\n     *\n     * @return CustomAdapterConfig instance of generated classes\n     */"}}
{"code": {"body": "public DBManager(String archivoBD) throws Exception {\n        this.archivoBD = archivoBD;\n        try {\n            this.conectar();\n            this.cerrar();\n        } catch (Exception e) {\n            throw new Exception(\"\");\n        }\n    }", "comment": "/**\n     * Constructor: DBManager(String archivoBD)\n     *\n     * @param archivoBD\n     */"}}
{"code": {"body": "    public String getArchivoBD() {\n        return archivoBD;\n    }", "comment": "/**\n     * ************* GETTERS AND SETTERS *****************\n     */"}}
{"code": {"body": "    public void conectar() throws ClassNotFoundException, SQLException {\n        \n        Class.forName(\"\");\n\n        \n        conn = DriverManager.getConnection(\"\" + archivoBD);\n    }", "comment": "/**\n     * M\u00e9todo para hacer la conexi\u00f3n con la BD\n     *\n     * @throws ClassNotFoundException\n     * @throws SQLException\n     */"}}
{"code": {"body": "    public void cerrar() throws SQLException {\n        conn.close();\n    }", "comment": "/**\n     * M\u00e9todo para cerrar la conexi\u00f3n con la BD\n     *\n     * @throws SQLException\n     */"}}
{"code": {"body": "    public boolean ejecutarInsercion(String sql) throws SQLException {\n        Statement st = conn.createStatement();\n        int res = st.executeUpdate(sql);\n        st.close();\n        return res == 1;\n    }", "comment": "/**\n     * M\u00e9todo que ejecuta una sentencia sql (INSERT, UPDATE, DELETE)\n     *\n     * @param sql\n     * @return\n     * @throws SQLException\n     */"}}
{"code": {"body": "    public List<Moto> realizarConsulta(String sql) throws SQLException {\n        List<Moto> lista = new ArrayList<>();\n        Statement st = conn.createStatement();\n        ResultSet rs = st.executeQuery(sql);\n\n        while (rs.next()) {\n            String mar = rs.getString(\"\");\n            String mod = rs.getString(\"\");\n            int cil = rs.getInt(\"\");\n            double pot = rs.getDouble(\"\");\n            int cili = rs.getInt(\"\");\n            String ref = rs.getString(\"\");\n            double pre = rs.getDouble(\"\");\n            String ima = rs.getString(\"\");\n\n            lista.add(new Moto(mar, mod, cil, pot, cili, ref, pre, ima));\n        }\n        st.close();\n\n        return lista;\n    }", "comment": "/**\n     * M\u00e9todo que realiza una consulta a la BD (SELECT)\n     *\n     * @param sql\n     * @return\n     * @throws SQLException\n     */"}}
{"code": {"body": "    public DefaultListModel listarTablas() throws SQLException {\n        DefaultListModel lista = new DefaultListModel();\n        \n        Statement st = conn.createStatement();\n        ResultSet rs = st.executeQuery(\"\");\n\n        while (rs.next()) {\n            String nombre = rs.getString(\"\");\n            lista.addElement(nombre);\n        }\n        st.close();\n        return lista;\n    }", "comment": "/**\n     * M\u00e9tdoo para listar las tablas de la base de datos\n     *\n     * @return\n     * @throws SQLException\n     */"}}
{"code": {"body": "    public List<Object[]> listarCampos(String nombreTabla) throws SQLException {\n        List<Object[]> lista = new ArrayList<Object[]>();\n        Statement st = conn.createStatement();\n        ResultSet rs = st.executeQuery(\"\" + nombreTabla + \"\");\n\n        while (rs.next()) {\n            Object[] obj = new Object[4];\n            String nombre = rs.getString(\"\");\n            obj[0] = nombre;\n            obj[1] = rs.getString(\"\");\n            int notnull = rs.getInt(\"\");\n            obj[2] = (notnull == 0 ? \"\" : \"\");\n            int pk = rs.getInt(\"\");\n            obj[3] = (pk == 0 ? \"\" : \"\");\n            lista.add(obj);\n        }\n\n        return lista;\n    }", "comment": "/**\n     * M\u00e9todo para listar los campos de una tabla de la base de datos\n     *\n     * @param nombreTabla\n     * @return\n     * @throws SQLException\n     */"}}
{"code": {"body": "    public DefaultTableModel SelectFromTabla(String nombreTabla) throws SQLException {\n        DefaultTableModel lista = new DefaultTableModel();\n        Statement st = conn.createStatement();\n        ResultSet rs = st.executeQuery(\"\" + nombreTabla + \"\");\n\n        List<Object[]> campos = this.listarCampos(nombreTabla);\n        java.lang.Object[] colIdentifiers = new java.lang.Object[campos.size()];\n        for (int i = 0; i < campos.size(); i++) {\n            Object[] c = campos.get(i);\n            colIdentifiers[i] = c[0].toString();\n        };\n        lista.setColumnIdentifiers(colIdentifiers);\n        while (rs.next()) {\n            Object[] obj = new Object[campos.size()];\n            for (int i = 0; i < campos.size(); i++) {\n                Object[] campito = campos.get(i);\n                obj[i] = rs.getString(String.valueOf(campito[0]));\n            }\n            lista.addRow(obj);\n        }\n\n        return lista;\n    }", "comment": "/**\n     * M\u00e9todo para hacer una select * from tabla\n     *\n     * @param nombreTabla\n     * @return\n     * @throws SQLException\n     */"}}
{"code": {"body": "    public DefaultTableModel SelectFromTablaPersonalizado(String nombreTabla, String camposSql) throws SQLException {\n        DefaultTableModel lista = new DefaultTableModel();\n        Statement st = conn.createStatement();\n        ResultSet rs = st.executeQuery(\"\" + camposSql + \"\" + nombreTabla + \"\");\n\n        List<Object[]> campos = this.listarCampos(nombreTabla);\n        java.lang.Object[] colIdentifiers = new java.lang.Object[campos.size()];\n        for (int i = 0; i < campos.size(); i++) {\n            Object[] c = campos.get(i);\n            colIdentifiers[i] = c[0].toString();\n        };\n        lista.setColumnIdentifiers(colIdentifiers);\n        while (rs.next()) {\n            Object[] obj = new Object[campos.size()];\n            for (int i = 0; i < campos.size(); i++) {\n                Object[] campito = campos.get(i);\n                obj[i] = rs.getString(String.valueOf(campito[0]));\n            }\n            lista.addRow(obj);\n        }\n\n        return lista;\n    }", "comment": "/**\n     * M\u00e9todo para listar los campos de una tabla de la base de datos\n     *\n     * @param nombreTabla\n     * @return\n     * @throws SQLException\n     */"}}
{"code": {"body": "    public DefaultTableModel SelectSqlFromTabla(String sql) throws SQLException {\n        sql = sql.toUpperCase();\n\n        DefaultTableModel lista = new DefaultTableModel();\n        Statement st = conn.createStatement();\n        ResultSet rs = st.executeQuery(sql);\n\n        String nombreTabla = sql.substring(sql.indexOf(\"\") + 6);\n        if (nombreTabla.contains(\"\")) {\n            nombreTabla = nombreTabla.substring(0, nombreTabla.indexOf(\"\"));\n        }       \n        List<Object[]> campos;\n        java.lang.Object[] colIdentifiers;\n\n        if (sql.startsWith(\"\")) {\n            campos = this.listarCampos(nombreTabla);\n\n        } else {\n            String aux = sql.substring(sql.indexOf(\"\") + 1, sql.indexOf(\"\"));\n            String[] datos = aux.split((\"\"));\n            campos = new ArrayList<Object[]>();\n            for (String d : datos) {\n                campos.add(new Object[]{d.trim()});\n            }\n        }\n\n        colIdentifiers = new java.lang.Object[campos.size()];\n\n        for (int i = 0; i < campos.size(); i++) {\n            Object[] c = campos.get(i);\n            colIdentifiers[i] = c[0].toString();\n        };\n        lista.setColumnIdentifiers(colIdentifiers);\n        while (rs.next()) {\n            Object[] obj = new Object[campos.size()];\n            for (int i = 0; i < campos.size(); i++) {\n                Object[] campito = campos.get(i);\n                obj[i] = rs.getString(String.valueOf(campito[0]));\n            }\n            lista.addRow(obj);\n        }\n\n        return lista;\n    }", "comment": "/**\n     * M\u00e9todo para listar los campos de una tabla de la base de datos\n     *\n     * @param sql\n     * @return\n     * @throws SQLException\n     */"}}
{"code": {"body": "\tpublic static void main(String[] args) throws DocumentException, MalformedURLException, IOException {\n\t\t\n      \n\t\t   File file = new File(DEST);\n\t        file.getParentFile().mkdirs();\n\t        new MyMain().manipulatePdf1(SRC, DEST,0,0,0);\n\t        \n\t    }", "comment": "/* PdfReader reader1 = new PdfReader( \"c:\\\\Users\\\\zoltan.bihari\\\\mytest\\\\AddImgToPDF\\\\testPDF.pdf\");\n\t\t \n\t\tDocument document = new Document();\n        PdfWriter.getInstance(document, new FileOutputStream(new File(\"c:\\\\Users\\\\zoltan.bihari\\\\mytest\\\\AddImgToPDF\\\\testPDF.pdf\")));\n        document.open();\n      /*  Image img1 = Image.getInstance(\"beatag.png\");\n        img1.scaleAbsolute(50f, 50f);\n        document.add(img1);*/"}}
{"code": {"body": "\tprotected void init(VaadinRequest request) {\n\t\tinitLayout();\n\t\tinitContactList();\n\t\tinitEditor();\n\t\tinitSearch();\n\t\tinitAddRemoveButtons();\n\n\t\t\n\t\tcontactList.setId(\"\");\n\t\tsearchField.setId(\"\");\n\t\taddNewContactButton.setId(\"\");\n\t\tremoveContactButton.setId(\"\");\n\t}", "comment": "/*\n\t * After UI class is created, init() is executed. You should build and wire\n\t * up your user interface here.\n\t */"}}
{"code": {"body": "\tprivate void initLayout() {\n\n\t\t\n\t\tHorizontalSplitPanel splitPanel = new HorizontalSplitPanel();\n\t\tsetContent(splitPanel);\n\n\t\t\n\t\tVerticalLayout leftLayout = new VerticalLayout();\n\t\tsplitPanel.addComponent(leftLayout);\n\t\tsplitPanel.addComponent(editorLayout);\n\t\tleftLayout.addComponent(contactList);\n\t\tHorizontalLayout bottomLeftLayout = new HorizontalLayout();\n\t\tleftLayout.addComponent(bottomLeftLayout);\n\t\tbottomLeftLayout.addComponent(searchField);\n\t\tbottomLeftLayout.addComponent(addNewContactButton);\n\n\t\t\n\t\tleftLayout.setSizeFull();\n\n\t\t\n\t\tleftLayout.setExpandRatio(contactList, 1);\n\t\tcontactList.setSizeFull();\n\n\t\t\n\t\tbottomLeftLayout.setWidth(\"\");\n\t\tsearchField.setWidth(\"\");\n\t\tbottomLeftLayout.setExpandRatio(searchField, 1);\n\n\t\t\n\t\teditorLayout.setMargin(true);\n\t\teditorLayout.setVisible(false);\n\t}", "comment": "/*\n\t * In this example layouts are programmed in Java. You may choose use a\n\t * visual editor, CSS or HTML templates for layout instead.\n\t */"}}
{"code": {"body": "\tprivate static IndexedContainer createDummyDatasource() {\n\t\tIndexedContainer ic = new IndexedContainer();\n\n\t\tfor (String p : fieldNames) {\n\t\t\tic.addContainerProperty(p, String.class, \"\");\n\t\t}\n\n\t\t\n\t\tString[] fnames = { \"\", \"\", \"\", \"\", \"\",\n\t\t\t\t\"\", \"\", \"\", \"\", \"\", \"\", \"\",\n\t\t\t\t\"\", \"\" };\n\t\tString[] lnames = { \"\", \"\", \"\", \"\", \"\",\n\t\t\t\t\"\", \"\", \"\", \"\", \"\", \"\",\n\t\t\t\t\"\", \"\", \"\", \"\" };\n\n\t\t\n\t\tRandom rnd = new Random(1L);\n\t\tfor (int i = 0; i < 1000; i++) {\n\t\t\tObject id = ic.addItem();\n\t\t\tic.getContainerProperty(id, FNAME).setValue(\n\t\t\t\t\tfnames[rnd.nextInt(fnames.length)]);\n\t\t\tic.getContainerProperty(id, LNAME).setValue(\n\t\t\t\t\tlnames[rnd.nextInt(lnames.length)]);\n\t\t}\n\n\t\treturn ic;\n\t}", "comment": "/*\n\t * Generate some in-memory example data to play with. In a real application\n\t * we could be using SQLContainer, JPAContainer or some other to persist the\n\t * data.\n\t */"}}
{"code": {"body": "\t\tpublic String read( String param ) {\n\t\t\treturn param;\n\t\t}", "comment": "/* List: http://www.baeldung.com/hamcrest-collections-arrays\n\t\tcontains : same order, same size\n\t\tcontainsInAnyOrder : same order\n\t\thasItems : any order, different size\n\t\t*/"}}
{"code": {"body": "\t@BeforeClass public static void setUpBeforeClass() throws Exception {\n\t}", "comment": "/* List: http://www.baeldung.com/hamcrest-collections-arrays\n\t\tcontains : same order, same size\n\t\tcontainsInAnyOrder : same order\n\t\thasItems : any order, different size\n\t\t*/"}}
{"code": {"body": "\t@Before public void setUp() throws Exception {\n\t}", "comment": "/* List: http://www.baeldung.com/hamcrest-collections-arrays\n\t\tcontains : same order, same size\n\t\tcontainsInAnyOrder : same order\n\t\thasItems : any order, different size\n\t\t*/"}}
{"code": {"body": "\t@After public void tearDown() {\n\t}", "comment": "/* List: http://www.baeldung.com/hamcrest-collections-arrays\n\t\tcontains : same order, same size\n\t\tcontainsInAnyOrder : same order\n\t\thasItems : any order, different size\n\t\t*/"}}
{"code": {"body": "\t@Test public void whatever() throws Exception {\n\t\tToMock mocked\t= Mockito.mock( ToMock.class );\n\n\t\t\n\t\tMockito.when( mocked.read( \"\" ) )\n\t\t\t.thenThrow(new RuntimeException())\n\t\t\t.thenReturn(\"\")\n\t\t;\n\n\t\tInOrder inOrder = Mockito.inOrder( mocked );\n\t\tinOrder.verify( mocked, times(1) ).read( \"\" );\n\t\tinOrder.verify( mocked, times(1) ).read( \"\" );\n\n\t\t\n\t\tList<String> collection = Arrays.asList(\"\", \"\", \"\");\n\t\tassertThat(collection, contains(\"\", \"\", \"\"));\n\t\tassertThat(collection, containsInAnyOrder(\"\", \"\", \"\"));\n\n\t\t\n\t\tMockito.doAnswer( new LogCall() ).when( mocked ).read( Mockito.anyString() );\t\t\n\n\t\t\n\t\tArgumentCaptor<String> strArg = ArgumentCaptor.forClass( String.class );\n\t\tMockito.verify( mocked ).read( strArg.capture() );\n\t\tassertThat( strArg.getValue(), equalTo( \"\" ) );\n\n\t}", "comment": "/* List: http://www.baeldung.com/hamcrest-collections-arrays\n\t\tcontains : same order, same size\n\t\tcontainsInAnyOrder : same order\n\t\thasItems : any order, different size\n\t\t*/"}}
{"code": {"body": "\tstatic String dumpJson( Object o ) {\n\t\tObjectMapper mapper = new ObjectMapper();\n    SimpleModule testModule = new SimpleModule(\"\", new Version(1, 0, 0, null));\n    testModule.addSerializer( ToMock.class,\n    \t\tnew JsonSerializer<ToMock>() {\n    \t\t\t@Override public void serialize( ToMock value, JsonGenerator jgen, SerializerProvider provider ) throws java.io.IOException, JsonProcessingException {\n    \t\t\t\tjgen.writeString( value.toString() );\n    \t\t\t}\n\t\t\t\t}\n  \t\t);\n    mapper.registerModule(testModule);\n    try {\n    \treturn mapper.writerWithDefaultPrettyPrinter().writeValueAsString( o );\n\t\t} catch ( Exception e ) {\n\t\t\tthrow new RuntimeException( \"\" + o );\n\t\t}\n\t}", "comment": "/** print large object as json */"}}
{"code": {"body": "    protected User getUser(Player player) {\n        User user = users.get(player.getUniqueId());\n        if (user == null) {\n            user = new User(player.getUniqueId());\n            users.put(player.getUniqueId(), user);\n        }\n        return user;\n    }", "comment": "/*@Override\n     public List<String> onTabComplete(CommandSender sender, Command cmd,\n     String alias, String[] args) {\n     List<String> matches = new LinkedList<String>();\n     return matches;\n     }*/"}}
{"code": {"body": "    public WorldGroup getWorldGroupByName(String name) {\n        for (WorldGroup worldGroup : worldGroups) {\n            if (name.equals(worldGroup.getName())) {\n                return worldGroup;\n            }\n        }\n        return null;\n    }", "comment": "/**\n     * Returns the WorldGroup associated with the given name.\n     *\n     * @param name The name of the WorldGroup to search for\n     * @return The WorldGroup associated with the given name\n     */"}}
{"code": {"body": "    public WorldGroup getWorldGroupByWorld(String world) {\n        for (WorldGroup worldGroup : worldGroups) {\n            if (worldGroup.isMember(world)) {\n                return worldGroup;\n            }\n        }\n        return null;\n    }", "comment": "/**\n     * Returns the WorldGroup containing the world with the given name.\n     *\n     * @param world The name of the world to search for\n     * @return The WorldGroup containing the word with the given name\n     */"}}
{"code": {"body": "    public boolean isWorldGroup(String name) {\n        for (WorldGroup world : worldGroups) {\n            if (name.equals(world.getName())) {\n                return true;\n            }\n        }\n        return false;\n    }", "comment": "/**\n     * Returns true if a WorldGroup with the given name exists.\n     *\n     * @param name The name of the WorldGroup to check for existence\n     * @return true if a WorldGroup with the given name exists\n     */"}}
{"code": {"body": "    public boolean isInWorldGroup(String world) {\n        for (WorldGroup worldGroup : worldGroups) {\n            if (worldGroup.isMember(world)) {\n                return true;\n            }\n        }\n        return false;\n    }", "comment": "/**\n     * Returns whether or not the world with the given name is already in a\n     * WorldGroup.\n     *\n     * @param world The name of the world to check for in WorldGroups\n     * @return true if the world with the given name is already in a WorldGroup\n     */"}}
{"code": {"body": "    public boolean saveSnapshot(User user, String name, Player player,\n                                boolean overwrite) {\n        Snapshot snap;\n        if (overwrite) {\n            snap = user.getSnapshot(name, player.getWorld().getName());\n            if (snap == null) {\n                return false;\n            }\n        } else {\n            if (user.hasSnapshot(name, player.getWorld().getName())) {\n                return false;\n            }\n            snap = user.addSnapshot(name);\n            snap.setWorld(player.getWorld().getName());\n            snap.setVisibility(Visibility.PRIVATE);\n        }\n        if (name.equals(\"\") || name.equals(\"\")) {\n            snap.setVisibility(isInWorldGroup(snap.getWorld()) ? Visibility.GROUPED : Visibility.PRIVATE);\n        }\n        if (name.equals(\"\")) {\n            snap.setVisibility(Visibility.GLOBAL);\n        }\n        snap.setInv(player.getInventory().getContents(), player.getInventory().getArmorContents());\n        snap.setGameMode(player.getGameMode());\n        snap.setExp(player.getExp());\n        snap.setLevel(player.getLevel());\n        snap.setExhaustion(player.getExhaustion());\n        snap.setFoodLevel(player.getFoodLevel());\n        snap.setSaturation(player.getSaturation());\n        if (vault) {\n            snap.setBalance(econ.getBalance(player.getName()));\n        }\n        return true;\n    }", "comment": "/**\n     * Saves a Snapshot to RAM.\n     *\n     * @param user      The User to save the Snapshot to\n     * @param name      The name the Snapshot will be saved as\n     * @param player    The Player saving the Snapshot\n     * @param overwrite If true then overwrite the existing Snapshot with the\n     *                  given name, if there is one\n     * @return true if the Snapshot was saved.\n     */"}}
{"code": {"body": "    public boolean revertSnapshot(User user, Player player) {\n        Snapshot snap = user.revertSnapshot();\n        if (snap == null) {\n            return false;\n        }\n        loadSnapshot(player, snap);\n        return true;\n    }", "comment": "/**\n     * Reverts the Snapshot for the given User and Player.\n     *\n     * @param user   The User associated with the Player\n     * @param player The Player to have their Snapshot reverted\n     * @return true if the Snapshot was reverted\n     */"}}
{"code": {"body": "public ChatPane(GUIController ctr) {\n\t\tsuper( ctr );\n\t\t\n\t\t\n\t\tuserData = control.getUserInfo();\n\t\tif (userData == null) {\t\n\t\t\tuserData = GamePreferences.DUMMYUSER;\t\n\t\t}\n\t\tteam = Integer.parseInt(userData[4]);\n\t\tusername = userData[0];\n\t\tavatarS = userData[3];\n\t\t\n\n\t\tglobal_chat = new ChatTextPane(-1);\n\t\tteam_chat = new ChatTextPane(team);\n\t\tavatar = new JLabel();\n\t\ttxtbox = new JTextField();\n\t\t\n\t\t\n\t\taddComponentListener( this );\n\t\taddMouseListener(this);\n\t\taddMouseMotionListener(this);\n\t\t\n\t\t\n\t\ttab = new JTabbedPane();\n\t\ttab.setOpaque( false );\n\t\ttab.setVisible(true);\n\t\t\n\t\ttab.add( \"\" , global_chat );\n\t\ttab.add( \"\" , team_chat );\n\t\t\n\t\t\n\t\tadd( avatar );\n\t\tadd( tab );\n\t\tadd( txtbox );\n\t}", "comment": "/**\n\t * \n\t */"}}
{"code": {"body": "public GodotAdMob(Activity p_activity) {\n\t\tregisterClass(\"\", new String[] {\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\n\t\t\t\"\", \"\", \"\", \"\", \"\", \"\",\n\t\t\t\n\t\t\t\"\", \"\",\n\t\t\t\n\t\t\t\"\", \"\"\n\t\t});\n\t\tactivity = p_activity;\n\t}", "comment": "/**\n\t * Constructor\n\t * @param Activity Main activity\n\t */"}}
{"code": {"body": "\tpublic View onMainCreateView(Activity activity) {\n\t\tlayout = new FrameLayout(activity);\n\t\treturn layout;\n\t}", "comment": "/* Init\n\t * ********************************************************************** */"}}
{"code": {"body": "\tpublic void init(boolean isReal, int instance_id) {\n\t\tthis.initWithContentRating(isReal, instance_id, false, \"\");\n\t}", "comment": "/**\n\t * Prepare for work with AdMob\n\t * @param boolean isReal Tell if the enviroment is for real or test\n\t * @param int gdscript instance id\n\t */"}}
{"code": {"body": "\tpublic void initWithContentRating(boolean isReal, int instance_id, boolean isForChildDirectedTreatment, String maxAdContentRating)\n\t{\n\t\tthis.isReal = isReal;\n\t\tthis.instance_id = instance_id;\n\t\tthis.isForChildDirectedTreatment = isForChildDirectedTreatment;\n\t\tthis.maxAdContentRating = maxAdContentRating;\n\t\tif (maxAdContentRating != null && maxAdContentRating != \"\")\n\t\t{\n\t\t\textras = new Bundle();\n\t\t\textras.putString(\"\", maxAdContentRating);\n\t\t}\n\t\tLog.d(\"\", \"\");\n\t}", "comment": "/**\n\t * Init with content rating additional options \n\t * @param boolean isReal Tell if the enviroment is for real or test\n\t * @param int gdscript instance id\n\t * @param boolean isForChildDirectedTreatment\n\t * @param String maxAdContentRating must be \"G\", \"PG\", \"T\" or \"MA\"\n\t */"}}
{"code": {"body": "\tprivate AdRequest getAdRequest()\n\t{\n\t\tAdRequest.Builder adBuilder = new AdRequest.Builder();\n\t\tAdRequest adRequest;\n\t\tif (!this.isForChildDirectedTreatment && extras != null)\n\t\t{\n\t\t\tadBuilder.addNetworkExtrasBundle(AdMobAdapter.class, extras);\n\t\t}\n\t\tif (this.isForChildDirectedTreatment)\n\t\t{\n\t\t\tadBuilder.tagForChildDirectedTreatment(true);\n\t\t}\n\t\tif (!isReal) {\n\t\t\tadBuilder.addTestDevice(AdRequest.DEVICE_ID_EMULATOR);\n\t\t\tadBuilder.addTestDevice(getAdmobDeviceId());\n\t\t}\n\t\tadRequest = adBuilder.build();\n\t\treturn adRequest;\n\t}", "comment": "/**\n\t * Returns AdRequest object constructed considering the parameters set in constructor of this class.\n\t * @return AdRequest object\n\t */"}}
{"code": {"body": "\tprivate void initRewardedVideo()\n\t{\n\t\tactivity.runOnUiThread(new Runnable()\n\t\t{\n\t\t\t@Override public void run()\n\t\t\t{\n\t\t\t\tMobileAds.initialize(activity);\n\t\t\t\trewardedVideoAd = MobileAds.getRewardedVideoAdInstance(activity);\n\t\t\t\trewardedVideoAd.setRewardedVideoAdListener(new RewardedVideoAdListener()\n\t\t\t\t{\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onRewardedVideoAdLeftApplication() {\n\t\t\t\t\t\tLog.w(\"\", \"\");\n\t\t\t\t\t\tGodotLib.calldeferred(instance_id, \"\", new Object[] { });\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onRewardedVideoAdClosed() {\n\t\t\t\t\t\tLog.w(\"\", \"\");\n\t\t\t\t\t\tGodotLib.calldeferred(instance_id, \"\", new Object[] { });\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onRewardedVideoAdFailedToLoad(int errorCode) {\n\t\t\t\t\t\tLog.w(\"\", \"\" + errorCode);\n\t\t\t\t\t\tGodotLib.calldeferred(instance_id, \"\", new Object[] { errorCode });\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onRewardedVideoAdLoaded() {\n\t\t\t\t\t\tLog.w(\"\", \"\");\n\t\t\t\t\t\tGodotLib.calldeferred(instance_id, \"\", new Object[] { });\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onRewardedVideoAdOpened() {\n\t\t\t\t\t\tLog.w(\"\", \"\");\n\t\t\t\t\t\tGodotLib.calldeferred(instance_id, \"\", new Object[] { });\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onRewarded(RewardItem reward) {\n\t\t\t\t\t\tLog.w(\"\", \"\" + String.format(\"\", reward.getType(),\n\t\t\t\t\t\t\t\treward.getAmount()));\n\t\t\t\t\t\tGodotLib.calldeferred(instance_id, \"\", new Object[] { reward.getType(), reward.getAmount() });\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onRewardedVideoStarted() {\n\t\t\t\t\t\tLog.w(\"\", \"\");\n\t\t\t\t\t\tGodotLib.calldeferred(instance_id, \"\", new Object[] { });\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onRewardedVideoCompleted() {\n\t\t\t\t\t\tLog.w(\"\", \"\");\n\t\t\t\t\t\tGodotLib.calldeferred(instance_id, \"\", new Object[] { });\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}\n\t\t});\n\n\t}", "comment": "/* Rewarded Video\n\t * ********************************************************************** */"}}
{"code": {"body": "\tpublic void loadRewardedVideo(final String id) {\n\t\tactivity.runOnUiThread(new Runnable()\n\t\t{\n\t\t\t@Override public void run()\n\t\t\t{\n\t\t\t\tif (rewardedVideoAd == null) {\n\t\t\t\t\tinitRewardedVideo();\n\t\t\t\t}\n\n\t\t\t\trewardedVideoAd.loadAd(id, getAdRequest());\n\t\t\t}\n\t\t});\n\t}", "comment": "/**\n\t * Load a Rewarded Video\n\t * @param String id AdMod Rewarded video ID\n\t */"}}
{"code": {"body": "\tpublic void showRewardedVideo() {\n\t\tactivity.runOnUiThread(new Runnable()\n\t\t{\n\t\t\t@Override public void run()\n\t\t\t{\n\t\t\t\tif (rewardedVideoAd.isLoaded()) {\n\t\t\t\t\trewardedVideoAd.show();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}", "comment": "/**\n\t * Show a Rewarded Video\n\t */"}}
{"code": {"body": "\tpublic void loadBanner(final String id, final boolean isOnTop)\n\t{\n\t\tactivity.runOnUiThread(new Runnable()\n\t\t{\n\t\t\t@Override public void run()\n\t\t\t{\n\t\t\t\tadParams = new FrameLayout.LayoutParams(\n\t\t\t\t\tFrameLayout.LayoutParams.MATCH_PARENT,\n\t\t\t\t\tFrameLayout.LayoutParams.WRAP_CONTENT\n\t\t\t\t);\n\t\t\t\tif(isOnTop) adParams.gravity = Gravity.TOP;\n\t\t\t\telse adParams.gravity = Gravity.BOTTOM;\n\n\t\t\t\tif (adView != null)\n\t\t\t\t{\n\t\t\t\t\tlayout.removeView(adView); \n\t\t\t\t}\n\n\t\t\t\tadView = new AdView(activity);\n\t\t\t\tadView.setAdUnitId(id);\n\n\t\t\t\tadView.setBackgroundColor(Color.TRANSPARENT);\n\n\t\t\t\tadView.setAdSize(AdSize.SMART_BANNER);\n\t\t\t\tadView.setAdListener(new AdListener()\n\t\t\t\t{\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onAdLoaded() {\n\t\t\t\t\t\tLog.w(\"\", \"\");\n\t\t\t\t\t\tGodotLib.calldeferred(instance_id, \"\", new Object[]{ });\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onAdFailedToLoad(int errorCode)\n\t\t\t\t\t{\n\t\t\t\t\t\tLog.w(\"\", \"\" + errorCode);\n\t\t\t\t\t\tGodotLib.calldeferred(instance_id, \"\", new Object[] { errorCode });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tlayout.addView(adView, adParams);\n\n\t\t\t\t\n\t\t\t\tadView.loadAd(getAdRequest());\n\t\t\t}\n\t\t});\n\t}", "comment": "/**\n\t * Load a banner\n\t * @param String id AdMod Banner ID\n\t * @param boolean isOnTop To made the banner top or bottom\n\t */"}}
{"code": {"body": "\tpublic void showBanner()\n\t{\n\t\tactivity.runOnUiThread(new Runnable()\n\t\t{\n\t\t\t@Override public void run()\n\t\t\t{\n\t\t\t\tif (adView.getVisibility() == View.VISIBLE) return;\n\t\t\t\tadView.setVisibility(View.VISIBLE);\n\t\t\t\tadView.resume();\n\t\t\t\tLog.d(\"\", \"\");\n\t\t\t}\n\t\t});\n\t}", "comment": "/**\n\t * Show the banner\n\t */"}}
{"code": {"body": "\tpublic void resize()\n\t{\n\t\tactivity.runOnUiThread(new Runnable()\n\t\t{\n\t\t\t@Override public void run()\n\t\t\t{\n\t\t\t\tif (layout == null || adView == null || adParams == null)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlayout.removeView(adView); \n\n\t\t\t\t\n\n\t\t\t\tint gravity = adParams.gravity;\n\t\t\t\tadParams = new FrameLayout.LayoutParams(\n\t\t\t\t\tFrameLayout.LayoutParams.MATCH_PARENT,\n\t\t\t\t\tFrameLayout.LayoutParams.WRAP_CONTENT\n\t\t\t\t);\n\t\t\t\tadParams.gravity = gravity;\n\t\t\t\tAdListener adListener = adView.getAdListener();\n\t\t\t\tString id = adView.getAdUnitId();\n\n\t\t\t\t\n\t\t\t\tadView = new AdView(activity);\n\t\t\t\tadView.setAdUnitId(id);\n\t\t\t\tadView.setBackgroundColor(Color.TRANSPARENT);\n\t\t\t\tadView.setAdSize(AdSize.SMART_BANNER);\n\t\t\t\tadView.setAdListener(adListener);\n\n\t\t\t\t\n\t\t\t\tlayout.addView(adView, adParams);\n\n\t\t\t\t\n\t\t\t\tadView.loadAd(getAdRequest());\n\n\t\t\t\tLog.d(\"\", \"\");\n\t\t\t}\n\t\t});\n\t}", "comment": "/**\n\t * Resize the banner\n\t *\n\t */"}}
{"code": {"body": "\tpublic void hideBanner()\n\t{\n\t\tactivity.runOnUiThread(new Runnable()\n\t\t{\n\t\t\t@Override public void run()\n\t\t\t{\n\t\t\t\tif (adView.getVisibility() == View.GONE) return;\n\t\t\t\tadView.setVisibility(View.GONE);\n\t\t\t\tadView.pause();\n\t\t\t\tLog.d(\"\", \"\");\n\t\t\t}\n\t\t});\n\t}", "comment": "/**\n\t * Hide the banner\n\t */"}}
{"code": {"body": "\tpublic int getBannerWidth()\n\t{\n\t\treturn AdSize.SMART_BANNER.getWidthInPixels(activity);\n\t}", "comment": "/**\n\t * Get the banner width\n\t * @return int Banner width\n\t */"}}
{"code": {"body": "\tpublic int getBannerHeight()\n\t{\n\t\treturn AdSize.SMART_BANNER.getHeightInPixels(activity);\n\t}", "comment": "/**\n\t * Get the banner height\n\t * @return int Banner height\n\t */"}}
{"code": {"body": "\tpublic void loadInterstitial(final String id)\n\t{\n\t\tactivity.runOnUiThread(new Runnable()\n\t\t{\n\t\t\t@Override public void run()\n\t\t\t{\n\t\t\t\tinterstitialAd = new InterstitialAd(activity);\n\t\t\t\tinterstitialAd.setAdUnitId(id);\n\t\t        interstitialAd.setAdListener(new AdListener()\n\t\t\t\t{\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onAdLoaded() {\n\t\t\t\t\t\tLog.w(\"\", \"\");\n\t\t\t\t\t\tGodotLib.calldeferred(instance_id, \"\", new Object[] { });\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onAdFailedToLoad(int errorCode) {\n\t\t\t\t\t\tLog.w(\"\", \"\" + Integer.toString(errorCode));\n\t\t\t\t\t\tGodotLib.calldeferred(instance_id, \"\", new Object[] { errorCode });\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onAdOpened() {\n\t\t\t\t\t\tLog.w(\"\", \"\");\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onAdLeftApplication() {\n\t\t\t\t\t\tLog.w(\"\", \"\");\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onAdClosed() {\n\t\t\t\t\t\tGodotLib.calldeferred(instance_id, \"\", new Object[] { });\n\t\t\t\t\t\tinterstitialAd.loadAd(getAdRequest());\n\t\t\t\t\t\tLog.w(\"\", \"\");\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tinterstitialAd.loadAd(getAdRequest());\n\t\t\t}\n\t\t});\n\t}", "comment": "/**\n\t * Load a interstitial\n\t * @param String id AdMod Interstitial ID\n\t */"}}
{"code": {"body": "\tpublic void showInterstitial()\n\t{\n\t\tactivity.runOnUiThread(new Runnable()\n\t\t{\n\t\t\t@Override public void run()\n\t\t\t{\n\t\t\t\tif (interstitialAd.isLoaded()) {\n\t\t\t\t\tinterstitialAd.show();\n\t\t\t\t} else {\n\t\t\t\t\tLog.w(\"\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}", "comment": "/**\n\t * Show the interstitial\n\t */"}}
{"code": {"body": "\tprivate String md5(final String s)\n\t{\n\t\ttry {\n\t\t\t\n\t\t\tMessageDigest digest = MessageDigest.getInstance(\"\");\n\t\t\tdigest.update(s.getBytes());\n\t\t\tbyte messageDigest[] = digest.digest();\n\n\t\t\t\n\t\t\tStringBuffer hexString = new StringBuffer();\n\t\t\tfor (int i=0; i<messageDigest.length; i++) {\n\t\t\t\tString h = Integer.toHexString(0xFF & messageDigest[i]);\n\t\t\t\twhile (h.length() < 2) h = \"\" + h;\n\t\t\t\thexString.append(h);\n\t\t\t}\n\t\t\treturn hexString.toString();\n\t\t} catch(NoSuchAlgorithmException e) {\n\t\t\t\n\t\t}\n\t\treturn \"\";\n\t}", "comment": "/**\n\t * Generate MD5 for the deviceID\n\t * @param String s The string to generate de MD5\n\t * @return String The MD5 generated\n\t */"}}
{"code": {"body": "\tprivate String getAdmobDeviceId()\n\t{\n\t\tString android_id = Settings.Secure.getString(activity.getContentResolver(), Settings.Secure.ANDROID_ID);\n\t\tString deviceId = md5(android_id).toUpperCase(Locale.US);\n\t\treturn deviceId;\n\t}", "comment": "/**\n\t * Get the Device ID for AdMob\n\t * @return String Device ID\n\t */"}}
{"code": {"body": " \tstatic public Godot.SingletonBase initialize(Activity activity)\n \t{\n \t\treturn new GodotAdMob(activity);\n \t}", "comment": "/**\n\t * Initilization Singleton\n\t * @param Activity The main activity\n\t */"}}
{"code": {"body": "  public static void registerWith(PluginRegistry.Registrar registrar) {\n    final AdmobConsentPlugin instance = new AdmobConsentPlugin();\n    instance.onAttachedToEngine(registrar.activity(), registrar.messenger());\n  }", "comment": "/** Plugin registration. */"}}
{"code": {"body": "    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_auth);\n\n        auth = FirebaseAuth.getInstance();\n        user = auth.getCurrentUser();\n\n        anonymousSignInBtn = findViewById(R.id.anonymousSignInBtn);\n        signInBtn = findViewById(R.id.authPickerBtn);\n        progressBar = findViewById(R.id.auth_progress_bar);\n        container = getWindow().getDecorView();\n\n        anonymousSignInBtn.setOnClickListener(onAnonymousSigninBtnClicked);\n        signInBtn.setOnClickListener(onSignInClicked);\n\n        progressBar.bringToFront(); \n    }", "comment": "/* credentials */"}}
{"code": {"body": "    protected void onStart() {\n        super.onStart();\n\n        authStateListener = firebaseAuth -> {\n            user = firebaseAuth.getCurrentUser();\n            if (user != null) updateUI(user);\n            else configAuthButtons(true);\n        };\n    }", "comment": "/* credentials */"}}
{"code": {"body": "    public void anonymousSignIn() {\n        List<AuthUI.IdpConfig> providers = getSelectedProviders();\n        AuthUI.getInstance().silentSignIn(this, providers)\n                .addOnCompleteListener(this, task -> {\n                    if (!task.isSuccessful()) {\n                        \n                        FirebaseAuth.getInstance().signInAnonymously();\n                        return;\n                    }\n                    \n                    sendResponse(getString(R.string.auth_activity_verification_email_not_sent_string));\n                });\n    }", "comment": "/* credentials */"}}
{"code": {"body": "    protected void onResume() {\n        super.onResume();\n        auth.addAuthStateListener(authStateListener);\n    }", "comment": "/* credentials */"}}
{"code": {"body": "    protected void onPause() {\n        super.onPause();\n        auth.removeAuthStateListener(authStateListener);\n    }", "comment": "/* credentials */"}}
{"code": {"body": "    public void updateUI(@NonNull FirebaseUser firebaseUser) {\n        saveUserInformation(firebaseUser);\n\n        if (!firebaseUser.isEmailVerified())\n            sendEmailVerification(firebaseUser); \n\n        intentService();\n    }", "comment": "/* credentials */"}}
{"code": {"body": "    private void intentService() {\n        startActivity(new Intent(this, MainActivity.class));\n        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);\n        killActivity();\n    }", "comment": "/* credentials */"}}
{"code": {"body": "    private void configAuthButtons(boolean active) {\n        setEnabled(signInBtn, active);\n        setEnabled(anonymousSignInBtn, active);\n        setVisibility(progressBar, !active);\n    }", "comment": "/* credentials */"}}
{"code": {"body": "    private void killActivity() {\n        finish();\n    }", "comment": "/* credentials */"}}
{"code": {"body": "    private List<AuthUI.IdpConfig> getSelectedProviders() {\n        AuthUI.IdpConfig emailIdp = new AuthUI.IdpConfig.EmailBuilder()\n                .setRequireName(true)\n                .build();\n\n        AuthUI.IdpConfig googleIdp = new AuthUI.IdpConfig.GoogleBuilder()\n                .setScopes(Arrays.asList(Scopes.PROFILE, Scopes.EMAIL))\n                .build();\n\n        AuthUI.IdpConfig facebookIdp = new AuthUI.IdpConfig.FacebookBuilder() \n                .setPermissions(Arrays.asList(USER_EMAIL_PERMISSION, USER_PROFILE_PERMISSION))\n                .build();\n\n        AuthUI.IdpConfig guestIdp = new AuthUI.IdpConfig.AnonymousBuilder()\n                .build();\n\n        return Arrays.asList(\n                guestIdp,\n                emailIdp,\n                googleIdp,\n                facebookIdp\n        );\n    }", "comment": "/* credentials */"}}
{"code": {"body": "    private void showSignInMethods() {\n        \n        \n        \n        AuthMethodPickerLayout customLayout = new AuthMethodPickerLayout \n                .Builder(R.layout.fragment_login)\n                .setEmailButtonId(R.id.email_signin_btn)\n                .setGoogleButtonId(R.id.google_signIn_btn)\n                .setFacebookButtonId(R.id.facebook_signIn_btn)\n                .setAnonymousButtonId(R.id.guest_signin_btn)\n                .setTosAndPrivacyPolicyId(R.id.email_tos_and_pp_text)\n                .build();\n\n        startActivityForResult(\n                AuthUI.getInstance()\n                        .createSignInIntentBuilder()\n                        .setLogo(R.drawable.logo)\n                        .setTheme(R.style.AuthPickerTheme)\n                        .setIsSmartLockEnabled(!BuildConfig.DEBUG , true)\n                        .setAuthMethodPickerLayout(customLayout)\n                        .setAvailableProviders(getSelectedProviders())\n                        .enableAnonymousUsersAutoUpgrade()\n                        .setTosAndPrivacyPolicyUrls(TOS, PP)\n                        .build(),\n                RC_SIGN_IN\n        );\n    }", "comment": "/* credentials */"}}
{"code": {"body": "    public static void main(String[] args) {\n        String str = \"\";\n        System.out.println(\"\" + str);\n        System.out.println(\"\");\n        printStrRecursion(str);\n        System.out.println(\"\");\n        printStrIteration(str);\n    }", "comment": "/**\n     * \u9012\u5f52\u7684\u6253\u5370\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\n     */"}}
{"code": {"body": "    static void printStrRecursion(String str) {\n        if (str.length() == 1) {\n            System.out.println(str);\n        } else {\n            System.out.println(str.charAt(0));\n            printStrRecursion(str.substring(1));\n        }\n    }", "comment": "/**\n     * \u9012\u5f52\u7684\u6253\u5370\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\n     */"}}
{"code": {"body": "    static void printStrIteration(String str) {\n        for (int i = 0; i < str.length(); i++) {\n            System.out.println(str.charAt(i));\n        }\n    }", "comment": "/**\n     * \u8fed\u4ee3\u7684\u6253\u5370\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\n     */"}}
{"code": {"body": "    public void add(T value) {\n       \n    }", "comment": "/* implementation not shown */"}}
{"code": {"body": "    private boolean isValidBST(TreeNode<T> node) {\n        return node == null || ((node.getLeft() == null || node.getLeft().getValue().compareTo(node.getValue()) < 0) && (node.getRight() == null || node.getRight().getValue().compareTo(node.getValue()) > 0) && isValidBST(node.getLeft()) && isValidBST(node.getRight()));\n    }", "comment": "/**\n     *  Checks for the following criteria:\n     *    - All values in the left subtree are less than the value of node\n     *    - All values in the right subtree are greater than the value of node\n     **/"}}
{"code": {"body": "\tpublic static void main(String[] args) {\n\t\t\n\t\t\n\t\tString Driver=\"\";\n\t\tString url=\"\";\n\t\tString password= \"\";\n\t\tString userid=\"\";\n\t\t\n\t\t\n\t\t\t try {\n\t\t\t\t Class.forName(Driver);\n\t\t\t\t \n\t\t\t\t Connection con = DriverManager.getConnection(url, userid, password);\n\t\t\t\t Statement oensconnections = con.createStatement();\n\t\t\n\t\t\t\t oensconnections.execute(\"\");\n\t\t\t\t\n\t\t\t\t oensconnections.execute(\"\");\n\t\t           \n\t\t\t\t System.out.println(\"\");\n\t\t\t\t  \n\t\t\t\t con.close();\n\t\t           \n\t\t\t }catch(Exception e) {\n\t\t\t\t \n\t\t\t\t e.printStackTrace();\n\t\t\t }\n\t\t   }", "comment": "/**\n\t\t            * Create and select a database for use. \n\t\t            */"}}
{"code": {"body": "    public static FacebookClient getInstance() {\n        if (facebookClient == null) {\n            facebookClient = new DefaultFacebookClient(token);\n        }\n        \n        return facebookClient;\n    }", "comment": "/**\n     * retorna o Client criado de acordo com o token\n     */"}}
{"code": {"body": "    public static void main(String[] args) {\n        Box<Integer> integerBox = new Box<>();\n        integerBox.set(100);\n        System.out.println(\"\"+integerBox.get());\n    }", "comment": "/**\n * E - Element\n * K - Key\n * N - Number\n * T - Type\n * V - value\n * S,U,V etc - 2nd, 3rd , 4th types\n **/"}}
{"code": {"body": "    public static void main( String[] args )\n    {\n\n        displayAllGroups();\n\n        System.out.println(\"\");\n\n        displayStudentsAlphabetically();\n\n        System.out.println(\"\");\n\n        displayGroupWithMaxStudents();\n\n        System.out.println(\"\");\n\n        displayStudentsYoungerThan25();\n\n        System.out.println(\"\");\n\n        displayStudentsByTrainer();\n\n        System.out.println(\"\");\n\n        displayStudentsWithJavaKnowledge();\n\n        System.out.println(\"\");\n\n        displayGroupWithMaxStudentsWithNoJavaKnowledge();\n\n        System.out.println(\"\");\n\n        removeStudentsYoungerThan20FromGroups();\n\n    }", "comment": "/**\n             * Remember that Set is not sorted. In order for us to be able to sort we need a List\n             * So we copy the Set into a List and then sort it\n             */"}}
{"code": {"body": "    private static void displayAllGroups() {\n        System.out.println(\"\");\n\n        for(Group g: CentralRepository.getGroupList()) {\n            System.out.println(g);\n        }\n    }", "comment": "/**\n             * Remember that Set is not sorted. In order for us to be able to sort we need a List\n             * So we copy the Set into a List and then sort it\n             */"}}
{"code": {"body": "    private static void displayStudentsAlphabetically() {\n        System.out.println(\"\");\n\n\n        for(Group g: CentralRepository.getGroupList()) {\n            System.out.println(g.getName());\n\n            \n            List<Student> students = new ArrayList<>(g.getStudentList());\n            Collections.sort(students);\n\n            for(Student s : students) {\n                System.out.println(s);\n            }\n        }\n    }", "comment": "/**\n             * Remember that Set is not sorted. In order for us to be able to sort we need a List\n             * So we copy the Set into a List and then sort it\n             */"}}
{"code": {"body": "\tpublic static BundleContext getContext()\t{\n\t\treturn context;\n\t}", "comment": "/* (non-Javadoc)\n\t * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)\n\t */"}}
{"code": {"body": "\tstatic BundleContext getContext() {\n\t\treturn context;\n\t}", "comment": "/*\n\t * (non-Javadoc)\n\t * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)\n\t */"}}
{"code": {"body": "\tpublic void start(BundleContext bundleContext) throws Exception {\n\t\tActivator.context = bundleContext;\n\t}", "comment": "/*\n\t * (non-Javadoc)\n\t * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)\n\t */"}}
{"code": {"body": "\tpublic void stop(BundleContext bundleContext) throws Exception {\n\t\tActivator.context = null;\n\t}", "comment": "/*\n\t * (non-Javadoc)\n\t * @see org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)\n\t */"}}
{"code": {"body": "    private static int partOne() {\n        int frequency = 0;\n        File file = new File(INPUT_FILE_PATH);\n        try (Scanner sc = new Scanner(file)) {\n            while (sc.hasNextLine())\n                frequency += Integer.valueOf(sc.nextLine());\n        } catch (IOException e) {\n            System.out.println(\"\");\n        }\n        return frequency;\n    }", "comment": "/**\n     * --- Day 1: Chronal Calibration ---\n     * <p>\n     * \"We've detected some temporal anomalies,\" one of Santa's\n     * Elves at the Temporal Anomaly Research and Detection Instrument Station tells you. She\n     * sounded pretty worried when she called you down here. \"At 500-year intervals into the past,\n     * someone has been changing Santa's history!\"\n     * <p>\n     * \"The good news is that the changes won't propagate to our time stream for another 25 days,\n     * and we have a device\" - she attaches something to your wrist - \"that will let you fix the\n     * changes with no such propagation delay. It's configured to send you 500 years further into\n     * the past every few days; that was the best we could do on such short notice.\"\n     * <p>\n     * \"The bad news is that we are detecting roughly fifty anomalies throughout time; the device\n     * will indicate fixed anomalies with stars. The other bad news is that we only have one device\n     * and you're the best person for the job! Good lu--\" She taps a button on the device and you\n     * suddenly feel like you're falling. To save Christmas, you need to get all fifty stars by\n     * December 25th.\n     * <p>\n     * Collect stars by solving puzzles. Two puzzles will be made available on each day in the\n     * advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle\n     * grants one star. Good luck!\n     * <p>\n     * After feeling like you've been falling for a few timestampMins, you look at the device's tiny\n     * screen. \"Error: Device must be calibrated before first use. Frequency drift detected. Cannot\n     * maintain destination lock.\" Below the message, the device shows a sequence of changes in\n     * frequency (your puzzle input). A value like +6 means the current frequency increases by 6; a\n     * value like -3 means the current frequency decreases by 3.\n     * <p>\n     * For example, if the device displays frequency changes of +1, -2, +3, +1, then starting from a\n     * frequency of zero, the following changes would occur:\n     * <p>\n     * Current frequency  0, change of +1; resulting frequency  1.\n     * Current frequency  1, change of -2; resulting frequency -1.\n     * Current frequency -1, change of +3; resulting frequency  2.\n     * Current frequency  2, change of +1; resulting frequency  3.\n     * In this example, the resulting frequency is 3.\n     * <p>\n     * Here are other example situations:\n     * <p>\n     * +1, +1, +1 results in  3\n     * +1, +1, -2 results in  0\n     * -1, -2, -3 results in -6\n     * Starting with a frequency of zero, what is the resulting frequency after all of the changes\n     * in frequency have been applied?\n     */"}}
{"code": {"body": "    private static int partTwo() {\n        HashSet<Integer> frequencySet = new HashSet<>();\n        int frequency = 0;\n        int index = 0;\n        ArrayList<Integer> array = buildArrayFromFile();\n        while (true) {\n            if (index == array.size()) {\n                index = 0;\n            }\n            frequency += array.get(index);\n            if (frequencySet.contains(frequency)) {\n                return frequency;\n            } else {\n                frequencySet.add(frequency);\n            }\n            index++;\n        }\n    }", "comment": "/**\n     * You notice that the device repeats the same frequency change list over and over. To calibrate\n     * the device, you need to find the first frequency it reaches twice.\n     * <p>\n     * For example, using the same list of changes above, the device would loop as follows:\n     * <p>\n     * Current frequency  0, change of +1; resulting frequency  1.\n     * Current frequency  1, change of -2; resulting frequency -1.\n     * Current frequency -1, change of +3; resulting frequency  2.\n     * Current frequency  2, change of +1; resulting frequency  3. (At this point, the device\n     * continues from the start of the list.)\n     * Current frequency  3, change of +1; resulting frequency  4.\n     * Current frequency  4, change of -2; resulting frequency  2, which has already\n     * been seen.\n     * In this example, the first frequency reached twice is 2. Note that your device might need to\n     * repeat its list of frequency changes many times before a duplicate frequency is found, and\n     * that duplicates might be found while in the middle of processing the list.\n     * <p>\n     * Here are other examples:\n     * <p>\n     * +1, -1 first reaches 0 twice.\n     * +3, +3, +4, -2, -4 first reaches 10 twice.\n     * -6, +3, +8, +5, -6 first reaches 5 twice.\n     * +7, +7, -2, -7, -4 first reaches 14 twice.\n     * <p>\n     * What is the first frequency your device reaches twice?\n     */"}}
{"code": {"body": "    public static void main(String[] args) {\n        List<String> input = Arrays.asList(args);\n\n        \n        if (input.contains(\"\")) {\n            IGame game = new Game();\n            TextUI textUI = new TextUI(game);\n\n            if (!input.contains(\"\")) {\n                textUI.play();\n            } else {\n                textUI.play(args[0]);\n            }\n        }\n        \n        else {\n            launch();\n        }\n    }", "comment": "/**\n     * Metoda pro spu\u0161t\u011bn\u00ed cel\u00e9 aplikace.\n     *\n     * @param args parametry aplikace z p\u0159\u00edkazov\u00e9ho \u0159\u00e1dku\n     */"}}
{"code": {"body": "    public static void newGame(Stage primaryStage) throws IOException {\n        IGame game = new Game();\n\n        FXMLLoader loader = new FXMLLoader();\n        InputStream stream = Start.class.getClassLoader().getResourceAsStream(\"\");\n\n        Parent rootLayout = loader.load(stream);\n        Scene scene = new Scene(rootLayout);\n\n        primaryStage.setScene(scene);\n        primaryStage.setTitle(\"\");\n\n        MainController controller = loader.getController();\n        controller.init(primaryStage, game);\n\n        primaryStage.show();\n    }", "comment": "/**\n     * Metoda, kter\u00e1 nastavuje z\u00e1kladn\u00ed vlastnosti GUI hry.\n     * P\u0159es tuto metodu lze tak\u00e9 za\u010d\u00edt novou hru.\n     */"}}
{"code": {"body": "    public void loadUrl(String url) {\n        webview.loadUrl(url);\n    }", "comment": "/*\n        load url to webview\n     */"}}
{"code": {"body": "    public int dpToPx(int dp) {\n        DisplayMetrics displayMetrics = getResources().getDisplayMetrics();\n        return Math.round(dp * (displayMetrics.xdpi / DisplayMetrics.DENSITY_DEFAULT));\n    }", "comment": "/*\n    convert dp to pixel\n     */"}}
{"code": {"body": "    public int pxToDp(int px) {\n        DisplayMetrics displayMetrics = getResources().getDisplayMetrics();\n        return Math.round(px / (displayMetrics.xdpi / DisplayMetrics.DENSITY_DEFAULT));\n    }", "comment": "/*\n    convert pixel to dp\n     */"}}
{"code": {"body": "\t\tpublic void destroy() {\n\t\t\t\n\t\t}", "comment": "/**\n\t\t * called on replace - to allow to stop any activities.\n\t\t */"}}
{"code": {"body": "\tpublic static final String getGuidGeneratorName() {\n\t\treturn String.valueOf( Engine.GUID_GENERATOR );\n\t}", "comment": "/**\n\t * @return current guid generator name\n\t */"}}
{"code": {"body": "\tpublic static final String getRandGeneratorName() {\n\t\treturn String.valueOf( Engine.RAND_GENERATOR );\n\t}", "comment": "/**\n\t * @return current rand generator name\n\t */"}}
{"code": {"body": "\tpublic static final String getTimeRetrieverName() {\n\t\treturn String.valueOf( Engine.TIME_RETRIEVER );\n\t}", "comment": "/**\n\t * @return current time retriever name\n\t */"}}
{"code": {"body": "\tpublic void clear() {\n\t\txstrokes.clear();\n\t\tystrokes.clear();\n\t\tcurxvec = null;\n\t\tcuryvec = null;\n\t}", "comment": "/**\n\t * Clears the kanji strokes.\n\t */"}}
{"code": {"body": "\tpublic String analyzeKanji() throws IOException {\n\t\tint sc;\n\t\tList<Integer> minScores = new ArrayList<Integer>(); \n\t\t\n\t\tList<String> minChars = new ArrayList<String>();\n\t\tString curk;\n\t\tfinal BufferedReader in = getResource(xstrokes.size());\n\t\tif (in == null) {\n\t\t\t\n\t\t\treturn \"\";\n\t\t}\n\t\ttry {\n\t\t\tString line;\n\t\t\twhile (true) {\n\t\t\t\tline = in.readLine();\n\t\t\t\tString goline = \"\";\n\t\t\t\tif (line == null) {\n\t\t\t\t\tint sz;\n\t\t\t\t\tsz = minChars.size();\n\t\t\t\t\tchar[] kanj = new char[sz];\n\t\t\t\t\tint i;\n\t\t\t\t\tfor (i = 0; i < sz; i++) { \n\t\t\t\t\t\tString s;\n\t\t\t\t\t\ts = minChars.get(sz - i - 1);\n\t\t\t\t\t\tif (s.charAt(0) == '')\n\t\t\t\t\t\t\tkanj[i] = '';\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tint index;\n\t\t\t\t\t\t\tindex = s.indexOf('');\n\t\t\t\t\t\t\tif (index != -1)\n\t\t\t\t\t\t\t\ts = s.substring(0, index);\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tint hexcode;\n\t\t\t\t\t\t\t\thexcode = Integer.parseInt(s, 16);\n\t\t\t\t\t\t\t\tkanj[i] = (char) hexcode;\n\t\t\t\t\t\t\t} catch (Exception ez11) {\n\t\t\t\t\t\t\t\tkanj[i] = '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn new String(kanj);\n\t\t\t\t} else {\n\t\t\t\t\tif (line.length() == 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (line.charAt(0) == '')\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tint index;\n\t\t\t\t\tindex = line.indexOf('');\n\t\t\t\t\tif (index == -1)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tcurk = line.substring(0, index);\n\t\t\t\t\tline = line.substring(index + 1);\n\t\t\t\t\tString tokline;\n\t\t\t\t\tString argline;\n\t\t\t\t\tint tokindex = line.indexOf('');\n\t\t\t\t\tif (tokindex != -1) {\n\t\t\t\t\t\ttokline = line.substring(0, tokindex);\n\t\t\t\t\t\targline = line.substring(tokindex + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\targline = null;\n\t\t\t\t\t\ttokline = line;\n\t\t\t\t\t}\n\t\t\t\t\tStringTokenizer st = new StringTokenizer(tokline);\n\t\t\t\t\tif (st.countTokens() != xstrokes.size())\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tWhileLoop: while (st.hasMoreTokens()) {\n\t\t\t\t\t\tString tok = st.nextToken();\n\t\t\t\t\t\tint i;\n\t\t\t\t\t\tfor (i = 0; i < tok.length(); i++) {\n\t\t\t\t\t\t\tswitch (tok.charAt(i)) {\n\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\tgoline = goline + tok.charAt(i);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\tgoline = goline + \"\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\tgoline = goline + \"\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\tgoline = goline + \"\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\tgoline = goline + \"\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\tbreak WhileLoop;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow new IOException(\"\" + line);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgoline = goline + \"\";\n\t\t\t\t\t}\n\t\t\t\t\tint ns;\n\t\t\t\t\tif (minScores.size() < NUMKAN)\n\t\t\t\t\t\tns = getScore(goline, 999999);\n\t\t\t\t\telse {\n\t\t\t\t\t\tint cutoff1, cutoff2;\n\t\t\t\t\t\tcutoff1 = minScores.get(0);\n\t\t\t\t\t\tcutoff2 = minScores.get(minScores.size() - 1) * 2;\n\t\t\t\t\t\tns = getScore(goline, Math.min(cutoff1, cutoff2));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (argline != null) {\n\t\t\t\t\t\tst = new StringTokenizer(argline);\n\t\t\t\t\t\twhile (st.hasMoreTokens()) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tString tok = st.nextToken();\n\t\t\t\t\t\t\t\tint minindex;\n\t\t\t\t\t\t\t\tminindex = tok.indexOf(\"\");\n\t\t\t\t\t\t\t\tif (minindex == -1) {\n\t\t\t\t\t\t\t\t\tthrow new IOException(\"\");\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tString arg1, arg2;\n\t\t\t\t\t\t\t\targ1 = tok.substring(0, minindex);\n\t\t\t\t\t\t\t\targ2 = tok.substring(minindex + 1, tok.length());\n\t\t\t\t\t\t\t\tint arg1stroke, arg2stroke;\n\t\t\t\t\t\t\t\targ1stroke = Integer.parseInt(arg1.substring(1));\n\t\t\t\t\t\t\t\tboolean must = (arg2.charAt(arg2.length() - 1) == '');\n\t\t\t\t\t\t\t\tif (must)\n\t\t\t\t\t\t\t\t\targ2stroke = Integer.parseInt(arg2.substring(1, arg2.length() - 1));\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\targ2stroke = Integer.parseInt(arg2.substring(1));\n\n\t\t\t\t\t\t\t\tList<Integer> stroke1x, stroke1y, stroke2x, stroke2y;\n\t\t\t\t\t\t\t\tstroke1x = xstrokes.get(arg1stroke - 1);\n\t\t\t\t\t\t\t\tstroke1y = ystrokes.get(arg1stroke - 1);\n\t\t\t\t\t\t\t\tstroke2x = xstrokes.get(arg2stroke - 1);\n\t\t\t\t\t\t\t\tstroke2y = ystrokes.get(arg2stroke - 1);\n\n\t\t\t\t\t\t\t\tint val1, val2;\n\t\t\t\t\t\t\t\tswitch (arg1.charAt(0)) {\n\t\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\t\tval1 = stroke1x.get(0);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\t\tval1 = stroke1y.get(0);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\t\tval1 = stroke1x.get(stroke1x.size() - 1);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\t\tval1 = stroke1y.get(stroke1y.size() - 1);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\t\tval1 = ((stroke1x.get(0)) + (stroke1x.get(stroke1x.size() - 1))) / 2;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\t\tval1 = ((stroke1y.get(0)) + (stroke1y.get(stroke1y.size() - 1))) / 2;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\t\tint dx,\n\t\t\t\t\t\t\t\t\tdy;\n\t\t\t\t\t\t\t\t\tdx = (last(stroke1x)) - (stroke1x.get(0));\n\t\t\t\t\t\t\t\t\tdy = (last(stroke1y)) - (stroke1y.get(0));\n\t\t\t\t\t\t\t\t\tval1 = (int) (Math.sqrt((double) (dx * dx + dy * dy)));\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tthrow new IOException(\"\");\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tswitch (arg2.charAt(0)) {\n\t\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\t\tval2 = (stroke2x.get(0));\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\t\tval2 = (stroke2y.get(0));\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\t\tval2 = (last(stroke2x));\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\t\tval2 = (last(stroke2y));\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\t\tval2 = ((stroke2x.get(0)) + (last(stroke2x))) / 2;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\t\tval2 = ((stroke2y.get(0)) + (last(stroke2y))) / 2;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\t\t\tint dx,\n\t\t\t\t\t\t\t\t\tdy;\n\t\t\t\t\t\t\t\t\tdx = (last(stroke2x)) - (stroke2x.get(0));\n\t\t\t\t\t\t\t\t\tdy = (last(stroke2y)) - (stroke2y.get(0));\n\t\t\t\t\t\t\t\t\tval2 = (int) (Math.sqrt((double) (dx * dx + dy * dy)));\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tthrow new IOException(\"\");\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tns = ns - (val1 - val2);\n\t\t\t\t\t\t\t\tif (must && (val1 < val2))\n\t\t\t\t\t\t\t\t\tns += 9999999;\n\t\t\t\t\t\t\t} catch (Exception ez2) {\n\t\t\t\t\t\t\t\tthrow new RuntimeException(\"\", ez2);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tint size;\n\t\t\t\t\tsize = minScores.size();\n\t\t\t\t\tif ((size < NUMKAN) || (ns < minScores.get(0))) {\n\t\t\t\t\t\tif (size == 0) {\n\t\t\t\t\t\t\tminScores.add(ns);\n\t\t\t\t\t\t\tminChars.add(curk);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (ns <= (last(minScores))) {\n\t\t\t\t\t\t\t\tminScores.add(new Integer(ns));\n\t\t\t\t\t\t\t\tminChars.add(curk);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tint i = 0;\n\t\t\t\t\t\t\t\twhile ((minScores.get(i)) > ns)\n\t\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\tminScores.add(i, ns);\n\t\t\t\t\t\t\t\tminChars.add(i, curk);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsize = minScores.size();\n\t\t\t\t\tif (size > NUMKAN) {\n\t\t\t\t\t\tminScores.remove(0);\n\t\t\t\t\t\tminChars.remove(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} finally {\n\t\t\tcloseQuietly(in);\n\t\t}\n\t}", "comment": "/**\n\t * Performs analysis of the currently drawn kanji. Returns {@value #NUMKAN}\n\t * best matches.\n\t * \n\t * @return the best matches, ordered from best to worst match.\n\t */"}}
{"code": {"body": "public DictEntry(final String kanji, final String reading, final String english) {\n        this(kanji, reading, english, null);\n    }", "comment": "/**\n     * Creates new entry instance.\n     *\n     * @param kanji\n     *            the kanji expression, may be null if the entry does not\n     *            contain any kanji\n     * @param reading\n     *            the reading, in hiragana or katakana.\n     * @param english\n     *            the English translation\n     */"}}
{"code": {"body": "public DictEntry(final String kanji, final String reading, final String english, final Boolean isCommon) {\n        if (english == null) {\n            throw new IllegalArgumentException(\"\");\n        }\n        this.kanji = kanji;\n        this.reading = reading;\n        this.english = english;\n        this.isCommon = isCommon;\n    }", "comment": "/**\n     * Creates new entry instance.\n     *\n     * @param kanji\n     *            the kanji expression, may be null if the entry does not\n     *            contain any kanji\n     * @param reading\n     *            the reading, in hiragana or katakana.\n     * @param english\n     *            the English translation\n     * @param isCommon\n     *            if true then this word is a common one. null if not known.\n     */"}}
{"code": {"body": "    public final boolean isValid() {\n        return !MiscUtils.isBlank(kanji) || !MiscUtils.isBlank(reading);\n    }", "comment": "/**\n     * Checks if this entry is valid.\n     *\n     * @return true if it is valid (the kanji or the reading is not blank),\n     *         false otherwise.\n     */"}}
{"code": {"body": "    public static DictEntry newErrorMsg(final String errorMsg) {\n        return new DictEntry(null, null, errorMsg);\n    }", "comment": "/**\n     * Constructs an invalid entry with given error message.\n     *\n     * @param errorMsg\n     *            the error message\n     * @return invalid edict entry.\n     */"}}
{"code": {"body": "    private static String getStacktrace(Throwable ex) {\n        final StringWriter sw = new StringWriter();\n        final PrintWriter pw = new PrintWriter(sw);\n        ex.printStackTrace(pw);\n        pw.close();\n        return sw.toString();\n    }", "comment": "/**\n     * Returns stacktrace of given exception.\n     *\n     * @param ex\n     *            the exception\n     * @return stacktrace as string.\n     */"}}
{"code": {"body": "    public static Collection<? extends DictEntry> removeInvalid(final Collection<? extends DictEntry> edictEntries) {\n        for (final Iterator<? extends DictEntry> i = edictEntries.iterator(); i.hasNext();) {\n            if (!i.next().isValid()) {\n                i.remove();\n            }\n        }\n        return edictEntries;\n    }", "comment": "/**\n     * Removes invalid entries from given collection.\n     *\n     * @param edictEntries\n     *            a list of entries.\n     * @return edictEntries\n     */"}}
{"code": {"body": "    public String formatJapanese(final RomanizationEnum romanize) {\n        final ListBuilder t1 = new ListBuilder(\"\");\n        if (kanji != null) {\n            t1.add(kanji);\n        }\n        String reading = this.reading;\n        if (romanize != null && reading != null) {\n            reading = romanize.toRomaji(reading);\n        }\n        if (reading != null) {\n            t1.add(reading);\n        }\n        return t1.toString();\n    }", "comment": "/**\n     * Returns a formatted japanese contents, in the form of {@link #kanji} -\n     * {@link #reading}. The dash separator is omitted if one of {@link #kanji}\n     * or {@link #reading} is missing.\n     *\n     * @param romanize\n     *            if non-null then katakana/hiragana will be shown as romaji\n     *\n     * @return a formatted japanese contents.\n     */"}}
{"code": {"body": "    public final String getJapanese() {\n        return kanji != null ? kanji : reading;\n    }", "comment": "/**\n     * Returns japanese translation. Returns {@link #kanji} if available,\n     * {@link #reading} otherwise.\n     *\n     * @return a japanese translation, kanji or hiragana/katakana.\n     */"}}
{"code": {"body": "    public final int compareTo(DictEntry another) {\n        if (!isValid()) {\n            if (another.isValid()) {\n                return 1;\n            }\n            return english.compareTo(another.english);\n        }\n        if (!another.isValid()) {\n            return -1;\n        }\n        \n        int result = -isCommonNotNull().compareTo(another.isCommonNotNull());\n        if (result != 0) {\n            return result;\n        }\n        result = getJapanese().length() - another.getJapanese().length();\n        if (result != 0) {\n            return result;\n        }\n        result = getCommonality() - another.getCommonality();\n        if (result != 0) {\n            return result;\n        }\n        return getJapanese().compareTo(another.getJapanese());\n    }", "comment": "/**\n     * A comparator which imposes order upon an edict entry, according to the\n     * following rules:\n     * <ul>\n     * <li>Invalid entries are placed last,</li>\n     * <li>\n     * {@link DictEntry#isCommon common} words are preferred;</li>\n     * <li>next, shortest {@link DictEntry#getJapanese() japanese} words are\n     * preferred (as they usually are the best matches)</li>\n     * <li>next, more {@link KanjiUtils#getCommonality(String) common} word is\n     * preferred</li>\n     * <li>finally, {@link #getJapanese()} values are compared</li>\n     * </ul>\n     * @param another compare to this entry.\n     * @return see {@link Comparable} for details\n     */"}}
{"code": {"body": "    public static String getJapaneseWord(Collection<? extends DictEntry> entries) {\n        final StringBuilder sb = new StringBuilder(entries.size());\n        for (final DictEntry e : entries) {\n            sb.append(e.getJapanese());\n        }\n        return sb.toString();\n    }", "comment": "/**\n     * Returns a japanese word, formed as a concatenation of\n     * {@link DictEntry#getJapanese()} from all entries.\n     *\n     * @param entries\n     *            the list of entries\n     * @return the japanese word.\n     */"}}
{"code": {"body": "    public final String toExternal() {\n        return toEmpty(kanji) + \"\" + toEmpty(reading) + \"\" + toEmpty(english);\n    }", "comment": "/**\n     * Creates an external form of the entry.\n     *\n     * @return the external form, parsable by {@link #fromExternal(String)}.\n     */"}}
{"code": {"body": "    public static DictEntry fromExternal(final String external) {\n        final String[] contents = external.split(\"\");\n        if (contents.length < 3) {\n            throw new IllegalArgumentException(\"\" + external + \"\");\n        }\n        return new DictEntry(toNull(contents[0]), toNull(contents[1]), toNull(contents[2]));\n    }", "comment": "/**\n     * Parses the external form and creates back the Entry.\n     *\n     * @param external\n     *            the external form.\n     * @return the entry instance.\n     */"}}
{"code": {"body": "    public static String toExternalList(final List<? extends DictEntry> entries) {\n        final ListBuilder b = new ListBuilder(\"\");\n        for (final DictEntry entry : entries) {\n            b.add(entry.toExternal());\n        }\n        return b.toString();\n    }", "comment": "/**\n     * Converts a list of entries to an external form, parsable by {@link #fromExternalList(java.lang.String)}.\n     * @param entries the list of entries, not null\n     * @return external form.\n     */"}}
{"code": {"body": "    public static List<DictEntry> fromExternalList(final String external) {\n        final String items[] = external.split(\"\");\n        final List<DictEntry> result = new ArrayList<DictEntry>();\n        for (final String item : items) {\n            if (!MiscUtils.isBlank(item)) {\n                result.add(DictEntry.fromExternal(item));\n            }\n        }\n        return result;\n    }", "comment": "/**\n     * Converts an {@link #toExternalList(java.util.List) externalized list of entries} back to a list of entries.\n     * @param external the externalized form\n     * @return a list of entries.\n     */"}}
{"code": {"body": "    public final int getCommonality() {\n        if (commonality == -1) {\n            commonality = KanjiUtils.getCommonality(getJapanese());\n        }\n        return commonality;\n    }", "comment": "/**\n     * Computes commonality of this japanese entry, as per\n     * {@link KanjiUtils#getCommonality(String)}.\n     *\n     * @return the commonality.\n     */"}}
{"code": {"body": "\tvoid showImportDialog(JFrame frame) {\n\t\tmaybeInitializeDialog(frame);\n\t\tisExport = false;\n\t\tlocation.setText(null);\n\t\tlocationBorder.setTitle(LOCATION_IMPORT);\n\t\tsetTitle(FILE_TAB, TAB_FILE_IMPORT);\n\t\tsetTitle(TEXT_TAB, TAB_TEXT_IMPORT);\n\t\ttabs.setSelectedIndex(FILE_TAB);\n\t\toptions.setVisible(false);\n\t\ttext.setEditable(true);\n\t\tdialog.setTitle(DIALOG_IMPORT);\n\t\tok.getRootPane().setDefaultButton(ok);\n\t\tdialog.setVisible(true);\n\t}", "comment": "/**\n\t * @return true if exportation was successful\n\t */"}}
{"code": {"body": "\tvoid showExportDialog(JFrame frame) {\n\t\tmaybeInitializeDialog(frame);\n\t\tisExport = true;\n\t\tlocation.setText(null);\n\t\tlocationBorder.setTitle(LOCATION_EXPORT);\n\t\tsetTitle(FILE_TAB, TAB_FILE_EXPORT);\n\t\tsetTitle(TEXT_TAB, TAB_TEXT_EXPORT);\n\t\ttabs.setSelectedIndex(FILE_TAB);\n\t\toptions.setVisible(true);\n\t\ttext.setEditable(false);\n\t\tvalidTextArea = false;\n\t\tdialog.setTitle(DIALOG_EXPORT);\n\t\tok.getRootPane().setDefaultButton(ok);\n\t\tdialog.setVisible(true);\n\t}", "comment": "/**\n\t * @return true if exportation was successful\n\t */"}}
{"code": {"body": "\tprivate void setTitle(int tab, String title) {\n\t\tint mnemonic = tabs.getMnemonicAt(tab);\n\t\ttabs.setTitleAt(tab, title);\n\t\tint index = title.indexOf(mnemonic);\n\t\tif (index >= 0)\n\t\t\ttabs.setDisplayedMnemonicIndexAt(tab, index);\n\t}", "comment": "/**\n\t * @return true if exportation was successful\n\t */"}}
{"code": {"body": "\tprivate void setMnemonic(JLabel lab, JComponent c, int mnemonic) {\n\t\tlab.setDisplayedMnemonic(mnemonic);\n\t\tlab.setLabelFor(c);\n\t}", "comment": "/**\n\t * @return true if exportation was successful\n\t */"}}
{"code": {"body": "\tprivate void maybeInitializeDialog(JFrame frame) {\n\t\tif (dialog != null)\n\t\t\treturn;\n\t\tJLabel pkgLabel = new JLabel(\"\");\n\t\tJLabel clsLabel = new JLabel(\"\");\n\t\tJLabel mtdLabel = new JLabel(\"\");\n\t\tJLabel indLabel = new JLabel(\"\");\n\t\tpackageField = new JTextField();\n\t\tclassField = new JTextField(\"\");\n\t\tmethodField = new JTextField(\"\");\n\t\tindentTabs = new JRadioButton(\"\", true);\n\t\tindentTabs.setMnemonic(KeyEvent.VK_T);\n\t\tindentJava = new JRadioButton(\"\", false);\n\t\tindentJava.setMnemonic(KeyEvent.VK_J);\n\t\tsetMnemonic(pkgLabel, packageField, KeyEvent.VK_P);\n\t\tsetMnemonic(clsLabel, classField, KeyEvent.VK_C);\n\t\tsetMnemonic(mtdLabel, methodField, KeyEvent.VK_M);\n\t\tButtonGroup group = new ButtonGroup();\n\t\tgroup.add(indentTabs);\n\t\tgroup.add(indentJava);\n\t\tlocation = new JTextField(25);\n\t\tJButton browse = new JButton(\"\");\n\t\tbrowse.addActionListener(this);\n\t\tbrowse.setMnemonic(KeyEvent.VK_B);\n\n\t\toptions = Preview.titled(new JPanel(null), \"\");\n\t\tGroupLayout layout = new GroupLayout(options);\n\t\toptions.setLayout(layout);\n\t\tlayout.setHorizontalGroup(layout.createSequentialGroup()\n\t\t\t.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)\n\t\t\t\t.addComponent(pkgLabel).addComponent(clsLabel).addComponent(mtdLabel).addComponent(indLabel))\n\t\t\t.addGap(5)\n\t\t\t.addGroup(layout.createParallelGroup()\n\t\t\t\t.addComponent(packageField).addComponent(classField).addComponent(methodField)\n\t\t\t\t.addGroup(layout.createSequentialGroup()\n\t\t\t\t\t\t.addComponent(indentTabs)\n\t\t\t\t\t\t.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)\n\t\t\t\t\t\t.addComponent(indentJava))));\n\t\tlayout.setVerticalGroup(layout.createSequentialGroup()\n\t\t\t.addGroup(layout.createBaselineGroup(false, true)\n\t\t\t\t.addComponent(pkgLabel).addComponent(packageField))\n\t\t\t.addGroup(layout.createBaselineGroup(false, true)\n\t\t\t\t.addComponent(clsLabel).addComponent(classField))\n\t\t\t.addGroup(layout.createBaselineGroup(false, true)\n\t\t\t\t.addComponent(mtdLabel).addComponent(methodField))\n\t\t\t.addGap(3).addGroup(layout.createBaselineGroup(false, true)\n\t\t\t\t.addComponent(indLabel).addComponent(indentTabs).addComponent(indentJava)));\n\t\t\n\t\tJPanel locationPanel = new JPanel(null);\n\t\tlocationBorder = Preview.createTitledBorder(false, LOCATION_EXPORT);\n\t\tlocationPanel.setBorder(locationBorder);\n\t\tlayout = new GroupLayout(locationPanel);\n\t\tlocationPanel.setLayout(layout);\n\t\tlayout.setHorizontalGroup(layout.createSequentialGroup()\n\t\t\t\t.addComponent(location).addComponent(browse));\n\t\tint prf = GroupLayout.PREFERRED_SIZE;\n\t\tlayout.setVerticalGroup(layout.createBaselineGroup(false, true)\n\t\t\t\t.addComponent(location, prf, prf, prf)\n\t\t\t\t.addComponent(browse, prf, prf, prf));\n\t\t\n\t\tJPanel file = new JPanel(null);\n\t\tlayout = new GroupLayout(file);\n\t\tfile.setLayout(layout);\n\t\tlayout.setHorizontalGroup(layout.createParallelGroup()\n\t\t\t.addComponent(options).addComponent(locationPanel));\n\t\tlayout.setVerticalGroup(layout.createSequentialGroup()\n\t\t\t.addComponent(options, prf, prf, prf).addComponent(locationPanel, prf, prf, prf));\n\t\t\n\t\ttext = new JTextArea();\n\t\ttext.setEditable(false);\n\t\t\n\t\ttabs = new JTabbedPane();\n\t\ttabs.addChangeListener(this);\n\t\ttabs.addTab(TAB_FILE_EXPORT, file);\n\t\ttabs.addTab(TAB_TEXT_EXPORT, new JScrollPane(text,\n\t\t\t\tJScrollPane.VERTICAL_SCROLLBAR_ALWAYS, \n\t\t\t\tJScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED));\n\t\ttabs.setMnemonicAt(FILE_TAB, KeyEvent.VK_F);\n\t\ttabs.setMnemonicAt(TEXT_TAB, KeyEvent.VK_T);\n\t\t\n\t\tok = new JButton(\"\");\n\t\tok.addActionListener(this);\n\t\tJButton cancel = new JButton(\"\");\n\t\tcancel.addActionListener(this);\n\t\t\n\t\tJPanel content = new JPanel(null);\n\t\tlayout = new GroupLayout(content);\n\t\tlayout.setAutoCreateContainerGaps(true);\n\t\tcontent.setLayout(layout);\n\t\tlayout.setHorizontalGroup(layout.createParallelGroup()\n\t\t\t.addComponent(tabs).addGroup(layout.createSequentialGroup()\n\t\t\t\t.addGap(0, 200, Short.MAX_VALUE).addComponent(ok)\n\t\t\t\t.addGap(3).addComponent(cancel).addGap(5)));\n\t\tlayout.setVerticalGroup(layout.createSequentialGroup()\n\t\t\t.addComponent(tabs, 0, GroupLayout.PREFERRED_SIZE, Short.MAX_VALUE)\n\t\t\t.addGroup(layout.createBaselineGroup(false, true)\n\t\t\t\t.addComponent(ok).addComponent(cancel))\n\t\t\t.addGap(5));\n\t\tlayout.linkSize(SwingConstants.HORIZONTAL, ok, cancel);\n\t\tCreator.registerCloseAction(content);\n\t\t\n\t\tdialog = new JDialog(frame, true);\n\t\tdialog.setContentPane(content);\n\t\tdialog.pack();\n\t\tdialog.setLocationRelativeTo(null);\n\t}", "comment": "/**\n\t * @return true if exportation was successful\n\t */"}}
{"code": {"body": "\tpublic void stateChanged(ChangeEvent e) {\n\t\tif (isExport && !validTextArea && tabs.getSelectedIndex() == TEXT_TAB) {\n\t\t\tvalidTextArea = true;\n\t\t\ttry {\n\t\t\t\tRemoteUIDefaults def = Creator.getUIDefaults();\n\t\t\t\tif (def != null)\n\t\t\t\t\ttext.setText(def.export());\n\t\t\t} catch (RemoteException x) {\n\t\t\t\tx.printStackTrace();\n\t\t\t}\n\t\t}\n\t}", "comment": "/**\n\t * @return true if exportation was successful\n\t */"}}
{"code": {"body": "\tpublic void actionPerformed(ActionEvent e) {\n\t\tif (e.getActionCommand() == \"\") {\n\t\t\tif (browse == null) {\n\t\t\t\tbrowse = new JFileChooser();\n\t\t\t\tbrowse.setMultiSelectionEnabled(false);\n\t\t\t}\n\t\t\tbrowse.setFileSelectionMode(isExport ?\n\t\t\t\t\tJFileChooser.DIRECTORIES_ONLY : JFileChooser.FILES_ONLY);\n\t\t\tif (JFileChooser.APPROVE_OPTION == (isExport ? \n\t\t\t\t\tbrowse.showSaveDialog(null) : browse.showOpenDialog(null))) {\n\t\t\t\tFile file = browse.getSelectedFile();\n\t\t\t\tlocation.setText(file.getPath());\n\t\t\t}\n\t\t} else if (e.getActionCommand() == \"\") {\n\t\t\tif (isExport ? doExport() : doImport())\n\t\t\t\tdispose();\n\t\t} else if (e.getActionCommand() == \"\") {\n\t\t\tdispose();\n\t\t}\n\t}", "comment": "/**\n\t * @return true if exportation was successful\n\t */"}}
{"code": {"body": "\tprivate void dispose() {\n\t\ttext.setText(null);\n\t\tdialog.dispose();\n\t}", "comment": "/**\n\t * @return true if exportation was successful\n\t */"}}
{"code": {"body": "\tprivate static boolean confirm(Object msg) {\n\t\treturn JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(\n\t\t\t\tnull, msg, \"\",\n\t\t\t\tJOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);\n\t}", "comment": "/**\n\t * @param msg confirmation message\n\t * @return true if the user confirmed\n\t */"}}
{"code": {"body": "\tprivate static boolean error(Object msg) {\n\t\tJOptionPane.showMessageDialog(\n\t\t\t\tnull, msg, \"\", JOptionPane.ERROR_MESSAGE);\n\t\treturn false;\n\t}", "comment": "/**\n\t * @param msg error message\n\t * @return always returns false\n\t */"}}
{"code": {"body": "        public static PlaceholderFragment newInstance(int sectionNumber) {\n            PlaceholderFragment fragment = new PlaceholderFragment();\n            Bundle args = new Bundle();\n            args.putInt(ARG_SECTION_NUMBER, sectionNumber);\n            fragment.setArguments(args);\n            return fragment;\n        }", "comment": "/**\n         * Returns a new instance of this fragment for the given section\n         * number.\n         */"}}
{"code": {"body": "    protected EntityCreator<ENTITY> getCreator() {\n        return creator;\n    }", "comment": "/*    protected <ENTITY extends EntityChildIdBase<ENTITY, PARENT_ENTITY>,\n               PARENT_ENTITY extends EntityBase<PARENT_ENTITY>>\n    void init(ENTITY entity, PARENT_ENTITY parentEntity, String kind) {\n        entity.init(parentEntity.getKey(), kind);\n    }\n*/"}}
{"code": {"body": "    public static void main(String[] args) {\n        (new Am()).run(args);\n    }", "comment": "/**\n     * Command-line entry point.\n     *\n     * @param args The command-line arguments\n     */"}}
{"code": {"body": "        public void setRawOutput(boolean rawMode) {\n            mRawMode = rawMode;\n        }", "comment": "/**\n         * Set or reset \"raw mode\".  In \"raw mode\", all bundles are dumped.  In \"pretty mode\",\n         * if a bundle includes Instrumentation.REPORT_KEY_STREAMRESULT, just print that.\n         * @param rawMode true for raw mode, false for pretty mode.\n         */"}}
{"code": {"body": "    private static ParcelFileDescriptor openForSystemServer(File file, int mode)\n            throws FileNotFoundException {\n        final ParcelFileDescriptor fd = ParcelFileDescriptor.open(file, mode);\n        final String tcon = SELinux.getFileContext(file.getAbsolutePath());\n        if (!SELinux.checkSELinuxAccess(\"\", tcon, \"\", \"\")) {\n            throw new FileNotFoundException(\"\" + tcon);\n        }\n        return fd;\n    }", "comment": "/**\n     * Open the given file for sending into the system process. This verifies\n     * with SELinux that the system will have access to the file.\n     */"}}
{"code": {"body": "    public static void main(String[] args) {\n        (new Wm()).run(args);\n    }", "comment": "/**\n     * Command-line entry point.\n     *\n     * @param args The command-line arguments\n     */"}}
{"code": {"body": "    public List<AccessibilityWindowInfo> getWindows() {\n        return AccessibilityInteractionClient.getInstance().getWindows(mConnectionId);\n    }", "comment": "/**\n     * Gets the windows on the screen. This method returns only the windows\n     * that a sighted user can interact with, as opposed to all windows.\n     * For example, if there is a modal dialog shown and the user cannot touch\n     * anything behind it, then only the modal window will be reported\n     * (assuming it is the top one). For convenience the returned windows\n     * are ordered in a descending layer order, which is the windows that\n     * are higher in the Z-order are reported first. Since the user can always\n     * interact with the window that has input focus by typing, the focused\n     * window is always returned (even if covered by a modal window).\n     * <p>\n     * <strong>Note:</strong> In order to access the windows your service has\n     * to declare the capability to retrieve window content by setting the\n     * {@link android.R.styleable#AccessibilityService_canRetrieveWindowContent}\n     * property in its meta-data. For details refer to {@link #SERVICE_META_DATA}.\n     * Also the service has to opt-in to retrieve the interactive windows by\n     * setting the {@link AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS}\n     * flag.\n     * </p>\n     *\n     * @return The windows if there are windows and the service is can retrieve\n     *         them, otherwise an empty list.\n     */"}}
{"code": {"body": "    public AccessibilityNodeInfo getRootInActiveWindow() {\n        return AccessibilityInteractionClient.getInstance().getRootInActiveWindow(mConnectionId);\n    }", "comment": "/**\n     * Gets the root node in the currently active window if this service\n     * can retrieve window content. The active window is the one that the user\n     * is currently touching or the window with input focus, if the user is not\n     * touching any window.\n     * <p>\n     * <strong>Note:</strong> In order to access the root node your service has\n     * to declare the capability to retrieve window content by setting the\n     * {@link android.R.styleable#AccessibilityService_canRetrieveWindowContent}\n     * property in its meta-data. For details refer to {@link #SERVICE_META_DATA}.\n     * </p>\n     *\n     * @return The root node if this service can retrieve window content.\n     */"}}
{"code": {"body": "    public final boolean performGlobalAction(int action) {\n        IAccessibilityServiceConnection connection =\n            AccessibilityInteractionClient.getInstance().getConnection(mConnectionId);\n        if (connection != null) {\n            try {\n                return connection.performGlobalAction(action);\n            } catch (RemoteException re) {\n                Log.w(LOG_TAG, \"\", re);\n            }\n        }\n        return false;\n    }", "comment": "/**\n     * Performs a global action. Such an action can be performed\n     * at any moment regardless of the current application or user\n     * location in that application. For example going back, going\n     * home, opening recents, etc.\n     *\n     * @param action The action to perform.\n     * @return Whether the action was successfully performed.\n     *\n     * @see #GLOBAL_ACTION_BACK\n     * @see #GLOBAL_ACTION_HOME\n     * @see #GLOBAL_ACTION_NOTIFICATIONS\n     * @see #GLOBAL_ACTION_RECENTS\n     */"}}
{"code": {"body": "    public AccessibilityNodeInfo findFocus(int focus) {\n        return AccessibilityInteractionClient.getInstance().findFocus(mConnectionId,\n                AccessibilityNodeInfo.ANY_WINDOW_ID, AccessibilityNodeInfo.ROOT_NODE_ID, focus);\n    }", "comment": "/**\n     * Find the view that has the specified focus type. The search is performed\n     * across all windows.\n     * <p>\n     * <strong>Note:</strong> In order to access the windows your service has\n     * to declare the capability to retrieve window content by setting the\n     * {@link android.R.styleable#AccessibilityService_canRetrieveWindowContent}\n     * property in its meta-data. For details refer to {@link #SERVICE_META_DATA}.\n     * Also the service has to opt-in to retrieve the interactive windows by\n     * setting the {@link AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS}\n     * flag.Otherwise, the search will be performed only in the active window.\n     * </p>\n     *\n     * @param focus The focus to find. One of {@link AccessibilityNodeInfo#FOCUS_INPUT} or\n     *         {@link AccessibilityNodeInfo#FOCUS_ACCESSIBILITY}.\n     * @return The node info of the focused view or null.\n     *\n     * @see AccessibilityNodeInfo#FOCUS_INPUT\n     * @see AccessibilityNodeInfo#FOCUS_ACCESSIBILITY\n     */"}}
{"code": {"body": "    public final AccessibilityServiceInfo getServiceInfo() {\n        IAccessibilityServiceConnection connection =\n            AccessibilityInteractionClient.getInstance().getConnection(mConnectionId);\n        if (connection != null) {\n            try {\n                return connection.getServiceInfo();\n            } catch (RemoteException re) {\n                Log.w(LOG_TAG, \"\", re);\n            }\n        }\n        return null;\n    }", "comment": "/**\n     * Gets the an {@link AccessibilityServiceInfo} describing this\n     * {@link AccessibilityService}. This method is useful if one wants\n     * to change some of the dynamically configurable properties at\n     * runtime.\n     *\n     * @return The accessibility service info.\n     *\n     * @see AccessibilityServiceInfo\n     */"}}
{"code": {"body": "    public final void setServiceInfo(AccessibilityServiceInfo info) {\n        mInfo = info;\n        sendServiceInfo();\n    }", "comment": "/**\n     * Sets the {@link AccessibilityServiceInfo} that describes this service.\n     * <p>\n     * Note: You can call this method any time but the info will be picked up after\n     *       the system has bound to this service and when this method is called thereafter.\n     *\n     * @param info The info.\n     */"}}
{"code": {"body": "    private void sendServiceInfo() {\n        IAccessibilityServiceConnection connection =\n            AccessibilityInteractionClient.getInstance().getConnection(mConnectionId);\n        if (mInfo != null && connection != null) {\n            try {\n                connection.setServiceInfo(mInfo);\n                mInfo = null;\n                AccessibilityInteractionClient.getInstance().clearCache();\n            } catch (RemoteException re) {\n                Log.w(LOG_TAG, \"\", re);\n            }\n        }\n    }", "comment": "/**\n     * Sets the {@link AccessibilityServiceInfo} for this service if the latter is\n     * properly set and there is an {@link IAccessibilityServiceConnection} to the\n     * AccessibilityManagerService.\n     */"}}
{"code": {"body": "    private static int getMonth(String monthString) {\n        int hash = Character.toLowerCase(monthString.charAt(0)) +\n                Character.toLowerCase(monthString.charAt(1)) +\n                Character.toLowerCase(monthString.charAt(2)) - 3 * '';\n        switch (hash) {\n            case 22:\n                return Calendar.JANUARY;\n            case 10:\n                return Calendar.FEBRUARY;\n            case 29:\n                return Calendar.MARCH;\n            case 32:\n                return Calendar.APRIL;\n            case 36:\n                return Calendar.MAY;\n            case 42:\n                return Calendar.JUNE;\n            case 40:\n                return Calendar.JULY;\n            case 26:\n                return Calendar.AUGUST;\n            case 37:\n                return Calendar.SEPTEMBER;\n            case 35:\n                return Calendar.OCTOBER;\n            case 48:\n                return Calendar.NOVEMBER;\n            case 9:\n                return Calendar.DECEMBER;\n            default:\n                throw new IllegalArgumentException();\n        }\n    }", "comment": "/*\n     * jan = 9 + 0 + 13 = 22\n     * feb = 5 + 4 + 1 = 10\n     * mar = 12 + 0 + 17 = 29\n     * apr = 0 + 15 + 17 = 32\n     * may = 12 + 0 + 24 = 36\n     * jun = 9 + 20 + 13 = 42\n     * jul = 9 + 20 + 11 = 40\n     * aug = 0 + 20 + 6 = 26\n     * sep = 18 + 4 + 15 = 37\n     * oct = 14 + 2 + 19 = 35\n     * nov = 13 + 14 + 21 = 48\n     * dec = 3 + 4 + 2 = 9\n     */"}}
{"code": {"body": "    protected void downloadFile() throws Exception {\n        NetworkStats pre_test_stats = fetchDataFromProc(mUid);\n        String ts = Long.toString(System.currentTimeMillis());\n\n        String targetUrl = BandwidthTestUtil.buildDownloadUrl(\n                mTestServer, FILE_SIZE, mDeviceId, ts);\n        TrafficStats.startDataProfiling(mContext);\n        File tmpSaveFile = new File(BASE_DIR + File.separator + TMP_FILENAME);\n        assertTrue(BandwidthTestUtil.DownloadFromUrl(targetUrl, tmpSaveFile));\n        NetworkStats prof_stats = TrafficStats.stopDataProfiling(mContext);\n        Log.d(LOG_TAG, prof_stats.toString());\n\n        NetworkStats post_test_stats = fetchDataFromProc(mUid);\n        NetworkStats proc_stats = post_test_stats.subtract(pre_test_stats);\n\n        \n        \n        Bundle results = new Bundle();\n        results.putString(\"\", mDeviceId);\n        results.putString(\"\", ts);\n        results.putInt(\"\", FILE_SIZE);\n        addStatsToResults(PROF_LABEL, prof_stats, results, mUid);\n        addStatsToResults(PROC_LABEL, proc_stats, results, mUid);\n        getInstrumentation().sendStatus(INSTRUMENTATION_IN_PROGRESS, results);\n\n        \n        assertTrue(cleanUpFile(tmpSaveFile));\n    }", "comment": "/**\n     * Helper method that downloads a file using http connection from a test server and reports the\n     * data usage stats to instrumentation out.\n     */"}}
{"code": {"body": "    protected void uploadFile() throws Exception {\n        \n        String ts = Long.toString(System.currentTimeMillis());\n        String targetUrl = BandwidthTestUtil.buildDownloadUrl(\n                mTestServer, FILE_SIZE, mDeviceId, ts);\n        File tmpSaveFile = new File(BASE_DIR + File.separator + TMP_FILENAME);\n        assertTrue(BandwidthTestUtil.DownloadFromUrl(targetUrl, tmpSaveFile));\n\n        ts = Long.toString(System.currentTimeMillis());\n        NetworkStats pre_test_stats = fetchDataFromProc(mUid);\n        TrafficStats.startDataProfiling(mContext);\n        assertTrue(BandwidthTestUtil.postFileToServer(mTestServer, mDeviceId, ts, tmpSaveFile));\n        NetworkStats prof_stats = TrafficStats.stopDataProfiling(mContext);\n        Log.d(LOG_TAG, prof_stats.toString());\n        NetworkStats post_test_stats = fetchDataFromProc(mUid);\n        NetworkStats proc_stats = post_test_stats.subtract(pre_test_stats);\n\n        \n        \n        Bundle results = new Bundle();\n        results.putString(\"\", mDeviceId);\n        results.putString(\"\", ts);\n        results.putInt(\"\", FILE_SIZE);\n        addStatsToResults(PROF_LABEL, prof_stats, results, mUid);\n        addStatsToResults(PROC_LABEL, proc_stats, results, mUid);\n        getInstrumentation().sendStatus(INSTRUMENTATION_IN_PROGRESS, results);\n\n        \n        assertTrue(cleanUpFile(tmpSaveFile));\n    }", "comment": "/**\n     * Helper method that downloads a test file to upload. The stats reported to instrumentation out\n     * only include upload stats.\n     */"}}
{"code": {"body": "    protected void downloadFileUsingDownloadManager() throws Exception {\n        \n        \n        int downloadManagerUid = mConnectionUtil.downloadManagerUid();\n        assertTrue(downloadManagerUid >= 0);\n        NetworkStats pre_test_stats = fetchDataFromProc(downloadManagerUid);\n        \n        TrafficStats.startDataProfiling(mContext);\n        String ts = Long.toString(System.currentTimeMillis());\n        String targetUrl = BandwidthTestUtil.buildDownloadUrl(\n                mTestServer, FILE_SIZE, mDeviceId, ts);\n        Log.v(LOG_TAG, \"\" + targetUrl);\n        File tmpSaveFile = new File(BASE_DIR + File.separator + TMP_FILENAME);\n        assertTrue(mConnectionUtil.startDownloadAndWait(targetUrl, 500000));\n        NetworkStats prof_stats = TrafficStats.stopDataProfiling(mContext);\n        NetworkStats post_test_stats = fetchDataFromProc(downloadManagerUid);\n        NetworkStats proc_stats = post_test_stats.subtract(pre_test_stats);\n        Log.d(LOG_TAG, prof_stats.toString());\n        \n        \n        Bundle results = new Bundle();\n        results.putString(\"\", mDeviceId);\n        results.putString(\"\", ts);\n        results.putInt(\"\", FILE_SIZE);\n        addStatsToResults(PROF_LABEL, prof_stats, results, mUid);\n        \n        addStatsToResults(PROC_LABEL, proc_stats, results, downloadManagerUid);\n        getInstrumentation().sendStatus(INSTRUMENTATION_IN_PROGRESS, results);\n\n        \n        assertTrue(cleanUpFile(tmpSaveFile));\n    }", "comment": "/**\n     * Helper method that downloads a file from a test server using the download manager and reports\n     * the stats to instrumentation out.\n     */"}}
{"code": {"body": "    public NetworkStats fetchDataFromProc(int uid) {\n        String root_filepath = \"\" + uid + \"\";\n        File rcv_stat = new File (root_filepath + \"\");\n        int rx = BandwidthTestUtil.parseIntValueFromFile(rcv_stat);\n        File snd_stat = new File (root_filepath + \"\");\n        int tx = BandwidthTestUtil.parseIntValueFromFile(snd_stat);\n        NetworkStats stats = new NetworkStats(SystemClock.elapsedRealtime(), 1);\n        stats.addValues(NetworkStats.IFACE_ALL, uid, NetworkStats.SET_DEFAULT,\n                NetworkStats.TAG_NONE, rx, 0, tx, 0, 0);\n        return stats;\n    }", "comment": "/**\n     * Fetch network data from /proc/uid_stat/uid\n     *\n     * @return populated {@link NetworkStats}\n     */"}}
{"code": {"body": "    public boolean setDeviceWifiAndAirplaneMode(String ssid) {\n        mConnectionUtil.setAirplaneMode(mContext, true);\n        assertTrue(mConnectionUtil.connectToWifi(ssid));\n        assertTrue(mConnectionUtil.waitForWifiState(WifiManager.WIFI_STATE_ENABLED,\n                ConnectionUtil.LONG_TIMEOUT));\n        assertTrue(mConnectionUtil.waitForNetworkState(ConnectivityManager.TYPE_WIFI,\n                State.CONNECTED, ConnectionUtil.LONG_TIMEOUT));\n        return mConnectionUtil.hasData();\n    }", "comment": "/**\n     * Turn on Airplane mode and connect to the wifi.\n     *\n     * @param ssid of the wifi to connect to\n     * @return true if we successfully connected to a given network.\n     */"}}
{"code": {"body": "    public boolean hasMobileData() {\n        assertTrue(mConnectionUtil.waitForNetworkState(ConnectivityManager.TYPE_MOBILE,\n                State.CONNECTED, ConnectionUtil.LONG_TIMEOUT));\n        assertTrue(\"\", mConnectionUtil.isConnectedToMobile());\n        assertFalse(\"\", mConnectionUtil.isConnectedToWifi());\n        return mConnectionUtil.hasData();\n    }", "comment": "/**\n     * Helper method to make sure we are connected to mobile data.\n     *\n     * @return true if we successfully connect to mobile data.\n     */"}}
{"code": {"body": "    public void addStatsToResults(String label, NetworkStats stats, Bundle results, int uid){\n        if (results == null || results.isEmpty()) {\n            Log.e(LOG_TAG, \"\");\n            return;\n        }\n        Entry totalStats = null;\n        for (int i = 0; i < stats.size(); ++i) {\n            Entry statsEntry = stats.getValues(i, null);\n            \n            if (statsEntry.tag != 0) {\n                continue;\n            }\n            \n            if (statsEntry.uid != uid) {\n                continue;\n            }\n            if (totalStats == null || statsEntry.set == NetworkStats.SET_ALL) {\n                totalStats = statsEntry;\n            } else {\n                totalStats.rxBytes += statsEntry.rxBytes;\n                totalStats.txBytes += statsEntry.txBytes;\n            }\n        }\n        \n        results.putInt(label + \"\", totalStats.uid);\n        results.putLong(label + \"\", totalStats.txBytes);\n        results.putLong(label + \"\", totalStats.rxBytes);\n    }", "comment": "/**\n     * Output the {@link NetworkStats} to Instrumentation out.\n     *\n     * @param label to attach to this given stats.\n     * @param stats {@link NetworkStats} to add.\n     * @param results {@link Bundle} to be added to.\n     * @param uid for which to report the results.\n     */"}}
{"code": {"body": "    private boolean cleanUpFile(File file) {\n        if (file.exists()) {\n            return file.delete();\n        }\n        return true;\n    }", "comment": "/**\n     * Remove file if it exists.\n     * @param file {@link File} to delete.\n     * @return true if successfully deleted the file.\n     */"}}
{"code": {"body": "    protected void setUp() {\n        mResources = getContext().getResources();\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "    private int calculateRawResourceChecksum(int resId) throws Throwable {\n        InputStream input = null;\n        try {\n            input = mResources.openRawResource(resId);\n            int ch, checksum = 0;\n            while ((ch = input.read()) != -1) {\n                checksum = (checksum + ch) % 0xffddbb00;\n            }\n            return checksum;\n        } finally {\n            input.close();\n        }\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "    private void setLocale(Locale locale) {\n        Locale.setDefault(locale);\n        Configuration config = new Configuration();\n        config.locale = locale;\n        mResources.updateConfiguration(config, mResources.getDisplayMetrics());\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "    private int[] getExpected(int[] no, int[] so, int[] mo) {\n        switch (mMode) {\n            case MODE_NO_OVERLAY:\n                return no;\n            case MODE_SINGLE_OVERLAY:\n                return so;\n            case MODE_MULTIPLE_OVERLAYS:\n                return mo;\n            default:\n                fail(\"\");\n                return no;\n        }\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "    private void assertResource(int resId, int[] no, int[] so, int[] mo) throws Throwable {\n        int[] expected = getExpected(no, so, mo);\n        int[] actual = mResources.getIntArray(resId);\n        assertEquals(\"\", expected.length, actual.length);\n        for (int i = 0; i < actual.length; ++i) {\n            assertEquals(\"\" + i + \"\", actual[i], expected[i]);\n        }\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "    public void testFrameworkBooleanOverlay() throws Throwable {\n        \n        \n        \n        \n        final int resId = com.android.internal.R.bool.config_annoy_dianne;\n        assertResource(resId, true, false, false);\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "    public void testBooleanOverlay() throws Throwable {\n        \n        \n        \n        \n        final int resId = R.bool.usually_false;\n        assertResource(resId, false, true, false);\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "    public void testBoolean() throws Throwable {\n        \n        final int resId = R.bool.always_true;\n        assertResource(resId, true, true, true);\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "    public void testIntegerArrayOverlay() throws Throwable {\n        \n        \n        \n        \n        final int resId = R.array.fibonacci;\n        assertResource(resId,\n                new int[]{1, 1, 2, 3, 5, 8, 13, 21},\n                new int[]{21, 13, 8, 5, 3, 2, 1, 1},\n                new int[]{21, 13, 8, 5, 3, 2, 1, 1});\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "    public void testIntegerArray() throws Throwable {\n        \n        final int resId = R.array.prime_numbers;\n        final int[] expected = {2, 3, 5, 7, 11, 13, 17, 19};\n        assertResource(resId, expected, expected, expected);\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "    public void testDrawable() throws Throwable {\n        \n        final int resId = R.drawable.drawable;\n        int actual = calculateRawResourceChecksum(resId);\n        int expected = 0;\n        switch (mMode) {\n            case MODE_NO_OVERLAY:\n                expected = 0x00005665;\n                break;\n            case MODE_SINGLE_OVERLAY:\n            case MODE_MULTIPLE_OVERLAYS:\n                expected = 0x000051da;\n                break;\n            default:\n                fail(\"\" + mMode);\n        }\n        assertEquals(expected, actual);\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "    public void testAppString() throws Throwable {\n        final int resId = R.string.str;\n        assertResource(resId, \"\", \"\", \"\");\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "    public void testApp2() throws Throwable {\n        final int resId = R.string.str2; \n        assertResource(resId, \"\", \"\", \"\");\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "    public void testAppXml() throws Throwable {\n        int expected = getExpected(0, 1, 2);\n        int actual = -1;\n        XmlResourceParser parser = mResources.getXml(R.xml.integer);\n        int type = parser.getEventType();\n        while (type != XmlResourceParser.END_DOCUMENT && actual == -1) {\n            if (type == XmlResourceParser.START_TAG && \"\".equals(parser.getName())) {\n                AttributeSet as = Xml.asAttributeSet(parser);\n                actual = as.getAttributeIntValue(null, \"\", -1);\n            }\n            type = parser.next();\n        }\n        parser.close();\n        assertEquals(expected, actual);\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "    public void testAppRaw() throws Throwable {\n        final int resId = R.raw.lorem_ipsum;\n\n        InputStream input = null;\n        BufferedReader reader = null;\n        String actual = \"\";\n        try {\n            input = mResources.openRawResource(resId);\n            reader = new BufferedReader(new InputStreamReader(input));\n            actual = reader.readLine();\n        } finally {\n            if (reader != null) {\n                reader.close();\n            }\n            if (input != null) {\n                input.close();\n            }\n        }\n\n        final String no = \"\" +\n            \"\" +\n            \"\" +\n            \"\" +\n            \"\" +\n            \"\" +\n            \"\";\n        final String so = \"\";\n        final String mo = \"\";\n\n        assertEquals(getExpected(no, so, mo), actual);\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "    public void testMatrix100000() throws Throwable {\n        final int resId = R.integer.matrix_100000;\n        setLocale(new Locale(\"\", \"\"));\n        assertResource(resId, 100, 100, 100);\n    }", "comment": "/*\n     * testMatrix* tests\n     *\n     * The naming convention textMatrixABCDEF refers to in which packages and\n     * which configurations a resource is defined (1 if the resource is\n     * defined). If defined, a slot is always given the same value.\n     *\n     * SLOT  PACKAGE           CONFIGURATION  VALUE\n     * A     target package    (default)      100\n     * B     target package    -sv            200\n     * C     OverlayAppFirst   (default)      300\n     * D     OverlayAppFirst   -sv            400\n     * E     OverlayAppSecond  (default)      500\n     * F     OverlayAppSecond  -sv            600\n     *\n     * Example: in testMatrix101110, the base package defines the\n     * R.integer.matrix101110 resource for the default configuration (value\n     * 100), OverlayAppFirst defines it for both default and Swedish\n     * configurations (values 300 and 400, respectively), and OverlayAppSecond\n     * defines it for the default configuration (value 500). If both overlays\n     * are loaded, the expected value after setting the language to Swedish is\n     * 400.\n     */"}}
{"code": {"body": "public DrmConvertedStatus(int statusCode, byte[] convertedData, int offset) {\n        if (!isValidStatusCode(statusCode)) {\n            throw new IllegalArgumentException(\"\" + statusCode);\n        }\n\n        this.statusCode = statusCode;\n        this.convertedData = convertedData;\n        this.offset = offset;\n    }", "comment": "/**\n     * Creates a <code>DrmConvertedStatus</code> object with the specified parameters.\n     *\n     * @param statusCode Conversion status. Must be one of the status code constants\n     * defined above.\n     * @param convertedData Converted data. It can be null.\n     * @param offset Offset value for appending the header and body signature.\n     */"}}
{"code": {"body": "    public String getManufacturer() {\n        return mManufacturer;\n    }", "comment": "/**\n     * Returns the manufacturer of the accessory.\n     *\n     * @return the accessory manufacturer\n     */"}}
{"code": {"body": "    public String getModel() {\n        return mModel;\n    }", "comment": "/**\n     * Returns the model name of the accessory.\n     *\n     * @return the accessory model\n     */"}}
{"code": {"body": "    public String getDescription() {\n        return mDescription;\n    }", "comment": "/**\n     * Returns a user visible description of the accessory.\n     *\n     * @return the accessory description\n     */"}}
{"code": {"body": "    public String getVersion() {\n        return mVersion;\n    }", "comment": "/**\n     * Returns the version of the accessory.\n     *\n     * @return the accessory version\n     */"}}
{"code": {"body": "    public String getUri() {\n        return mUri;\n    }", "comment": "/**\n     * Returns the URI for the accessory.\n     * This is an optional URI that might show information about the accessory\n     * or provide the option to download an application for the accessory\n     *\n     * @return the accessory URI\n     */"}}
{"code": {"body": "    public String getSerial() {\n        return mSerial;\n    }", "comment": "/**\n     * Returns the unique serial number for the accessory.\n     * This is an optional serial number that can be used to differentiate\n     * between individual accessories of the same model and manufacturer\n     *\n     * @return the unique serial number\n     */"}}
{"code": {"body": "    public void setUpdateListener(EffectUpdateListener listener) {\n    }", "comment": "/**\n     * Set an effect listener.\n     *\n     * Some effects may report state changes back to the host, if a listener is set. Consult the\n     * individual effect documentation for more details.\n     *\n     * @param listener The listener to receive update callbacks on.\n     */"}}
{"code": {"body": "public AsyncRunner(FilterContext context, Class schedulerClass) {\n        super(context);\n\n        mSchedulerClass = schedulerClass;\n        mLogVerbose = Log.isLoggable(TAG, Log.VERBOSE);\n    }", "comment": "/** Create a new asynchronous graph runner with the given filter\n     * context, and the given scheduler class.\n     *\n     * Must be created on the UI thread.\n     */"}}
{"code": {"body": "public AsyncRunner(FilterContext context) {\n        super(context);\n\n        mSchedulerClass = SimpleScheduler.class;\n        mLogVerbose = Log.isLoggable(TAG, Log.VERBOSE);\n    }", "comment": "/** Create a new asynchronous graph runner with the given filter\n     * context. Uses a default scheduler.\n     *\n     * Must be created on the UI thread.\n     */"}}
{"code": {"body": "    synchronized public void setGraph(FilterGraph graph) {\n        if (isRunning()) {\n            throw new RuntimeException(\"\");\n        }\n        mRunner = new SyncRunner(mFilterContext, graph, mSchedulerClass);\n    }", "comment": "/** Sets the graph to be run. Will call prepare() on graph. Cannot be called\n     * when a graph is already running.\n     */"}}
{"code": {"body": "    final void onCurrentDirectoryChanged(int anim) {\n        onDirectoryChanged(anim);\n\n        final RootsFragment roots = RootsFragment.get(getFragmentManager());\n        if (roots != null) {\n            roots.onCurrentRootChanged();\n        }\n\n        updateActionBar();\n        invalidateOptionsMenu();\n    }", "comment": "/**\n     * Call this when directory changes. Prior to root fragment update\n     * the (abstract) directoryChanged method will be called.\n     * @param anim\n     */"}}
{"code": {"body": "    void setUserSortOrder(int sortOrder) {\n        getDisplayState().userSortOrder = sortOrder;\n        DirectoryFragment.get(getFragmentManager()).onUserSortOrderChanged();\n    }", "comment": "/**\n     * Set state sort order based on explicit user action.\n     */"}}
{"code": {"body": "    void setUserMode(int mode) {\n        getDisplayState().userMode = mode;\n        DirectoryFragment.get(getFragmentManager()).onUserModeChanged();\n    }", "comment": "/**\n     * Set state mode based on explicit user action.\n     */"}}
{"code": {"body": "        void update(RootInfo root) {\n            if (mMenu == null) {\n                Log.d(mTag, \"\");\n                return;\n            }\n\n            State state = getDisplayState();\n            if (state.currentSearch != null) {\n                mMenu.expandActionView();\n\n                mView.setIconified(false);\n                mView.clearFocus();\n                mView.setQuery(state.currentSearch, false);\n            } else {\n                mView.clearFocus();\n                if (!mView.isIconified()) {\n                    mIgnoreNextClose = true;\n                    mView.setIconified(true);\n                }\n\n                if (mMenu.isActionViewExpanded()) {\n                    mIgnoreNextCollapse = true;\n                    mMenu.collapseActionView();\n                }\n            }\n\n            showMenu(root != null\n                    && ((root.flags & Root.FLAG_SUPPORTS_SEARCH) != 0));\n        }", "comment": "/**\n         * @param root Info about the current directory.\n         */"}}
{"code": {"body": "        boolean cancelSearch() {\n            if (mActionBar.hasExpandedActionView()) {\n                mActionBar.collapseActionView();\n                return true;\n            }\n            return false;\n        }", "comment": "/**\n         * Cancels current search operation.\n         * @return True if it cancels search. False if it does not operate\n         *     search currently.\n         */"}}
{"code": {"body": "    private void movePrefixedSettingsToNewTable(\n            SQLiteDatabase db, String sourceTable, String destTable, String[] prefixesToMove) {\n        SQLiteStatement insertStmt = null;\n        SQLiteStatement deleteStmt = null;\n\n        db.beginTransaction();\n        try {\n            insertStmt = db.compileStatement(\"\" + destTable\n                    + \"\" + sourceTable\n                    + \"\");\n            deleteStmt = db.compileStatement(\n                    \"\" + sourceTable + \"\");\n\n            for (String prefix : prefixesToMove) {\n                insertStmt.bindLong(1, prefix.length() + 1);\n                insertStmt.bindString(2, prefix);\n                insertStmt.execute();\n\n                deleteStmt.bindLong(1, prefix.length() + 1);\n                deleteStmt.bindString(2, prefix);\n                deleteStmt.execute();\n            }\n            db.setTransactionSuccessful();\n        } finally {\n            db.endTransaction();\n            if (insertStmt != null) {\n                insertStmt.close();\n            }\n            if (deleteStmt != null) {\n                deleteStmt.close();\n            }\n        }\n    }", "comment": "/**\n     * Move any settings with the given prefixes from the source table to the\n     * destination table.\n     */"}}
{"code": {"body": "    private void loadBookmarks(SQLiteDatabase db) {\n        ContentValues values = new ContentValues();\n\n        PackageManager packageManager = mContext.getPackageManager();\n        try {\n            XmlResourceParser parser = mContext.getResources().getXml(R.xml.bookmarks);\n            XmlUtils.beginDocument(parser, \"\");\n\n            final int depth = parser.getDepth();\n            int type;\n\n            while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                    parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n\n                if (type != XmlPullParser.START_TAG) {\n                    continue;\n                }\n\n                String name = parser.getName();\n                if (!\"\".equals(name)) {\n                    break;\n                }\n\n                String pkg = parser.getAttributeValue(null, \"\");\n                String cls = parser.getAttributeValue(null, \"\");\n                String shortcutStr = parser.getAttributeValue(null, \"\");\n                String category = parser.getAttributeValue(null, \"\");\n\n                int shortcutValue = shortcutStr.charAt(0);\n                if (TextUtils.isEmpty(shortcutStr)) {\n                    Log.w(TAG, \"\" + pkg + \"\" + cls);\n                    continue;\n                }\n\n                final Intent intent;\n                final String title;\n                if (pkg != null && cls != null) {\n                    ActivityInfo info = null;\n                    ComponentName cn = new ComponentName(pkg, cls);\n                    try {\n                        info = packageManager.getActivityInfo(cn, 0);\n                    } catch (PackageManager.NameNotFoundException e) {\n                        String[] packages = packageManager.canonicalToCurrentPackageNames(\n                                new String[] { pkg });\n                        cn = new ComponentName(packages[0], cls);\n                        try {\n                            info = packageManager.getActivityInfo(cn, 0);\n                        } catch (PackageManager.NameNotFoundException e1) {\n                            Log.w(TAG, \"\" + pkg + \"\" + cls, e);\n                            continue;\n                        }\n                    }\n\n                    intent = new Intent(Intent.ACTION_MAIN, null);\n                    intent.addCategory(Intent.CATEGORY_LAUNCHER);\n                    intent.setComponent(cn);\n                    title = info.loadLabel(packageManager).toString();\n                } else if (category != null) {\n                    intent = Intent.makeMainSelectorActivity(Intent.ACTION_MAIN, category);\n                    title = \"\";\n                } else {\n                    Log.w(TAG, \"\" + shortcutStr\n                            + \"\");\n                    continue;\n                }\n\n                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                values.put(Settings.Bookmarks.INTENT, intent.toUri(0));\n                values.put(Settings.Bookmarks.TITLE, title);\n                values.put(Settings.Bookmarks.SHORTCUT, shortcutValue);\n                db.delete(\"\", \"\",\n                        new String[] { Integer.toString(shortcutValue) });\n                db.insert(\"\", null, values);\n            }\n        } catch (XmlPullParserException e) {\n            Log.w(TAG, \"\", e);\n        } catch (IOException e) {\n            Log.w(TAG, \"\", e);\n        }\n    }", "comment": "/**\n     * Loads the default set of bookmarked shortcuts from an xml file.\n     *\n     * @param db The database to write the values into\n     */"}}
{"code": {"body": "    private void loadVolumeLevels(SQLiteDatabase db) {\n        SQLiteStatement stmt = null;\n        try {\n            stmt = db.compileStatement(\"\"\n                    + \"\");\n\n            loadSetting(stmt, Settings.System.VOLUME_MUSIC,\n                    AudioSystem.getDefaultStreamVolume(AudioManager.STREAM_MUSIC));\n            loadSetting(stmt, Settings.System.VOLUME_RING,\n                    AudioSystem.getDefaultStreamVolume(AudioManager.STREAM_RING));\n            loadSetting(stmt, Settings.System.VOLUME_SYSTEM,\n                    AudioSystem.getDefaultStreamVolume(AudioManager.STREAM_SYSTEM));\n            loadSetting(\n                    stmt,\n                    Settings.System.VOLUME_VOICE,\n                    AudioSystem.getDefaultStreamVolume(AudioManager.STREAM_VOICE_CALL));\n            loadSetting(stmt, Settings.System.VOLUME_ALARM,\n                    AudioSystem.getDefaultStreamVolume(AudioManager.STREAM_ALARM));\n            loadSetting(\n                    stmt,\n                    Settings.System.VOLUME_NOTIFICATION,\n                    AudioSystem.getDefaultStreamVolume(AudioManager.STREAM_NOTIFICATION));\n            loadSetting(\n                    stmt,\n                    Settings.System.VOLUME_BLUETOOTH_SCO,\n                    AudioSystem.getDefaultStreamVolume(AudioManager.STREAM_BLUETOOTH_SCO));\n\n            \n            \n            \n            \n            \n            int ringerModeAffectedStreams = (1 << AudioManager.STREAM_RING) |\n                                            (1 << AudioManager.STREAM_NOTIFICATION) |\n                                            (1 << AudioManager.STREAM_SYSTEM) |\n                                            (1 << AudioManager.STREAM_SYSTEM_ENFORCED);\n            if (!mContext.getResources().getBoolean(\n                    com.android.internal.R.bool.config_voice_capable)) {\n                ringerModeAffectedStreams |= (1 << AudioManager.STREAM_MUSIC);\n            }\n            loadSetting(stmt, Settings.System.MODE_RINGER_STREAMS_AFFECTED,\n                    ringerModeAffectedStreams);\n\n            loadSetting(stmt, Settings.System.MUTE_STREAMS_AFFECTED,\n                    AudioSystem.DEFAULT_MUTE_STREAMS_AFFECTED);\n        } finally {\n            if (stmt != null) stmt.close();\n        }\n\n        loadVibrateWhenRingingSetting(db);\n    }", "comment": "/**\n     * Loads the default volume levels. It is actually inserting the index of\n     * the volume array for each of the volume controls.\n     *\n     * @param db the database to insert the volume levels into\n     */"}}
{"code": {"body": "    public void unregisterCallbacks() {\n        if (!mListening) {\n            return;\n        }\n\n        mBrightnessObserver.stopObserving();\n        mUserTracker.stopTracking();\n        mControl.setOnChangedListener(null);\n        mListening = false;\n    }", "comment": "/** Unregister all call backs, both to and from the controller */"}}
{"code": {"body": "    private void updateMode() {\n        if (mAutomaticAvailable) {\n            int automatic;\n            automatic = Settings.System.getIntForUser(mContext.getContentResolver(),\n                    Settings.System.SCREEN_BRIGHTNESS_MODE,\n                    Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL,\n                    UserHandle.USER_CURRENT);\n            mAutomatic = automatic != Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL;\n            updateIcon(mAutomatic);\n        } else {\n            mControl.setChecked(false);\n            updateIcon(false );\n        }\n    }", "comment": "/** Fetch the brightness mode from the system settings and update the icon */"}}
{"code": {"body": "    private void updateSlider() {\n        if (mAutomatic) {\n            float value = Settings.System.getFloatForUser(mContext.getContentResolver(),\n                    Settings.System.SCREEN_AUTO_BRIGHTNESS_ADJ, 0,\n                    UserHandle.USER_CURRENT);\n            mControl.setMax((int) BRIGHTNESS_ADJ_RESOLUTION);\n            mControl.setValue((int) ((value + 1) * BRIGHTNESS_ADJ_RESOLUTION / 2f));\n        } else {\n            int value;\n            value = Settings.System.getIntForUser(mContext.getContentResolver(),\n                    Settings.System.SCREEN_BRIGHTNESS, mMaximumBacklight,\n                    UserHandle.USER_CURRENT);\n            mControl.setMax(mMaximumBacklight - mMinimumBacklight);\n            mControl.setValue(value - mMinimumBacklight);\n        }\n    }", "comment": "/** Fetch the brightness from the system settings and update the slider */"}}
{"code": {"body": "    public ByteBuffer buildPacket(int encap, short destUdp, short srcUdp) {\n        ByteBuffer result = ByteBuffer.allocate(MAX_LENGTH);\n        Inet4Address destIp = mBroadcast ? INADDR_BROADCAST : mYourIp;\n        Inet4Address srcIp = mBroadcast ? INADDR_ANY : mSrcIp;\n\n        fillInPacket(encap, destIp, srcIp, destUdp, srcUdp, result,\n            DHCP_BOOTREPLY, mBroadcast);\n        result.flip();\n        return result;\n    }", "comment": "/**\n     * Fills in a packet with the requested ACK parameters.\n     */"}}
{"code": {"body": "    void finishPacket(ByteBuffer buffer) {\n        addTlv(buffer, DHCP_MESSAGE_TYPE, DHCP_MESSAGE_TYPE_ACK);\n        addTlv(buffer, DHCP_SERVER_IDENTIFIER, mServerIdentifier);\n        addTlv(buffer, DHCP_LEASE_TIME, mLeaseTime);\n\n        \n        if (mLeaseTime != null) {\n            addTlv(buffer, DHCP_RENEWAL_TIME,\n                Integer.valueOf(mLeaseTime.intValue() / 2));\n        }\n\n        addTlv(buffer, DHCP_SUBNET_MASK, mSubnetMask);\n        addTlv(buffer, DHCP_ROUTER, mGateways);\n        addTlv(buffer, DHCP_DOMAIN_NAME, mDomainName);\n        addTlv(buffer, DHCP_BROADCAST_ADDRESS, mBroadcastAddress);\n        addTlv(buffer, DHCP_DNS_SERVER, mDnsServers);\n        addTlvEnd(buffer);\n    }", "comment": "/**\n     * Adds the optional parameters to the client-generated ACK packet.\n     */"}}
{"code": {"body": "    private static final int getInt(Integer v) {\n        if (v == null) {\n            return 0;\n        } else {\n            return v.intValue();\n        }\n    }", "comment": "/**\n     * Un-boxes an Integer, returning 0 if a null reference is supplied.\n     */"}}
{"code": {"body": "public AccessibilityManagerServiceTest() {\n        IBinder iBinder = ServiceManager.getService(Context.ACCESSIBILITY_SERVICE);\n        mManagerService = IAccessibilityManager.Stub.asInterface(iBinder);\n    }", "comment": "/**\n     * Creates a new instance.\n     */"}}
{"code": {"body": "    private void fullyPopulateDefaultAccessibilityEvent(AccessibilityEvent sentEvent) {\n        sentEvent.setAddedCount(1);\n        sentEvent.setBeforeText(\"\");\n        sentEvent.setChecked(true);\n        sentEvent.setClassName(\"\");\n        sentEvent.setContentDescription(\"\");\n        sentEvent.setCurrentItemIndex(1);\n        sentEvent.setEnabled(true);\n        sentEvent.setEventType(AccessibilityEvent.TYPE_VIEW_CLICKED);\n        sentEvent.setEventTime(1000);\n        sentEvent.setFromIndex(1);\n        sentEvent.setFullScreen(true);\n        sentEvent.setItemCount(1);\n        sentEvent.setPackageName(\"\");\n        sentEvent.setParcelableData(Message.obtain(null, 1, null));\n        sentEvent.setPassword(true);\n        sentEvent.setRemovedCount(1);\n    }", "comment": "/**\n     * Fully populates the {@link AccessibilityEvent} to marshal.\n     *\n     * @param sentEvent The event to populate.\n     */"}}
{"code": {"body": "    private void ensureAccessibilityEnabled(Context context, boolean enabled) throws Exception {\n        boolean isEnabled = (Settings.Secure.getInt(context.getContentResolver(),\n                Settings.Secure.ACCESSIBILITY_ENABLED, 0) == 1 ? true : false);\n\n        if (isEnabled == enabled) {\n            return;\n        }\n\n        Settings.Secure.putInt(context.getContentResolver(), Settings.Secure.ACCESSIBILITY_ENABLED,\n                enabled ? 1 : 0);\n\n        \n        Thread.sleep(TIMEOUT_BINDER_CALL);\n    }", "comment": "/**\n     * Ensures accessibility is in a given state by writing the state to the\n     * settings and waiting until the accessibility manager service pick it up.\n     *\n     * @param context A context handle to access the settings.\n     * @param enabled The accessibility state to write to the settings.\n     * @throws Exception If any error occurs.\n     */"}}
{"code": {"body": "    private void ensureOnlyMockServicesEnabled(Context context, boolean firstMockServiceEnabled,\n            boolean secondMockServiceEnabled) throws Exception {\n        String enabledServices = Settings.Secure.getString(context.getContentResolver(),\n                Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES);\n\n        StringBuilder servicesToEnable = new StringBuilder();\n        if (firstMockServiceEnabled) {\n            servicesToEnable.append(MyFirstMockAccessibilityService.sComponentName).append(\"\");\n        }\n        if (secondMockServiceEnabled) {\n            servicesToEnable.append(MySecondMockAccessibilityService.sComponentName).append(\"\");\n        }\n\n        if (servicesToEnable.equals(enabledServices)) {\n            return;\n        }\n\n        Settings.Secure.putString(context.getContentResolver(),\n                Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES, servicesToEnable.toString());\n\n        \n        \n        boolean firstMockServiceOK = false;\n        boolean secondMockServiceOK = false;\n        long start = SystemClock.uptimeMillis();\n        long pollingInterval = TIMEOUT_START_MOCK_ACCESSIBILITY_SERVICES / 6;\n\n        while (SystemClock.uptimeMillis() - start < TIMEOUT_START_MOCK_ACCESSIBILITY_SERVICES)  {\n            firstMockServiceOK = !firstMockServiceEnabled\n                    || (MyFirstMockAccessibilityService.sInstance != null\n                    && MyFirstMockAccessibilityService.sInstance.isSystemBoundAsClient());\n\n            secondMockServiceOK = !secondMockServiceEnabled\n                    || (MySecondMockAccessibilityService.sInstance != null\n                    && MySecondMockAccessibilityService.sInstance.isSystemBoundAsClient());\n\n            if (firstMockServiceOK && secondMockServiceOK) {\n                return;\n            }\n\n            Thread.sleep(pollingInterval);\n        }\n\n        StringBuilder message = new StringBuilder();\n        message.append(\"\");\n        if (!firstMockServiceOK) {\n            message.append(MyFirstMockAccessibilityService.sComponentName);\n            message.append(\"\");\n        }\n        if (!secondMockServiceOK) {\n            message.append(MySecondMockAccessibilityService.sComponentName);\n        }\n        throw new IllegalStateException(message.toString());\n    }", "comment": "/**\n     * Ensures the only {@link MockAccessibilityService}s with given component\n     * names are enabled by writing to the system settings and waiting until the\n     * accessibility manager service picks that up or the\n     * {@link #TIMEOUT_START_MOCK_ACCESSIBILITY_SERVICES} is exceeded.\n     *\n     * @param context A context handle to access the settings.\n     * @param firstMockServiceEnabled If the first mock accessibility service is enabled.\n     * @param secondMockServiceEnabled If the second mock accessibility service is enabled.\n     * @throws IllegalStateException If some of the requested for enabling mock services\n     *         is not properly started.\n     * @throws Exception Exception If any error occurs.\n     */"}}
{"code": {"body": "    private void assertMockServiceVerifiedWithinTimeout(MockAccessibilityService service)\n            throws Exception {\n        Exception lastVerifyException = null;\n        long beginTime = SystemClock.uptimeMillis();\n        long pollTmeout = TIMEOUT_BINDER_CALL / 5;\n\n        \n        while (SystemClock.uptimeMillis() - beginTime < TIMEOUT_BINDER_CALL) {\n            \n            try {\n                Thread.sleep(pollTmeout);\n            } catch (InterruptedException ie) {\n                \n            }\n            \n            \n            try {\n                service.verify();\n                \n                service.reset();\n                return;\n            } catch (Exception e) {\n                lastVerifyException = e;\n            }\n        }\n\n        \n        service.reset();\n\n        \n        throw lastVerifyException;\n    }", "comment": "/**\n     * Asserts the the mock accessibility service has been successfully verified\n     * (which is it has received the expected method calls with expected\n     * arguments) within the {@link #TIMEOUT_BINDER_CALL}. The verified state is\n     * checked by polling upon small intervals.\n     *\n     * @param service The service to verify.\n     * @throws Exception If the verification has failed with exception after the\n     *             {@link #TIMEOUT_BINDER_CALL}.\n     */"}}
{"code": {"body": "    public void testRunAllActivities() throws Exception {\n        final Set<ProcessError> errSet = new LinkedHashSet<ProcessError>();\n\n        for (ResolveInfo app : getLauncherActivities(mPackageManager)) {\n            final Collection<ProcessError> errProcs = runOneActivity(app);\n            if (errProcs != null) {\n                errSet.addAll(errProcs);\n            }\n        }\n\n        if (!errSet.isEmpty()) {\n            fail(String.format(\"\", errSet.size(),\n                    reportWrappedListContents(errSet)));\n        }\n    }", "comment": "/**\n     * A test that runs all Launcher-launchable activities and verifies that no ANRs or crashes\n     * happened while doing so.\n     */"}}
{"code": {"body": "    public void testZZReportAsyncErrors() throws Exception {\n        try {\n            if (!mAsyncErrors.isEmpty()) {\n                fail(String.format(\"\", mAsyncErrors.size(),\n                        reportWrappedListContents(mAsyncErrors)));\n            }\n        } finally {\n            \n            mAsyncErrors.clear();\n        }\n    }", "comment": "/**\n     * This test checks for asynchronously-caused errors (crashes or ANRs) and fails in case any\n     * were found.  This prevents us from needing to fail unrelated testcases when, for instance\n     * a background thread causes a crash or ANR.\n     * <p />\n     * Because this behavior depends on the contents of static member {@link mAsyncErrors}, we clear\n     * that state here as a side-effect so that if two successive runs happen in the same process,\n     * the asynchronous errors in the second test run won't include errors produced during the first\n     * run.\n     */"}}
{"code": {"body": "    public Collection<ProcessError> runOneActivity(ResolveInfo app) {\n        final long appLaunchWait = 7000;\n        final long homeLaunchWait = 2000;\n\n        Log.i(TAG, String.format(\"\", app.activityInfo.packageName,\n                app.activityInfo.name));\n\n        \n        \n        \n        final Collection<ProcessError> preErrProcs =\n                ProcessError.fromCollection(mActivityManager.getProcessesInErrorState());\n\n        \n        final Intent intent = intentForActivity(app);\n        if (intent == null) {\n            Log.i(TAG, String.format(\"\",\n                    app.activityInfo.packageName, app.activityInfo.name));\n            return Collections.EMPTY_LIST;\n        }\n        getContext().startActivity(intent);\n        try {\n            Thread.sleep(appLaunchWait);\n        } catch (InterruptedException e) {\n            \n        }\n\n        \n        getContext().startActivity(mHomeIntent);\n        try {\n            Thread.sleep(homeLaunchWait);\n        } catch (InterruptedException e) {\n            \n        }\n\n        \n        \n        final Collection<ProcessError> errProcs =\n                ProcessError.fromCollection(mActivityManager.getProcessesInErrorState());\n\n        \n        \n        if (errProcs != null) {\n            Iterator<ProcessError> errIter = errProcs.iterator();\n            while (errIter.hasNext()) {\n                ProcessError err = errIter.next();\n                if (!packageMatches(app, err)) {\n                    \n                    mAsyncErrors.add(err);\n                    errIter.remove();\n                }\n            }\n        }\n        \n        \n        \n        \n        if (errProcs != null && preErrProcs != null) {\n            errProcs.removeAll(preErrProcs);\n        }\n\n        return errProcs;\n    }", "comment": "/**\n     * A method to run the specified Activity and return a {@link Collection} of the Activities that\n     * were in an error state, as listed by {@link ActivityManager.getProcessesInErrorState()}.\n     * <p />\n     * The method will launch the app, wait for 7 seconds, check for apps in the error state, send\n     * the Home intent, wait for 2 seconds, and then return.\n     */"}}
{"code": {"body": "    private static boolean packageMatches(ResolveInfo app, ProcessError err) {\n        final String appPkg = app.activityInfo.packageName;\n        final String errPkg = err.info.processName;\n        Log.d(TAG, String.format(\"\", appPkg, errPkg));\n        return appPkg.equals(errPkg);\n    }", "comment": "/**\n     * A helper function that checks whether the specified error could have been caused by the\n     * specified app.\n     *\n     * @param app The app to check against\n     * @param err The error that we're considering\n     */"}}
{"code": {"body": "    static List<ResolveInfo> getLauncherActivities(PackageManager pm) {\n        final Intent launchable = new Intent(Intent.ACTION_MAIN);\n        launchable.addCategory(Intent.CATEGORY_LAUNCHER);\n        final List<ResolveInfo> activities = pm.queryIntentActivities(launchable, 0);\n        return activities;\n    }", "comment": "/**\n     * A helper function to query the provided {@link PackageManager} for a list of Activities that\n     * can be launched from Launcher.\n     */"}}
{"code": {"body": "    Intent intentForActivity(ResolveInfo app) {\n        final ComponentName component = new ComponentName(app.activityInfo.packageName,\n                app.activityInfo.name);\n        if (getContext().getPackageManager().getComponentEnabledSetting(component) == \n                PackageManager.COMPONENT_ENABLED_STATE_DISABLED) {\n            return null;\n        }\n        final Intent intent = new Intent(Intent.ACTION_MAIN);\n        intent.setComponent(component);\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        intent.addFlags(Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);\n        return intent;\n    }", "comment": "/**\n     * A helper function to create an {@link Intent} to run, given a {@link ResolveInfo} specifying\n     * an activity to be launched.\n     * \n     * @return the {@link Intent} or <code>null</code> if given app is disabled\n     */"}}
{"code": {"body": "    static String reportWrappedListContents(Collection<ProcessError> errList) {\n        List<ProcessErrorStateInfo> newList = new ArrayList<ProcessErrorStateInfo>(errList.size());\n        for (ProcessError err : errList) {\n            newList.add(err.info);\n        }\n        return reportListContents(newList);\n    }", "comment": "/**\n     * Report error reports for {@link ProcessErrorStateInfo} instances that are wrapped inside of\n     * {@link ProcessError} instances.  Just unwraps and calls\n     * {@see reportListContents(Collection<ProcessErrorStateInfo>)}.\n     */"}}
{"code": {"body": "    private static String reportListContents(Collection<ProcessErrorStateInfo> errList) {\n        if (errList == null) return null;\n\n        StringBuilder builder = new StringBuilder();\n\n        Iterator<ProcessErrorStateInfo> iter = errList.iterator();\n        while (iter.hasNext()) {\n            ProcessErrorStateInfo entry = iter.next();\n\n            String condition;\n            switch (entry.condition) {\n            case ActivityManager.ProcessErrorStateInfo.CRASHED:\n                condition = \"\";\n                break;\n            case ActivityManager.ProcessErrorStateInfo.NOT_RESPONDING:\n                condition = \"\";\n                break;\n            default:\n                condition = \"\";\n                break;\n            }\n\n            builder.append(String.format(\"\", entry.processName,\n                    condition, entry.shortMsg));\n            if (entry.condition == ActivityManager.ProcessErrorStateInfo.CRASHED) {\n                builder.append(String.format(\"\", entry.stackTrace));\n            }\n            builder.append(\"\");\n        }\n        return builder.toString();\n    }", "comment": "/**\n     * This helper function will dump the actual error reports.\n     * \n     * @param errList The error report containing one or more error records.\n     * @return Returns a string containing all of the errors.\n     */"}}
{"code": {"body": "public AfnetApp(Environment env) {\n        this.env = env;\n    }", "comment": "/**\n     * Initializes AFNET.\n     * <p>\n     * Spring profiles can be configured with a program arguments --spring.profiles.active=your-active-profile\n     * <p>\n     * You can find more information on how profiles work with JHipster on <a href=\"http://www.jhipster.tech/profiles/\">http://www.jhipster.tech/profiles/</a>.\n     */"}}
{"code": {"body": "    public static void main(String[] args) throws UnknownHostException {\n        SpringApplication app = new SpringApplication(AfnetApp.class);\n        DefaultProfileUtil.addDefaultProfile(app);\n        Environment env = app.run(args).getEnvironment();\n        String protocol = \"\";\n        if (env.getProperty(\"\") != null) {\n            protocol = \"\";\n        }\n        log.info(\"\" +\n                \"\" +\n                \"\" +\n                \"\" +\n                \"\",\n            env.getProperty(\"\"),\n            protocol,\n            env.getProperty(\"\"),\n            protocol,\n            InetAddress.getLocalHost().getHostAddress(),\n            env.getProperty(\"\"),\n            env.getActiveProfiles());\n    }", "comment": "/**\n     * Main method, used to run the application.\n     *\n     * @param args the command line arguments\n     * @throws UnknownHostException if the local host name could not be resolved into an address\n     */"}}
{"code": {"body": "    public static void initialize(String username, String apiKey){\n\n        destroyAllServices();\n\n        \n        sUsername = username;\n        sApiKey = apiKey;\n        Service.isSandbox = username.toLowerCase().contentEquals(\"\");\n    }", "comment": "/**\n     * Initialize the SDK\n     * @param username app username\n     * @param apiKey app API key\n     */"}}
{"code": {"body": "    public static void setLogger(Logger logger) {\n        Service.LOGGER = logger;\n    }", "comment": "/**\n     * Set request logger\n     * @param logger logger object\n     */"}}
{"code": {"body": "    public static <T extends Service> T getService(String serviceName) {\n\n        try {\n            Class<T> tClass = (Class<T>)Class.forName(serviceName);\n            return getService(tClass);\n        } catch (ClassNotFoundException e) {\n            \n            return null;\n        }\n    }", "comment": "/**\n     * Get a service by name\n     * @param serviceName see AfricasTalking.SERVICES_*\n     * @param <T> service type\n     * @return An instance of the requested service\n     */"}}
{"code": {"body": "    private static void destroyAllServices() {\n        Service services[] = new Service[] {\n                getService(SERVICE_APPLICATION),\n                getService(SERVICE_VOICE),\n                getService(SERVICE_SMS),\n                getService(SERVICE_USSD),\n                getService(SERVICE_AIRTIME),\n                getService(SERVICE_PAYMENT),\n                getService(SERVICE_TOKEN)\n        };\n        for (Service service:services) {\n            if (service != null && service.isInitialized()) {\n                service.destroyService();\n            }\n        }\n    }", "comment": "/**\n     * Destroy all initialized services\n     */"}}
{"code": {"body": "    protected void fireTreeStructureChanged(Leaf oldRoot) {\n        int len = treeModelListeners.size();\n        TreeModelEvent e = new TreeModelEvent(this,\n                new Object[]{oldRoot});\n        for (TreeModelListener tml : treeModelListeners) {\n            tml.treeStructureChanged(e);\n        }\n    }", "comment": "/**\n     * The only event raised by this model is TreeStructureChanged with the\n     * root as path, i.e. the whole tree has changed.\n     */"}}
{"code": {"body": "public Batch(int q) { \n\t\tquantity=q;\n\t}", "comment": "/**\n\t * \n\t */"}}
{"code": {"body": "public AGAI() {\n\t\tSystem.out.println(\"\");\n\t}", "comment": "/**\n\t * Instantiates a new aGAI.\n\t */"}}
{"code": {"body": "\tprivate void clear() {\n\t\tList<Point> l = clb.getMap().getPoints(true);\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tRemovePointDrawAICommand cmd = new RemovePointDrawAICommand();\n\t\t\tcmd.pos = l.get(i).getPosition();\n\t\t\tthis.handleEngineCommand(cmd);\n\t\t}\n\t}", "comment": "/**\n\t * Clear.\n\t */"}}
{"code": {"body": "\tpublic int drawPoint(AIFloat3 pos, String label) {\n\t\tlogDebug(\"\" + label);\n\t\tif (pos == null)\n\t\t\treturn -1;\n\t\tAddPointDrawAICommand cmd = new AddPointDrawAICommand();\n\t\tcmd.pos = pos;\n\t\tcmd.label = label;\n\t\treturn handleEngineCommand(cmd);\n\t}", "comment": "/**\n\t * Draw point.\n\t * \n\t * @param pos\n\t *            the pos\n\t * @param label\n\t *            the label\n\t * \n\t * @return the int\n\t */"}}
{"code": {"body": "\tpublic Resource enoughResourcesToBuild(UnitDef unit, IResource fs) {\n\t\tList<Resource> res = clb.getResources();\n\t\tResource ret = null;\n\t\tfloat min = Float.MAX_VALUE;\n\t\tfor (int i = 0; i < res.size(); i++) {\n\t\t\tfloat usage, unitcost, current, income;\n\t\t\tusage = fs.getUseage(i);\n\t\t\tincome = fs.getIncome(i);\n\t\t\tunitcost = unit.getCost(res.get(i)); \n\t\t\tcurrent = fs.getCurrent(i);\n\t\t\t\n\t\t\t\n\t\t\tfloat cur = unitcost - (current + (income - usage));\n\t\t\tif ((cur > 0) && (cur < min)) {\n\t\t\t\tret = res.get(i);\n\t\t\t\tmin = cur;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}", "comment": "/**\n\t * Check for enough resources to build the unit.\n\t * \n\t * @param unit\n\t *            the unit\n\t * @param fs \n\t * \n\t * @return the resource that is mostly missing\n\t */"}}
{"code": {"body": "\tpublic OOAICallback getClb() {\n\t\treturn clb;\n\t}", "comment": "/**\n\t * Gets the callback.\n\t * \n\t * @return the clb\n\t */"}}
{"code": {"body": "\tpublic AGController getController() {\n\t\treturn controller;\n\t}", "comment": "/**\n\t * Gets the controller.\n\t * \n\t * @return the controller\n\t */"}}
{"code": {"body": "\tpublic Resource getEnergy() {\n\t\treturn energy;\n\t}", "comment": "/**\n\t * Gets the energy.\n\t * \n\t * @return the energy\n\t */"}}
{"code": {"body": "\tpublic int getFrame() {\n\t\treturn frame;\n\t}", "comment": "/**\n\t * Gets the current frame (game time) of the game.\n\t * \n\t * @return the frame\n\t */"}}
{"code": {"body": "\tpublic AGInfos getInfos() {\n\t\treturn infos;\n\t}", "comment": "/**\n\t * Gets the Infos Manager.\n\t * \n\t * @return the infos\n\t */"}}
{"code": {"body": "\tpublic AGManagers getManagers() {\n\t\treturn managers;\n\t}", "comment": "/**\n\t * Gets the Manager Managers.\n\t * \n\t * @return the managers\n\t */"}}
{"code": {"body": "\tpublic Resource getMetal() {\n\t\treturn metal;\n\t}", "comment": "/**\n\t * Gets the metal.\n\t * \n\t * @return the metal\n\t */"}}
{"code": {"body": "\tpublic int getTeamId() {\n\t\treturn teamId;\n\t}", "comment": "/**\n\t * Gets the team id.\n\t * \n\t * @return the team id\n\t */"}}
{"code": {"body": "\tpublic AGUnits getUnits() {\n\t\treturn units;\n\t}", "comment": "/**\n\t * Gets the Units Manager.\n\t * \n\t * @return the units\n\t */"}}
{"code": {"body": "\tpublic float getWeaponDamage(UnitDef unit) {\n\t\tList<WeaponMount> w = unit.getWeaponMounts();\n\t\tfloat ret = 0;\n\t\tfor (int i = 0; i < w.size(); i++) {\n\t\t\tif (!w.get(i).getWeaponDef().isNoAutoTarget()) \n\t\t\t\tret = ret + w.get(i).getWeaponDef().getDamage().getTypes().get(i);\n\t\t}\n\t\treturn ret;\n\t}", "comment": "/**\n\t * Gets the weapon damage.\n\t * \n\t * @param unit\n\t *            the unit\n\t * \n\t * @return the weapon damage\n\t */"}}
{"code": {"body": "\tpublic int handleEngineCommand(AICommand command) {\n\t\tif (clb.getEngine().handleCommand(com.springrts.ai.AICommandWrapper.COMMAND_TO_ID_ENGINE, -1,command)!=0){\n\t\t\tlogger.error(\"\");\n\t\t}\n\t\treturn 0;\n\t}", "comment": "/**\n\t * Handle engine command.\n\t * \n\t * @param command\n\t *            the command\n\t * \n\t * @return the int\n\t */"}}
{"code": {"body": "\tpublic int sendTextMsg(String msg) {\n\t\tSendTextMessageAICommand msgCmd = new SendTextMessageAICommand(msg,DEFAULT_ZONE);\n\t\treturn handleEngineCommand(msgCmd);\n\t}", "comment": "/**\n\t * Send text msg.\n\t * \n\t * @param msg\n\t *            the msg\n\t * \n\t * @return the int\n\t */"}}
{"code": {"body": "public AGUnit(AGAI ai, Unit unit) {\n\t\tthis.unit = unit;\n\t\tthis.ai = ai;\n\t}", "comment": "/**\n\t * Instantiates a new aG unit.\n\t * \n\t * @param ai the ai\n\t * @param unit the unit\n\t */"}}
{"code": {"body": "public AGUnit getBuilder() {\n\t\treturn builder;\n\t}", "comment": "/**\n\t * Gets the builder.\n\t * \n\t * @return the builder\n\t */"}}
{"code": {"body": "\tpublic boolean isBuilt() {\n\t\treturn unit.isBeingBuilt();\n\t}", "comment": "/**\n\t * Checks if is built.\n\t * \n\t * @return true, if is built\n\t */"}}
{"code": {"body": "\tpublic int attackAt(AIFloat3 pos) {\n\t\tAICommand command = new AttackAreaUnitAICommand(unit, -1,\n\t\t\t\tnew ArrayList<AICommand.Option>(), 10000, pos, 0);\n\t\treturn ai.handleEngineCommand(command);\n\t}", "comment": "/**\n\t * Attack at position.\n\t * \n\t * @param pos the position to attack\n\t * \n\t * @return the int\n\t */"}}
{"code": {"body": "\tpublic int attackUnit(Unit unit) {\n\t\tAICommand command = new AttackUnitAICommand(unit, -1,\n\t\t\t\tnew ArrayList<AICommand.Option>(), 10000, unit);\n\t\treturn ai.handleEngineCommand(command);\n\t}", "comment": "/**\n\t * Attack unit.\n\t * \n\t * @param unit the unit\n\t * \n\t * @return the int\n\t */"}}
{"code": {"body": "\tpublic int buildUnit(UnitDef type, AIFloat3 pos, int facing) {\n\t\tai.logDebug(\"\"+unit.getDef().getName() +\"\" + type.getName() + pos + facing);\n\t\tAICommand command = new BuildUnitAICommand(unit, -1,\n\t\t\t\tnew ArrayList<AICommand.Option>(), 10000, type, pos, facing);\n\t\treturn ai.handleEngineCommand(command);\n\t}", "comment": "/**\n\t * Builds the unit.\n\t * \n\t * @param type the type\n\t * @param pos the pos\n\t * @param facing the facing\n\t * \n\t * @return the int\n\t */"}}
{"code": {"body": "\tpublic AIFloat3 getBuildPos\t(AIFloat3 pos, UnitDef tobuilt, int radius, int minDistance) {\n\t\tif (!isAbleToBuilt(tobuilt)){\n\t\t\treturn null;\n\t\t}\n\t\tif ((tobuilt.getSpeed()>0) && (tobuilt.getSpeed()>0)){ \n\t\t\tpos=unit.getPos();\n\t\t\treturn pos;\n\t\t}\n\t\tif ((unit.getSpeed()>0) && (canMoveTo(pos))){ \n\t\t\tif (pos==null)\n\t\t\t\tpos=unit.getPos();\n\t\t\tAIFloat3 tmp = ai.getClb().getMap().findClosestBuildSite(tobuilt, pos, radius, minDistance, 0);\n\t\t\tif ((tmp.x == -1) && (tmp.y == 0) && (tmp.z == 0)) {\n\t\t\t\tai.logDebug(tobuilt.getName());\n\t\t\t\tif (pos==null)\n\t\t\t\t\tpos=new AIFloat3();\n\t\t\t\tai.logInfo(\"\" + tobuilt.getName() + \"\" + radius\n\t\t\t\t\t\t+ \"\" + pos.x + \"\" + pos.y + \"\" + pos.z);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn tmp;\n\t\t}\n\t\tif (canMoveTo(pos))\n\t\t\treturn pos;\n\t\tai.logInfo(\"\" + pos.x + \"\" + pos.y + \"\" + pos.z);\n\t\treturn null;\n\t}", "comment": "/**\n\t * Can build at.\n\t * \n\t * @param pos the pos\n\t * @param radius the radius\n\t * @param minDistance the min distance\n\t * @param tobuilt the tobuilt\n\t * \n\t * @return position, if successful, null if can't built there\n\t */"}}
{"code": {"body": "\tpublic void destroyed() {\n\t}", "comment": "/**\n\t * called if a unit is destroyed.\n\t */"}}
{"code": {"body": "\tpublic AGUnit getBuilder() {\n\t\treturn builder;\n\t}", "comment": "/**\n\t * Gets the builder.\n\t * \n\t * @return the builder\n\t */"}}
{"code": {"body": "\tpublic UnitDef getDef() {\n\t\treturn unit.getDef();\n\t}", "comment": "/**\n\t * Gets the def.\n\t * \n\t * @return the def\n\t */"}}
{"code": {"body": "\tpublic AIFloat3 getPos() {\n\t\treturn unit.getPos();\n\t}", "comment": "/**\n\t * Gets the position of the Unit.\n\t * \n\t * @return the pos\n\t */"}}
{"code": {"body": "\tpublic Task getTask() {\n\t\treturn task;\n\t}", "comment": "/**\n\t * Gets the task.\n\t * \n\t * @return the task\n\t */"}}
{"code": {"body": "\tpublic Unit getUnit() {\n\t\treturn this.unit;\n\t}", "comment": "/**\n\t * Gets the unit.\n\t * \n\t * @return the unit\n\t */"}}
{"code": {"body": "\tpublic UnitDef getUnitDef(String str) {\n\t\treturn unit.getDef();\n\t}", "comment": "/**\n\t * Gets the unit definiton.\n\t * \n\t * @param str Short string of the definition (for ex. armcom)\n\t * \n\t * @return the unit definiton\n\t */"}}
{"code": {"body": "\tpublic boolean isIdle() {\n\t\tif (unit.isBeingBuilt())\n\t\t\treturn false;\n\t\treturn (task == null);\n\t}", "comment": "/**\n\t * Checks if is idle.\n\t * \n\t * @return true, if is idle\n\t */"}}
{"code": {"body": "\tpublic int moveTo(AIFloat3 pos) {\n\t\tAICommand command = new MoveUnitAICommand(unit, -1, new ArrayList<AICommand.Option>(), 10000, pos);\n\t\treturn ai.handleEngineCommand(command);\n\t}", "comment": "/**\n\t * Move to position.\n\t * \n\t * @param pos the pos\n\t * \n\t * @return the int\n\t */"}}
{"code": {"body": "\tpublic void setBuilder(AGUnit builder) {\n\t\tthis.builder = builder;\n\t}", "comment": "/**\n\t * Sets the builder.\n\t * \n\t * @param builder the new builder\n\t */"}}
{"code": {"body": "\tpublic void setIdle() {\n\t\tAICommand command = new StopUnitAICommand(unit, -1,\n\t\t\t\tnew ArrayList<AICommand.Option>(), 1000);\n\t\tai.handleEngineCommand(command);\n\t}", "comment": "/**\n\t * Sets Unit to Idle (Stop current command).\n\t */"}}
{"code": {"body": "\tpublic void setPower(boolean power) {\n\t\tAICommand command = new SetOnOffUnitAICommand(unit, -1,\n\t\t\t\tnew ArrayList<AICommand.Option>(), 10000, power);\n\t\tai.handleEngineCommand(command);\n\t}", "comment": "/**\n\t * Sets the power.\n\t * \n\t * @param power the new power\n\t */"}}
{"code": {"body": "\tpublic void setTask(Task task) {\n\t\tif (this.task != null) {\n\t\t\tthis.task.unassign(this);\n\t\t}\n\t\tthis.task = task;\n\t\tif (task != null)\n\t\t\ttask.assign(this);\n\t\telse\n\t\t\tfetchTask(); \n\t}", "comment": "/**\n\t * Sets the task.\n\t * \n\t * @param task the new task\n\t */"}}
{"code": {"body": "\tpublic boolean isAbleToBuilt(UnitDef type){\n\t\tList<UnitDef> buildOptions = unit.getDef().getBuildOptions();\n\t\tfor (int i = 0; i < buildOptions.size(); i++) {\n\t\t\tif (buildOptions.get(i).getUnitDefId() == type.getUnitDefId()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "comment": "/**\n\t * Checks if is able to built.\n\t * \n\t * @param type the type\n\t * \n\t * @return true, if is able to built\n\t */"}}
{"code": {"body": "\tpublic IResource getProduction(){\n\t\tif (production==null){\n\t\t\tproduction = new IResource(ai);\n\t\t\tfor (int i=0; i<ai.getResourcecount(); i++){\n\t\t\t\tproduction.setIncome(i, \n\t\t\t\tai.getUnits().getProduction(getDef(), ai.getClb().getResources().get(i)));\n\t\t\t\t}\n\t\t\t}\n\t\treturn production;\n\t}", "comment": "/**\n\t * Gets the production.\n\t * \n\t * @return the production\n\t */"}}
{"code": {"body": "\tpublic float getMaxSlope() {\n\t\treturn unit.getDef().getMaxSlope();\n\t}", "comment": "/**\n\t * Gets the max slope.\n\t * \n\t * @return the max slope\n\t */"}}
{"code": {"body": "\tpublic float getMinWaterDepth() {\n\t\treturn unit.getDef().getMinWaterDepth();\n\t}", "comment": "/**\n\t * Gets the min water depth.\n\t * \n\t * @return the min water depth\n\t */"}}
{"code": {"body": "\tpublic float getMaxWaterDepth() {\n\t\treturn unit.getDef().getMaxWaterDepth();\n\t}", "comment": "/**\n\t * Gets the max water depth.\n\t * \n\t * @return the max water depth\n\t */"}}
{"code": {"body": "\tpublic boolean canMoveTo(AIFloat3 pos){\n\t\tif (pos==null) \n\t\t\treturn true;\n\t\tISector from=ai.getInfos().getSectors().getSector(unit.getPos());\n\t\tif (ai.getInfos().getSectors().isPosInSec(pos,from)) \n\t\t\treturn true;\n\t\tISector to=ai.getInfos().getSectors().getSector(pos);\n\t\tLinkedList<ISector> path = ai.getInfos().getSectors().getSecurePath(from,to, this);\n\t\treturn (path!=null);\n\t}", "comment": "/**\n\t * Can move to.\n\t * \n\t * @param pos the pos\n\t * \n\t * @return true, if successful\n\t */"}}
{"code": {"body": "\tpublic int getBuildSpeed() {\n\t\treturn Math.round(unit.getDef().getBuildSpeed());\n\t}", "comment": "/**\n\t * Gets the builds the speed.\n\t * \n\t * @return the builds the speed\n\t */"}}
{"code": {"body": "\tpublic void fetchTask() {\n\t\tai.getManagers().assignTask(this);\n\t}", "comment": "/**\n\t * Fetch task.\n\t */"}}
{"code": {"body": "\tpublic int patrolTo(AIFloat3 pos) {\n\t\tAICommand command = new PatrolUnitAICommand(unit, -1, new ArrayList<AICommand.Option>(), 10000, pos);\n\t\treturn ai.handleEngineCommand(command);\n\t}", "comment": "/**\n\t * Patrol to.\n\t * \n\t * @param pos the pos\n\t * \n\t * @return the int\n\t */"}}
{"code": {"body": "\tpublic float getLOS() {\n\t\tfloat ret, tmp;\n\t\tret=unit.getDef().getLosRadius();\n\n\t\ttmp=unit.getDef().getRadarRadius();\n\t\tif (tmp>ret)\n\t\t\tret=tmp;\n\t\ttmp=unit.getDef().getSonarRadius();\n\t\tif (tmp>ret)\n\t\t\tret=tmp;\n\t\treturn ret;\n\t}", "comment": "/**\n\t * Gets the lOS.\n\t * \n\t * @return the lOS\n\t */"}}
{"code": {"body": "public ADPAgeDepthPoint( ) {\n        Age = Double.NaN;\n        Depth = Double.NaN;\n    }", "comment": "/** Creates a new instance of ADPAgeDepthPoint filled with NaN's */"}}
{"code": {"body": "public ADPAgeDepthPoint( double age, double depth ) {\n        Age = age;\n        Depth = depth;\n    }", "comment": "/**\n     * Creates a new instance of ADPAgeDepthPoint using two doubles\n     *\n     * @param age the age of the event\n     * @param depth the depth of the event\n     */"}}
{"code": {"body": "public Piloto(String name, String route, int flight_hours) {\n        this.name = name;\n        this.route = route;\n        this.flight_hours = this.flight_hours + flight_hours;\n    }", "comment": "/**public void setSalary(float salary) {\n        this.salary = this.salary + salary;\n    }**/"}}
{"code": {"body": "    public String getName() {\n        return this.name;\n    }", "comment": "/**public void setSalary(float salary) {\n        this.salary = this.salary + salary;\n    }**/"}}
{"code": {"body": "    public void setName(String name) {\n        this.name = name;\n    }", "comment": "/**public void setSalary(float salary) {\n        this.salary = this.salary + salary;\n    }**/"}}
{"code": {"body": "    public String getRoute() {\n        return this.route;\n    }", "comment": "/**public void setSalary(float salary) {\n        this.salary = this.salary + salary;\n    }**/"}}
{"code": {"body": "    public void setRoute(String route) {\n        this.route = route;\n    }", "comment": "/**public void setSalary(float salary) {\n        this.salary = this.salary + salary;\n    }**/"}}
{"code": {"body": "    public int getFlight_hours() {\n        return this.flight_hours;\n    }", "comment": "/**public void setSalary(float salary) {\n        this.salary = this.salary + salary;\n    }**/"}}
{"code": {"body": "    public void setFlight_hours(int flight_hours) {\n        this.flight_hours = this.flight_hours + flight_hours;\n    }", "comment": "/**public void setSalary(float salary) {\n        this.salary = this.salary + salary;\n    }**/"}}
{"code": {"body": "    public double getSalary() {\n\n        double aux;\n\n        if (flight_hours <= 100) {\n            aux = 1000 * tax;\n            salary = 1000 - aux;\n        } else {\n            if (flight_hours <= 200) {\n                aux = 2500 * tax;\n                salary = 2500 - aux;\n            } else {\n                \n                \n                double tax16 = 2500 * 0.16;\n                double tax5 = 2000 * 0.05;\n                tax16 = 2500 - tax16;\n                tax5 = 2000 - tax5;\n                salary = tax16 + tax5;\n            }\n        }\n        return salary;\n    }", "comment": "/**public void setSalary(float salary) {\n        this.salary = this.salary + salary;\n    }**/"}}
{"code": {"body": "\tprivate List<SbbCwbbQykjsydwZcfzb> getPojo(String xml) throws Exception {\n\t\tList<SbbCwbbQykjsydwZcfzb> result = new ArrayList<>();\n\t\tDocument doc = XmlTools.loadXml(xml);\n\t\tElement root = doc.getRootElement();\n\t\tList<Element> sysydwzcfzbdxxGridlb = root.getChildren(\"\");\n\t\tfor (Element element : sysydwzcfzbdxxGridlb) {\n\t\t\tSbbCwbbQykjsydwZcfzb sbbCwbbQykjsydwZcfzb = new SbbCwbbQykjsydwZcfzb();\n\t\t\tXmlTools.parseBean(element, sbbCwbbQykjsydwZcfzb, false);\n\t\t\tresult.add(sbbCwbbQykjsydwZcfzb);\n\t\t}\n\t\treturn result;\n\t}", "comment": "/**\n\t * \u4eceXML\u4e2d\u63d0\u53d6\u6570\u636e\n\t * \n\t * @param xml\n\t * @return\n\t * @throws Exception\n\t */"}}
{"code": {"body": "\tpublic PrivateKey getPrivateKey() {\n\t\treturn privateKey;\n\t}", "comment": "/**\n\t * \u83b7\u53d6\u79c1\u94a5\u5bf9\u8c61\n\t * \n\t * @return\n\t */"}}
{"code": {"body": "\tpublic PublicKey getPublicKey() {\n\t\treturn publicKey;\n\t}", "comment": "/**\n\t * \u83b7\u53d6\u516c\u94a5\u5bf9\u8c61\n\t * \n\t * @return\n\t */"}}
{"code": {"body": "\tpublic String getPrivateKeyWithBase64() {\n\t\treturn BASE64Utils.encode(privateKey.getEncoded());\n\t}", "comment": "/**\n\t * \u83b7\u53d6\u79c1\u94a5\u5b57\u7b26\u4e32\uff0c\u901a\u8fc7Base64\u7f16\u7801\n\t * \n\t * @return\n\t */"}}
{"code": {"body": "\tpublic String getPublicKeyWithBase64() {\n\t\treturn BASE64Utils.encode(publicKey.getEncoded());\n\t}", "comment": "/**\n\t * \u83b7\u53d6\u516c\u94a5\u5b57\u7b26\u4e32\uff0c\u901a\u8fc7Base64\u7f16\u7801\n\t * \n\t * @return\n\t */"}}
{"code": {"body": "\tpublic static RSACert build() {\n\t\tKeyPair keyPair = RSAUtils.generateKey();\n\t\tRSACert cert = new RSACert();\n\t\tcert.privateKey = keyPair.getPrivate();\n\t\tcert.publicKey = keyPair.getPublic();\n\t\treturn cert;\n\t}", "comment": "/**\n\t * \u521b\u5efa\u8bc1\u4e66\u5bf9\u8c61\n\t * \n\t * @return\n\t */"}}
{"code": {"body": "public Accesstoken() {\n\t}", "comment": "/** default constructor */"}}
{"code": {"body": "\tpublic CustomerDlhtInfo findCustHtInfoById(Integer id) throws Exception {\n\t\treturn dao.get(CustomerDlhtInfo.class, id);\n\t}", "comment": "/**\n\t * \n\t * @Title: findCustHtInfoById\n\t * @Description:(\u6839\u636eid\u67e5\u8be2\u5408\u540c\u4fe1\u606f)\n\t * @param id\n\t * @return\n\t * @throws Exception\n\t * @author hning\n\t * @version 1.0\n\t * @date 2018\u5e741\u67083\u65e5 \u4e0b\u53482:06:58\n\t */"}}
{"code": {"body": "\tpublic CustomerHtFile findCustHtFilebyId(Integer id) throws Exception {\n\t\treturn dao.get(CustomerHtFile.class, id);\n\t}", "comment": "/**\n\t * \n\t * @Title: findCustHtFilebyId\n\t * @Description: (\u6839\u636eid\u67e5\u8be2\u5408\u540c\u9644\u4ef6)\n\t * @param id\n\t * @return\n\t * @throws Exception\n\t * @author hning\n\t * @version 1.0\n\t * @date 2018\u5e741\u67085\u65e5 \u4e0a\u53489:54:27\n\t */"}}
{"code": {"body": "\tpublic List<CustomerHtFile> findCustHtFleByHtId(Integer htId) {\n\t\tString hql = \"\";\n\t\treturn dao.query(hql, new Object[] { htId });\n\t}", "comment": "/**\n\t * \n\t * @Title: findCustHtFleByHtId\n\t * @Description: (\u6839\u636e\u5408\u540cid\u67e5\u8be2\u5408\u540c\u9644\u4ef6\u56fe\u7247\u4fe1\u606f)\n\t * @param htId\n\t * @return\n\t * @author hning\n\t * @version 1.0\n\t * @date 2018\u5e741\u67083\u65e5 \u4e0b\u53482:09:31\n\t */"}}
{"code": {"body": "\tpublic List<Map<String, Object>> findHtInfoByCustbean(Page page, CustHtBean bean) throws Exception {\n\t\tList<String> conditions = new ArrayList<>();\n\t\tList<Object> params = new ArrayList<>();\n\n\t\t\n\t\tif (bean.getEid() != null) {\n\t\t\tconditions.add(\"\");\n\t\t\tparams.add(bean.getEid());\n\t\t}\n\t\t\n\t\tif (bean.getCustId() != null) {\n\t\t\tconditions.add(\"\");\n\t\t\tparams.add(bean.getCustId());\n\t\t}\n\t\t\n\t\tif (StringUtils.isNotEmpty(bean.getHtNum())) {\n\t\t\tconditions.add(\"\");\n\t\t\tparams.add(\"\" + bean.getHtNum() + \"\");\n\t\t}\n\t\t\n\t\tif (StringUtils.isNotEmpty(bean.getHtName())) {\n\t\t\tconditions.add(\"\");\n\t\t\tparams.add(\"\" + bean.getHtName() + \"\");\n\t\t}\n\t\t\n\t\tif (StringUtils.isNotEmpty(bean.getHtServiceUser())) {\n\t\t\tconditions.add(\"\");\n\t\t\tparams.add(\"\" + bean.getHtServiceUser() + \"\");\n\t\t}\n\n\t\tif (StringUtils.isNotEmpty(bean.getCustName())) {\n\t\t\tconditions.add(\"\");\n\t\t\tparams.add(\"\" + bean.getCustName() + \"\");\n\t\t}\n\n\t\t\n\t\tString condition = \"\" + StringUtils.join(conditions.toArray(), \"\");\n\t\tString countSql = \"\"\n\t\t\t\t+ condition;\n\n\t\tMap<String, Type> type = new HashMap<>();\n\t\ttype.put(\"\", IntegerType.INSTANCE);\n\t\tMap<String, Object> map = dao.uniqueBySQL(countSql, type, params.toArray());\n\t\tint count = (int) map.get(\"\");\n\t\tpage.setRows(count);\n\n\t\tString sql = \"\"\n\t\t\t\t+ \"\"\n\t\t\t\t+ \"\" + condition;\n\t\tif (count > 0) {\n\t\t\tMap<String, Type> types = new HashMap<>();\n\t\t\ttypes.put(\"\", IntegerType.INSTANCE);\n\t\t\ttypes.put(\"\", StringType.INSTANCE);\n\t\t\ttypes.put(\"\", StringType.INSTANCE);\n\t\t\ttypes.put(\"\", StringType.INSTANCE);\n\t\t\ttypes.put(\"\", DoubleType.INSTANCE);\n\t\t\ttypes.put(\"\", DateType.INSTANCE);\n\t\t\ttypes.put(\"\", DateType.INSTANCE);\n\t\t\ttypes.put(\"\", StringType.INSTANCE);\n\t\t\ttypes.put(\"\", StringType.INSTANCE);\n\n\t\t\treturn dao.queryBySQL(sql, types, page.getPage(), page.getPageSize(), params.toArray());\n\t\t}\n\t\treturn new ArrayList<Map<String, Object>>();\n\t}", "comment": "/**\n\t * \n\t * @Title: findHtInfoByCustId\n\t * @Description: (\u67e5\u8be2\u6307\u5b9a\u5ba2\u6237\u5408\u540c\u4fe1\u606f)\n\t * @param custId\n\t * @return\n\t * @throws Exception\n\t * @author hning\n\t * @version 1.0\n\t * @date 2017\u5e7412\u670828\u65e5 \u4e0b\u53487:39:41\n\t */"}}
{"code": {"body": "\tpublic Boolean findCustHtByhtNum(Integer eId, String htNum) {\n\t\tString hql = \"\";\n\t\tLong count = dao.unique(hql, new Object[] { eId, htNum });\n\t\treturn count > 0 ? false : true;\n\t}", "comment": "/**\n\t * \n\t * @Title: findCustHtByhtNum\n\t * @Description: (\u5224\u65ad\u5ba2\u6237\u5408\u540c\u53f7\u5728\u8be5\u4ee3\u7406\u673a\u6784\u4e2d\u552f\u4e00\uff0c\u82e5\u6709\u91cd\u590d\u8fd4\u56defalse)\n\t * @param eId\n\t * @param htNum\n\t * @return\n\t * @author hning\n\t * @version 1.0\n\t * @date 2018\u5e741\u67083\u65e5 \u4e0a\u53489:21:42\n\t */"}}
{"code": {"body": "\tpublic Boolean findCustHtByhtName(Integer eId, String htName) {\n\t\tString hql = \"\";\n\t\tLong count = dao.unique(hql, new Object[] { eId, htName });\n\t\treturn count > 0 ? false : true;\n\t}", "comment": "/**\n\t * \n\t * @Title: findCustHtByhtName\n\t * @Description: (\u5224\u65ad\u5ba2\u6237\u5408\u540c\u540d\u79f0\u5728\u8be5\u4ee3\u7406\u673a\u6784\u4e2d\u552f\u4e00\uff0c\u82e5\u6709\u91cd\u590d\u8fd4\u56defalse)\n\t * @param eId\n\t * @param htName\n\t * @return\n\t * @author hning\n\t * @version 1.0\n\t * @date 2018\u5e741\u67083\u65e5 \u4e0a\u53489:24:05\n\t */"}}
{"code": {"body": "\tpublic Long findCustHtNumByCustId(Integer custId) {\n\t\tString countSql = \"\";\n\t\tLong count = dao.unique(countSql, custId);\n\t\treturn count;\n\t}", "comment": "/**\n\t * \n\t * @Title: findCustHtNumByCustId\n\t * @Description: (\u67e5\u8be2\u5ba2\u6237\u5408\u540c\u6570)\n\t * @param custId\n\t * @return\n\t * @author hning\n\t * @version 1.0\n\t * @date 2018\u5e741\u67089\u65e5 \u4e0a\u534810:20:01\n\t */"}}
{"code": {"body": "public SbbCwbbQykjsydwSrzcbYb() {\n\t}", "comment": "/** default constructor */"}}
{"code": {"body": "public SbbCwbbQykjsydwSrzcbYb(Integer CId, Integer sbmxId, String sssqQ,", "comment": "/** minimal constructor */"}}
{"code": {"body": "public SbbCwbbQykjsydwSrzcbYb(Integer CId, Integer sbmxId, String sssqQ,", "comment": "/** minimal constructor */"}}
{"code": {"body": "\tprotected Response call(Request req, String responseCharset) {\n\t\tif (StringUtils.equals(req.getGdsbz(), Constants.LOCAL_TAX_INFO)) {\n\t\t\treturn callDsjk(req, responseCharset);\n\t\t} else {\n\t\t\treturn callGsjk(req, responseCharset);\n\t\t}\n\t}", "comment": "/**\n\t * \u8c03\u7528\u63a5\u53e3\n\t * \n\t * @param req\n\t * @param responseCharset\n\t * @return\n\t */"}}
{"code": {"body": "\tprotected Response callGsjk(Request req, String responseCharset) {\n\t\treturn send(req, url, responseCharset);\n\t}", "comment": "/**\n\t * \u8c03\u7528\u56fd\u7a0e\u63a5\u53e3\n\t * \n\t * @param req\n\t * @param responseCharset\n\t * @return\n\t */"}}
{"code": {"body": "\tprotected Response callDsjk(Request req, String responseCharset) {\n\t\treturn send(req, localtaxUrl, responseCharset);\n\t}", "comment": "/**\n\t * \u8c03\u7528\u5730\u7a0e\u63a5\u53e3\n\t * \n\t * @param req\n\t * @return\n\t */"}}
{"code": {"body": "\tprivate Response parseResult(String xml, String responseCharset, String gdsbz) throws Exception {\n\t\tResponse resp = new Response(xml);\n\t\tresp.setGdsbz(gdsbz);\n\t\tfor (SubPackage subPackage : resp.getBusinessContent()) {\n\t\t\t\n\t\t\tdecrypt(subPackage, responseCharset);\n\t\t}\n\t\treturn resp;\n\t}", "comment": "/**\n\t * \u5904\u7406\u901a\u7528\u89e3\u5bc6\u5bf9\u8c61\n\t * \n\t * @param xml\n\t * @param responseCharset\n\t * @param gdsbz\n\t * @return\n\t * @throws Exception\n\t */"}}
{"code": {"body": "\tprivate String getResult(Response resp, String fileNameHead) {\n\t\tString xml = null;\n\t\tfor (SubPackage subPackage : resp.getBusinessContent()) {\n\t\t\tif (!subPackage.getFileName().toUpperCase().startsWith(fileNameHead)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (StringUtils.isEmpty((String) subPackage.getContent())) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\txml = (String) subPackage.getContent();\n\t\t\tbreak;\n\t\t}\n\t\treturn xml;\n\t}", "comment": "/**\n\t * \u4ece\u7ed3\u679c\u5217\u8868\u4e2d\u83b7\u53d6\u5b9e\u9645\u54cd\u5e94\n\t * \n\t * @param resp\n\t * @param fileNameHead\n\t * @return\n\t */"}}
{"code": {"body": "\tprivate Response send(Request req, String url, String responseCharset) {\n\t\tString responseContent = null;\n\t\tlong start = System.currentTimeMillis();\n\t\tlog.info(\"\" + url);\n\t\tString reqXml = \"\";\n\t\tInteger statusCode = null;\n\t\ttry {\n\t\t\t\n\t\t\tfor (SubPackage subPackage : req.getSubPackages()) {\n\t\t\t\tencrypt(subPackage, req.getRouterSender());\n\t\t\t}\n\t\t\tCloseableHttpClient clients = HttpClients.createDefault();\n\t\t\tHttpPost post = new HttpPost(url);\n\t\t\treqXml = req.toXml();\n\t\t\tlog.info(\"\" + reqXml);\n\t\t\tHttpEntity entity = new ByteArrayEntity(reqXml.getBytes(), ContentType.APPLICATION_XML);\n\t\t\tpost.setEntity(entity);\n\t\t\tCloseableHttpResponse response = clients.execute(post);\n\t\t\tstatusCode = response.getStatusLine().getStatusCode();\n\t\t\tif (statusCode == HTTP_SUCCESS_CODE) {\n\t\t\t\ttry (InputStream in = response.getEntity().getContent(); ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n\t\t\t\t\tIOUtils.copy(in, out);\n\t\t\t\t\tresponseContent = out.toString();\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tlog.info(\"\" + responseContent);\n\t\t\t\t\treturn parseResult(responseContent, responseCharset, req.getGdsbz());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.info(\"\" + statusCode);\n\t\t\t\treturn new Response(Response.HTTP_ERROR_CODE, String.format(Response.HTTP_ERROR_MESSAGE, statusCode));\n\t\t\t}\n\t\t} catch (ParseException e) {\n\t\t\treturn new Response(Response.PARSE_ERROR_CODE, e.getMessage());\n\t\t} catch (Exception e) {\n\t\t\tint errorCode = iLogService.saveException(e);\n\t\t\treturn new Response(Response.LOCAL_ERROR_CODE, String.format(Response.LOCAL_ERROR_MESSAGE, errorCode));\n\t\t} finally {\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tlog.info(\"\" + ((end - start) / 1000.00d) + \"\");\n\n\t\t\tSysInterfaceRecordLog log = new SysInterfaceRecordLog();\n\t\t\tlog.setSender(req.getRouterSender());\n\t\t\tlog.setServiceId(req.getIdentityServiceId());\n\t\t\tlog.setReqTime(new Timestamp(System.currentTimeMillis()));\n\t\t\tlog.setReqBw(reqXml);\n\t\t\tlog.setRespBw(responseContent);\n\t\t\tlog.setReturnCode(statusCode);\n\t\t\tlog.setGdsbz(req.getGdsbz());\n\t\t\tinterfaceRecordService.saveLog(log);\n\t\t}\n\t}", "comment": "/**\n\t * \u53d1\u9001\u63a5\u53e3\u8c03\u7528\u7533\u8bf7\n\t * \n\t * @param req\n\t * @param url\n\t * @param responseCharset\n\t * @return\n\t */"}}
{"code": {"body": "\tprivate void encrypt(SubPackage subPackage, String nsrsbh) throws IOException {\n\t\tif (subPackage == null || nsrsbh == null) {\n\t\t\tthrow new NullPointerException();\n\t\t}\n\t\t\n\t\tbyte[] bytes = null;\n\t\tif (subPackage.getContent() instanceof String) {\n\t\t\ttry (ByteArrayOutputStream out = new ByteArrayOutputStream(((String) subPackage.getContent()).getBytes().length);) {\n\t\t\t\ttry (ZipOutputStream zipOut = new ZipOutputStream(out); ByteArrayInputStream in = new ByteArrayInputStream(((String) subPackage.getContent()).getBytes());) {\n\t\t\t\t\tZipEntry entry = new ZipEntry(subPackage.getFileName());\n\t\t\t\t\tzipOut.putNextEntry(entry);\n\t\t\t\t\tIOUtils.copy(in, zipOut);\n\t\t\t\t\tzipOut.closeEntry();\n\t\t\t\t}\n\t\t\t\tbytes = out.toByteArray();\n\t\t\t}\n\t\t} else {\n\t\t\tbytes = (byte[]) subPackage.getContent();\n\t\t}\n\t\tDesUtil desUtil = new DesUtil();\n\t\tString key = desUtil.decMakeKey();\n\t\t\n\t\tString step2NsrsbhVersion = StringUtils.leftPad(nsrsbh, 22, \"\") + this.version;\n\t\t\n\t\tString step3CRC = CRCUtils.calcStrCRCValue(step2NsrsbhVersion);\n\t\t\n\t\tString step4encStr = desUtil.getEncStr(bytes, key);\n\t\t\n\t\tString step5encKey = RSAAdapter.encryptByPrivate(this.privateKey, key.getBytes());\n\t\t\n\t\tsubPackage.setContent(step2NsrsbhVersion + step3CRC + step5encKey + step4encStr);\n\t}", "comment": "/**\n\t * \u901a\u7528\u52a0\u5bc6\n\t * <ol>\n\t * <li>\u52a0\u5bc6\u8fc7\u7a0b\u9996\u5148\u5c06XML\u6309\u7167filename\u538b\u7f29\u5230\u4e00\u4e2azip\u6d41\uff0c\u5e76\u83b7\u53d6byte\u6570\u7ec4</li>\n\t * <li>\u5c06\u7a0e\u53f7\u6269\u5145\u523022\u4f4d\uff0c\u8fde\u63a58\u4f4d\u63a5\u53e3\u7248\u672c\uff08\u5ba2\u6237\u7aef\u7248\u672c\uff09</li>\n\t * <li>\u8ba1\u7b97\u7b2c\u4e8c\u6b65\u83b7\u53d6\u7684\u5b57\u7b26\u4e32\uff0c\u83b7\u5f978\u4f4dCRC\uff0c\u8fde\u63a5\u5230\u4fe1\u606f\u4e2d</li>\n\t * <li>\u968f\u673a\u751f\u62108\u4f4d\u5bc6\u94a5\uff0c\u4f7f\u7528\u975e\u6807\u51c6DES\u52a0\u5bc6\u7b2c\u4e00\u6b65\u5f97\u5230\u7684\u5b57\u8282\u6570\u7ec4</li>\n\t * <li>\u4f7f\u7528\u975e\u6807\u51c6RSA\uff0c\u901a\u8fc7\u79c1\u94a5\uff0c\u5c06\u7b2c4\u6b65\u7684\u968f\u673a\u5bc6\u94a5\u52a0\u5bc6\uff0c\u83b7\u53d6128\u4f4d\u5bc6\u94a5\u4e32</li>\n\t * <li>\u8fde\u63a5\u7b2c\u4e8c\u81f3\u4e94\u6b65(2,3,5,4)\u7684\u5b57\u7b26\u4e32\uff0c\u83b7\u53d6\u6700\u7ec8\u52a0\u5bc6\u6570\u636e</li>\n\t * </ol>\n\t * \n\t * @param content\n\t *            \u8981\u52a0\u5bc6\u7684\u5185\u5bb9(XML)\n\t * @param nsrsbh\n\t *            \u7eb3\u7a0e\u4eba\u8bc6\u522b\u53f7\n\t * @throws NullPointerException\n\t *             \u5f53 content\u3001nsrsbh\u6216filename\u4e3a\u7a7a\u65f6\u629b\u51fa\u7a7a\u6307\u9488\u5f02\u5e38\n\t * @throws IOException\n\t */"}}
{"code": {"body": "\tprivate void decrypt(SubPackage subPackage, String responseCharset) throws Exception {\n\t\tPattern pattern = Pattern.compile(\"\");\n\t\tMatcher matcher = pattern.matcher((String) subPackage.getContent());\n\t\tmatcher.matches();\n\t\tString nsrsbh = matcher.group(1);\n\t\tString version = matcher.group(2);\n\t\tString crc = matcher.group(3);\n\t\tString encKey = matcher.group(4);\n\t\tString encStr = matcher.group(5);\n\t\t\n\t\tif (!StringUtils.equals(CRCUtils.calcStrCRCValue(nsrsbh + version), crc)) {\n\t\t\tthrow new ParseException(\"\");\n\t\t}\n\t\t\n\t\tString key = RSAAdapter.decryptByPrivate(this.privateKey, encKey.getBytes());\n\t\t\n\t\tDesUtil desUtil = new DesUtil();\n\t\tbyte[] bytes = desUtil.getDecByte(encStr, key);\n\t\t\n\t\ttry (ByteArrayOutputStream out = new ByteArrayOutputStream();) {\n\t\t\ttry (ByteArrayInputStream in = new ByteArrayInputStream(bytes); ZipInputStream zipIn = new ZipInputStream(in);) {\n\t\t\t\twhile (true) {\n\t\t\t\t\tZipEntry entry = zipIn.getNextEntry();\n\t\t\t\t\tif (entry == null) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (!entry.isDirectory() && entry.getName().equals(subPackage.getFileName())) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tIOUtils.copy(zipIn, out);\n\t\t\t\t\t}\n\t\t\t\t\tzipIn.closeEntry();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (StringUtils.isEmpty(responseCharset)) {\n\t\t\t\tresponseCharset = DEFAULT_RESPONSE_NAME;\n\t\t\t}\n\t\t\tsubPackage.setContent(out.toString(responseCharset));\n\t\t}\n\t}", "comment": "/**\n\t * \u7edf\u4e00\u89e3\u5bc6\u5904\u7406 \u89e3\u5bc6\u6d41\u7a0b\n\t * <ol>\n\t * <li>\u5206\u89e3content\u5185\u5bb9</li>\n\t * <li>\u5f97\u523022\u4f4d\u7a0e\u53f7</li>\n\t * <li>\u5f97\u52308\u4f4d\u7248\u672c</li>\n\t * <li>\u5f97\u52308\u4f4dCRC</li>\n\t * <li>\u5f97\u5230128\u4f4d\u5bc6\u94a5</li>\n\t * <li>\u5f97\u5230\u5bc6\u6587</li>\n\t * <li>\u6821\u9a8cCRC</li>\n\t * <li>\u89e3\u5bc6\u5bc6\u94a5</li>\n\t * <li>\u89e3\u5bc6\u5bc6\u6587</li>\n\t * <li>\u89e3\u538b\u7f29\u5f97\u5230\u5b9e\u9645\u62a5\u6587</li>\n\t * </ol>\n\t * \n\t * @param subPackage\n\t * @param responseCharset\n\t * @throws Exception\n\t */"}}
{"code": {"body": "public Interfaz() {\n        initComponents();\n        DefaultTableModel tm = (DefaultTableModel) listaContactos.getModel();\n        tm.setNumRows(7);\n        for (int i = 0; i < 7; i++) {\n            tm.addRow(new Object[]{\"\"});\n        }\n        tm.setValueAt(\"\", 0, 0);\n        tm.setValueAt(\"\", 1, 0);\n        tm.setValueAt(\"\", 2, 0);\n        listaContactos.setModel(tm);\n    }", "comment": "/**\n     * Creates new form Interfaz\n     */"}}
{"code": {"body": "    public static void main(String args[]) {\n        \n\n        \n        java.awt.EventQueue.invokeLater(new Runnable() {\n            public void run() {\n                new Interfaz().setVisible(true);\n            }\n        });\n    }", "comment": "/**\n     * @param args the command line arguments\n     */"}}
{"code": {"body": "\tpublic static void main( String[] args )  {\n\t\t\n\t\t\n\t\tLogManager lLogMgr = null;\n\t\tSimulationEntry lEntry = null;\n\t\t\n\t\t\n\t\ttry {\n\t\t\t\n\t\t\t\n\t\t\tlLogMgr = new LogManager();\n\t\t\tlLogMgr.init();\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tlEntry = new SimulationEntry( args );\n\t\t\tlEntry.start();\n\t\t\t\n\t\t} catch( Exception el ) {\n\t\t\tlLogMgr.flush( LogManager.DEFAULT );\n\t\t\tlLogMgr.shutdown();\n\t\t} \n\t}", "comment": "/** Entry point of any Java(TM) application\n\t * \n\t * This functions is the entry point of any Java(TM) application. It \n\t * creates an entry-point to the simulation. This entry-point parses the\n\t * arguments and then launches the simulation... \n\t */"}}
{"code": {"body": "public AuctionCompanyState( AgentProfile ap, AgentState as ) {\n\t\tsuper(ap,as);\n\t}", "comment": "/**\n\t * Constructor of the company state\n\t * \n\t * @param ap the company profile object\n\t * @param as the parent state object\n\t */"}}
{"code": {"body": "\tpublic void execute( Action<?> action ) {\n\t\t\n\t\t\n\t\tswitch( mState ) {\n\t\t\n\t\t\t\n\t\t\tcase AS_SETUP: \n\t\t\t\thandleSetupState(); \n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\n\t\t\tcase AS_IDLE: \n\t\t\t\thandleIdleState(); \n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\n\t\t\tcase AS_AUCTION_START: \n\t\t\t\thandleAuctionStartState(); \n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\n\t\t\tcase AS_AUCTION_ITEM: \n\t\t\t\thandleAuctionItemState( action ); \n\t\t\t\tbreak;\n\t\t\n\t\t\t\n\t\t\tcase AS_AUCTION_END: \n\t\t\t\thandleAuctionTerminateState(); \n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\n\t\t\tcase AS_FINISHED:\n\t\t\t\tbreak;\n\t\t}\n\t}", "comment": "/**\n\t * Executes the behavior of the agent state\n\t */"}}
{"code": {"body": "\tprivate void handleSetupState() {\n\n\t\t\n\t\tinfo( \"\" );\n\n\t\t\n\t\tif ( mListOfTasks == null ) {\n\t\t\tmListOfTasks = new ArrayList<Task>();\n\t\t}\n\n\t\t\n\t\tif ( mAuctionBids == null ) {\n\t\t\tmAuctionBids = new HashMap<AID,Double>();\n\t\t}\n\t\t\n\t\t\n\t\tmState = AgentStateEnum.AS_IDLE;\n\t}", "comment": "/**\n\t * Handle the SETUP state.\n\t */"}}
{"code": {"body": "\tprivate void handleIdleState() {\n\n\t\t\n\t\tinfo( \"\" );\n\n\t\t\n\t\tmState = AgentStateEnum.AS_AUCTION_START;\n\t}", "comment": "/**\n\t * Handle the IDLE state.\n\t */"}}
{"code": {"body": "\tpublic void notifyTaskBatchCreation() {\n\t\tSystem.out.println( \"\" );\n\t\tif ( mState==AgentStateEnum.AS_FINISHED ) {\n\t\t\tmState = AgentStateEnum.AS_IDLE;\n\t\t}\n\t}", "comment": "/**\n\t * Notified the company agent that a task batch was created\n\t */"}}
{"code": {"body": "\tprivate void handleAuctionStartState() {\n\t\t\n\t\t\n\t\tinfo( \"\" );\n\n\t\t\n\t\tif ( mBarrier==null ) {\n\t\t   mBarrier = new TimeoutBarrier<AID>();\t\t\t\n\t\t}\n\t\t\t\t\n\t\t\n\t\tmBarrier.reset();\n\t\t\t\t\n\t\t\n\t\tfor( AgentProfile ap : mProfile.getChildren() ) {\n\t\t\t\n\t\t\t\n\t\t   info( \"\" + ap.getName() + \"\" + ap.getID() + \"\" );\n\t\t   \n\t\t   \n\t\t   mBarrier.register( ap.getID() );\n\t\t}\n\t\t\n\t\t\n\t\tTaskManager taskMgr = TaskManager.getInstance();\n\t\t\n\t\t\n\t\tArrayList<Task> lTaskList = taskMgr.getTaskList( false );\n\t\t\n\t\t\n\t\tdebug( \"\" );\n\t\t\n\t\t\n\t\tmListOfTasks.clear();\n\t\t\n\t\t\n\t\tfor( Task t : lTaskList ) {\n\t\t\t\n\t\t\t\n\t\t\tdebug( \"\" + t.toString() );\n\t\t\t\n\t\t\t\n\t\t\tmListOfTasks.add( t );\n\t\t}\n\n\t\t\n\t\tmAuctionBids.clear();\n\t\t\n\t\t\n\t\tfor ( AgentProfile ap : mProfile.getChildren() ) {\n\t\t\t\n\t\t\t\n\t\t\tmAuctionBids.put( ap.getID(), 0.0 );\n\n\t\t\t\n\t\t\tAuctionStartSignal signal =\n\t\t\t\tnew AuctionStartSignal(getObjectID(),ap.getAgent().getObjectID());\n\t\t\t\n\t\t\t\n\t\t\tap.getState().notifySignal( signal );\n\t\t\t\n\t\t\t\n\t\t\tmDispatcher.post( signal );\n\t\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tdisplayAuctionList();\n\t\t\n\t\t\n\t\tmState = AgentStateEnum.AS_AUCTION_ITEM;\n\t\tmPhase = AgentStateEnum.AS_PHASE1;\n\t}", "comment": "/**\n\t * Handle the AUCTION_STATE state.\n\t */"}}
{"code": {"body": "\tprivate void handleAuctionItemState( Action<?> action ) {\n\n\t\t\n\t\tswitch( mPhase ) {\n\t\n\t\t\t\n\t\t\tcase AS_PHASE1:\n\n\t\t\t\t\n\t\t\t\tinfo( \"\" );\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tprepareNextItemToAuction();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tmBarrier.start( mProfile.getGlobals().AuctionTimeout );\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tmPhase = AgentStateEnum.AS_PHASE2;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t\n\t\t\t\n\t\t\tcase AS_PHASE2:\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif ( action!=null && action.getType()==ActionTypeEnum.AMT_BID ) { \n\t\t\t\t\tregisterAuctionBid( (BidAction)action );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif ( mBarrier.timeout() || mRegisteredBids==mAuctionBids.size() ) {\n\n\t\t\t\t\tinfo( \"\" + mAuctionBids.size() );\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif ( mRegisteredBids==mAuctionBids.size() )\n\t\t\t\t\t\tinfo( \"\" );\n\t\t\t\t\telse \n\t\t\t\t\t\tinfo( \"\" );\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tmPhase = AgentStateEnum.AS_PHASE3;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t\n\t\t\t\n\t\t\tcase AS_PHASE3:\n\n\t\t\t\t\n\t\t\t\tdisplayAuctionList();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif ( !mBarrier.blocked() || mBarrier.timeout() ||\n\t\t\t\t\t\tmRegisteredBids==mAuctionBids.size() ) {\n\t\t\t\t\tassignTaskWinnerAndLoosers();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}", "comment": "/**\n\t * Handle the AUCTION_ITEM state.\n\t */"}}
{"code": {"body": "\tprivate void handleAuctionTerminateState() {\n\t\t\n\t\t\n\t\tinfo( \"\" );\n\n\t\t\n\t\tfor ( AgentProfile ap : mProfile.getChildren() ) {\n\t\t\n\t\t\t\n\t\t\tAuctionEndSignal signal =\n\t\t\t\tnew AuctionEndSignal(getObjectID(),ap.getAgent().getObjectID());\n\t\t\t\t\n\t\t\t\n\t\t\tap.getState().notifySignal( signal );\n\t\t\t\n\t\t\t\n\t\t\tmDispatcher.post( signal ); \n\t\t}\n\t\t\n\t\t\n\t\tmState = AgentStateEnum.AS_FINISHED;\n\t}", "comment": "/**\n\t * Handle the AUCTION_TERMINATE state.\n\t */"}}
{"code": {"body": "\tprivate void prepareNextItemToAuction() {\n\n\t\t\n\t\tmCurrentTask = getNextItemToAuction();\n\t\t\n\t\t\n\t\tassert( mCurrentTask != null );\n\t\t\n\t\t\n\t\tmCurrentTaskDescriptor = mCurrentTask.getDescriptor();\n\t\t\n\t\t\n\t\tthis.mRegisteredBids = 0;\n\t\t\n\t\t\n\t\tinfo( \"\"+\n\t\t\t\tmCurrentTaskDescriptor.PickupCity + \"\" +\n\t\t\t\tmCurrentTaskDescriptor.DeliveryCity + \"\" );\n\t\t\n\t\t\n\t\tpostAskBidSignalToEveryOne( mCurrentTaskDescriptor );\n\t}", "comment": "/**\n\t * This class handles the next item to auction. The item is taken \n\t * randomly in the list of items to pickup.\n\t */"}}
{"code": {"body": "\tprivate Task getNextItemToAuction() {\n\t\t\n\t\t\n\t\tif ( mListOfTasks.isEmpty() ) \n\t\t\treturn null;\n\t\t\n\t\t\n\t\tint iRandomTaskIndex = (int)(Math.random() * mListOfTasks.size());\n\t\t\n\t\t\n\t\treturn mListOfTasks.remove( iRandomTaskIndex );\n\t}", "comment": "/**\n\t * This method returns the next item to auction. The next item\n\t * is a random choice from a pool of free tasks.\n\t */"}}
{"code": {"body": "\tprivate void postAskBidSignalToEveryOne( TaskDescriptor tdd ) {\n\t\t\n\t\t\n\t\tfor( AgentProfile ap : mProfile.getChildren() ) {\n\t\t\t\n\t\t\t\n\t\t\tAskBidSignal signal =\n\t\t\t\tnew AskBidSignal( getObjectID(), \n\t\t\t\t\t\t\t\t  ap.getAgent().getObjectID(), tdd );\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tap.getState().notifySignal( signal );\n\t\t\t\n\t\t\t\n\t\t\tmDispatcher.post( signal );\n\t\t}\n\t}", "comment": "/**\n\t * Post the ask bid signal to agent participating in the auction. \n\t */"}}
{"code": {"body": "\tprivate void displayAuctionList() {\n\t\t\n\t\t\n\t\tinfo( \"\" );\n\t\t\n\t\t\n\t\tString strResult = \"\";\n\t\t\n\t\t\n\t\tfor( AID aid : mAuctionBids.keySet()) {\n\t\t\tif ( mAuctionBids.containsKey(aid) ) \n\t\t\t\tstrResult = strResult + mAuctionBids.get(aid) + \"\";\n\t\t\telse\n\t\t\t\tstrResult = strResult + \"\";\n\t\t}\n\t\t\n\t\t\n\t\tinfo( strResult );\n\t}", "comment": "/**\n\t * Helper method displaying the list of items.\n\t */"}}
{"code": {"body": "\tprivate void assignTaskWinnerAndLoosers() {\n\n\t\t\n\t\tArrayList<Double> arrayOfBids = new ArrayList<Double>();\n\t\tdouble dblMinValue = Double.MAX_VALUE;\n\t\tAgentProfile rfWinnerAgent = null;\n\t\t\n\t\t\n\t\tfor( AgentProfile ap : mProfile.getChildren() ) {\n\t\t\n\t\t\t\n\t\t\tDouble dblBidValue = mAuctionBids.get( ap.getID() );\n\t\t\t\n\t\t\t\n\t\t\tif ( dblBidValue==null ) dblBidValue = 0.0;\n\t\t\t\n\t\t\t\n\t\t\tif ( dblBidValue < dblMinValue ) {\n\t\t\t\tdblMinValue = dblBidValue;\n\t\t\t\trfWinnerAgent = ap;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tarrayOfBids.add( dblBidValue );\n\t\t}\n\n\t\t\n\t\tif ( rfWinnerAgent!=null ) {\n\t\t\tinfo( \"\" + rfWinnerAgent.getName() + \"\" +\n\t\t\t\t\t\"\" + dblMinValue + \"\" );\n\t\t}\n\t\t\n\t\t\n\t\tmCurrentTask.setRewardPerKm( dblMinValue );\n\t\t\n\t\t\n\t\tinfo( \"\" );\n\n\t\t\n\t\tSignal<?> signal = null;\n\t\t\n\t\t\n\t\tAuctionNotificationObject notificationObject = \n\t\t\tnew AuctionNotificationObject();\n\t\t\n\t\t\n\t\tnotificationObject.Bids = new Double[ arrayOfBids.size() ];\n\t\tarrayOfBids.toArray( notificationObject.Bids );\n\t\tnotificationObject.Task = mCurrentTaskDescriptor;\n\t\t\n\t\t\n\t\tfor ( AgentProfile ap : mProfile.getChildren() ) {\n\t\t\tif ( ap == rfWinnerAgent ) {\n\t\t\t\tinfo( \"\" );\n\t\t\t\tsignal = new AuctionWonSignal(\n\t\t\t\t\t\tgetObjectID(), rfWinnerAgent.getAgent().getObjectID(),\n\t\t\t\t\t\t(AuctionNotificationObject)notificationObject.clone() );\n\t\t\t} else {\n\t\t\t\tinfo( \"\" );\n\t\t\t\tsignal = new AuctionLostSignal(\n\t\t\t\t\t\tgetObjectID(), ap.getAgent().getObjectID(),\n\t\t\t\t\t\t(AuctionNotificationObject)notificationObject.clone() );\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tmDispatcher.post( signal );\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tap.getState().notifySignal( signal );\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tif ( hasMoreTasksToAuction() ) {\n\t\t\tmPhase=AgentStateEnum.AS_PHASE1;\n\t\t} else {\n\t\t\tmPhase=AgentStateEnum.AS_PHASE1;\n\t\t\tmState=AgentStateEnum.AS_AUCTION_END;\n\t\t}\t\n\t}", "comment": "/**\n\t * Assigns the task to the winner and looser\n\t */"}}
{"code": {"body": "\tprivate boolean hasMoreTasksToAuction() {\n\t\treturn mListOfTasks.size() > 0;\n\t}", "comment": "/**\n\t * This method informs whether there are some tasks left to auction\n\t */"}}
{"code": {"body": "\tprivate void registerAuctionBid( BidAction action ) {\n\t\t\n\t\t\n\t\tAID bidderID = action.getSenderID();\n\t\tDouble bidderValue = action.getMessage();\n\t\t\n\t\t\n\t\tinfo( \"\" + action.getSenderID() + \"\" \n\t\t\t\t+ action.getMessage() );\n\t\t\n\t\t\n\t\tif ( bidderValue==null ) bidderValue=0.0;\n\t\t\n\t\t\n\t\tmAuctionBids.put( bidderID, bidderValue );\n\t\t\n\t\t\n\t\tthis.mRegisteredBids++;\n\t}", "comment": "/**\n\t * This method registers the bid of a particular agent.\n\t */"}}
{"code": {"body": "public AID() {\n\t\tmObjectID = mClassID++;\n\t}", "comment": "/**\n\t * Default constructor of the class\n\t */"}}
{"code": {"body": "\tpublic boolean equals( Object id ) {\n\t\tif ( id instanceof AID ) {\n\t\t\t return ((AID)id).mObjectID == mObjectID;\n\t\t}\n\t\treturn false;\n\t}", "comment": "/**\n\t * Indicates if boths AID's are equal or not\n\t */"}}
{"code": {"body": "\tpublic Double getFrom() {\n\t\treturn mFromValue;\n\t}", "comment": "/**\n\t * Return the value from which we interpolate. \n\t */"}}
{"code": {"body": "\tpublic Double getTo() {\n\t\treturn mToValue;\n\t}", "comment": "/**\n\t * Return the value to which we interpolate.\n\t */"}}
{"code": {"body": "\tpublic Double interpolate(double t) {\n\t\tif ( t<0.0 ) t=0.0;\n\t\tif ( t>1.0 ) t=1.0;\n\t\treturn new Double( mFromValue.doubleValue()*(1.0-t) + \n\t\t\t\t           mToValue.doubleValue()*t );\n\t}", "comment": "/**\n\t * Linear interpolation between two double values.\n\t */"}}
{"code": {"body": "\tpublic void setFrom(Double value) {\n\t\tmFromValue = value;\n\t}", "comment": "/**\n\t * Define the value from which we interpolate.\n\t */"}}
{"code": {"body": "\tpublic void setTo(Double value) {\n\t\tmToValue = value;\n\t}", "comment": "/**\n\t * Define the value to which we interpolate.\n\t */"}}
{"code": {"body": "\tprotected void buildDisplay() {\n\t\tofficeDisplaySurface = new DisplaySurface(new Dimension(officeWidth,\n\t\t\t\tofficeHeight), this, \"\");\n\n\t\t\n\t\tDefaultGraphLayout layout = new DefaultGraphLayout(officeWidth,\n\t\t\t\tofficeHeight);\n\t\tlayout.getNodeList().addAll(office.getEmployees());\n\t\tlayout.getNodeList().add(office.getBoss());\n\n\t\t\n\t\t\n\t\tNetwork2DDisplay officeNetDisplay = new Network2DDisplay(layout);\n\t\tofficeDisplaySurface.addDisplayableProbeable(officeNetDisplay,\n\t\t\t\t\"\");\n\t\tthis.registerDisplaySurface(\"\", officeDisplaySurface);\n\t\tofficeDisplaySurface.setBackground(Color.WHITE);\n\t\tofficeDisplaySurface.display();\n\t\t\n\t\tregisterDisplaySurface(\"\", officeDisplaySurface);\n\t}", "comment": "/**\n\t * This builds the display surface for the office\n\t */"}}
{"code": {"body": "\tprotected void buildGraphs() {\n\t\tofficeGraph = new OpenSequenceGraph(\"\", this);\n\t\t\n\t\tofficeGraph.addSequence(\"\", \n\t\t\t\tnew MaxSequence(office.getEmployees(), \"\"));\n\t\t\n\t\tofficeGraph.addSequence(\"\", \n\t\t\t\tnew AverageSequence(office.getEmployees(), \"\"));\n\t\t\n\t\tofficeGraph.addSequence(\"\", \n\t\t\t\tnew MinSequence(office.getEmployees(), \"\"));\n\t\t\n\t\tindividualGraph = new OpenSequenceGraph(\"\", this);\n\t\tfor (Iterator iter = office.getEmployees().iterator(); iter.hasNext(); ) {\n\t\t\tEmployee emp = (Employee) iter.next();\n\t\t\t\n\t\t\tindividualGraph.createSequence(emp.getNodeLabel() + \"\",\n\t\t\t\t\t\t\t\t\temp, \"\");\n\t\t}\n\t\t\n\t\tregisterMediaProducer(\"\", officeGraph);\n\t\tregisterMediaProducer(\"\", individualGraph);\n\t\t\n\t\tofficeGraph.display();\n\t\tindividualGraph.display();\n\t}", "comment": "/**\n\t * This builds the error graphs.\n\t */"}}
{"code": {"body": "\tpublic void setup() {\n\t\t\n\t    schedule = new AsynchSchedule();\n\n\t\toffice = new Office(officeWidth, officeHeight);\n\n\t\tofficeDisplaySurface = null;\n\n\t\tif (officeGraph != null)\n\t\t\tofficeGraph.dispose();\n\t\t\n\t\tofficeGraph = null;\n\n\t\tif (individualGraph != null)\n\t\t\tindividualGraph.dispose();\n\t\t\n\t\tindividualGraph = null;\n\t\t\n\t\t\n\t\t\n\t\tgetModelManipulator().addButton(\"\",\n\t\t\t\tnew ActionListener() {\n\t\t\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t\t\tIterator iter = ((ArrayList) office.getEmployees()\n\t\t\t\t\t\t\t\t.clone()).iterator();\n\t\t\t\t\t\tfor (; iter.hasNext();) {\n\t\t\t\t\t\t\tEmployee emp = (Employee) iter.next();\n\n\t\t\t\t\t\t\temp.setX(Random.uniform.nextIntFromTo(0, office\n\t\t\t\t\t\t\t\t\t.getWidth()));\n\t\t\t\t\t\t\temp.setY(Random.uniform.nextIntFromTo(0, office\n\t\t\t\t\t\t\t\t\t.getHeight()));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tofficeDisplaySurface.updateDisplayDirect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t}", "comment": "/**\n\t * Sets up the model for the next run, clears out all the old employees and\n\t * the old displays\n\t */"}}
{"code": {"body": "\tpublic int getEmployeeCount() {\n\t\treturn employeeCount;\n\t}", "comment": "/**\n\t * @return Returns the number of employees in the office.\n\t */"}}
{"code": {"body": "\tpublic void setEmployeeCount(int employeeCount) {\n\t\tthis.employeeCount = employeeCount;\n\t}", "comment": "/**\n\t * @param employeeCount\n\t *            The number of employees in the office.\n\t */"}}
{"code": {"body": "\tpublic int getOfficeHeight() {\n\t\treturn officeHeight;\n\t}", "comment": "/**\n\t * @return returns the officeHeight\n\t */"}}
{"code": {"body": "\tpublic void setOfficeHeight(int officeHeight) {\n\t\tthis.officeHeight = officeHeight;\n\t}", "comment": "/**\n\t * @param officeHeight\n\t *            the officeHeight\n\t */"}}
{"code": {"body": "\tpublic int getOfficeWidth() {\n\t\treturn officeWidth;\n\t}", "comment": "/**\n\t * @return returns the officeWidth\n\t */"}}
{"code": {"body": "\tpublic void setOfficeWidth(int officeWidth) {\n\t\tthis.officeWidth = officeWidth;\n\t}", "comment": "/**\n\t * @param officeWidth\n\t *            the officeWidth\n\t */"}}
{"code": {"body": "    public Geometry getThe_geom() {\n        return the_geom;\n    }", "comment": "/* (non-Javadoc)\n     * @see anl.repast.gis.GeotoolsAgent#getthe_geom()\n     */"}}
{"code": {"body": "    public void setThe_geom(Geometry geom) {\n        this.the_geom = geom;\n    }", "comment": "/* (non-Javadoc)\n     * @see anl.repast.gis.GeotoolsAgent#setthe_geom(com.vividsolutions.jts.geom.Geometry)\n     */"}}
{"code": {"body": "    public int getGisAgentIndex() {\n        return gisAgentIndex;\n    }", "comment": "/* (non-Javadoc)\n     * @see anl.repast.gis.GisAgent#getGisAgentIndex()\n     */"}}
{"code": {"body": "    public void setGisAgentIndex(int index) {\n        this.gisAgentIndex = index;\n    }", "comment": "/* (non-Javadoc)\n     * @see anl.repast.gis.GisAgent#setGisAgentIndex(int)\n     */"}}
{"code": {"body": "    public String[] gisPropertyList() {\n        return null;\n    }", "comment": "/* (non-Javadoc)\n     * @see anl.repast.gis.GisAgent#gisPropertyList()\n     */"}}
{"code": {"body": "    public void setNeighbors(int[] neighbors) {\n        this.neighbors = neighbors;\n    }", "comment": "/* (non-Javadoc)\n     * @see anl.repast.gis.GisAgent#setNeighbors(int[])\n     */"}}
{"code": {"body": "    public int[] getNeighbors() {\n        return this.neighbors;\n    }", "comment": "/* (non-Javadoc)\n     * @see anl.repast.gis.GisAgent#getNeighbors()\n     */"}}
{"code": {"body": "public AbsMulti2DGrid(int xSize, int ySize, boolean sparse) {\n        this.xSize = xSize;\n        this.ySize = ySize;\n        if (sparse) matrix = new SparseObjectMatrix(xSize, ySize);\n        else matrix = new NewMatrix(xSize, ySize);\n        roIter = roList.iterator();\n\n        vnNeigh = new VNMultiNeighborhooder(this);\n        mNeigh = new MooreMultiNeighborhooder(this);\n    }", "comment": "/**\n     * Creates this AbsMulti2DGrid with the specified dimensions.\n     * sparse specifies whether the grid will be sparsely filled or not.\n     * Specifying sparse can result in substantial memory savings.\n     *\n     * @param xSize the number of columns in the grid\n     * @param ySize the number of rows in the grid\n     * @param sparse whether the grid will be sparsely populated or not\n     */"}}
{"code": {"body": "    public void clear(int x, int y) {\n        matrix.remove(x, y);\n    }", "comment": "/**\n     * Clears the contents the specified cell.\n     *\n     * @param x the x coordinate of the cell to clear\n     * @param y the y coordinate of the cell to clear\n     */"}}
{"code": {"body": "    public List getObjectsAt(int x, int y) {\n        rangeCheck(x, y);\n        Cell c = (Cell) matrix.get(x, y);\n\n        if (c != null) return c.getList();\n        return roList;\n    }", "comment": "/**\n     * Gets the List of objects at the specified coordinates. An ordered\n     * grid will return the first object inserted at the beginning of the\n     * list and the last object inserted at the end of the list. The\n     * list order is undetermined for an unordered object.\n     *\n     * @param x the x coordinate\n     * @param y the y coordinate\n     *\n     * @return the list of objects at the specified location. If no objects\n     * are at the location the list will be empty (and unmodifable).\n     * @throws IndexOutOfBoundsException if the given coordinates are out of\n     * range (x < 0 || x >= xSize || y < 0 || y >= ySize)\n     */"}}
{"code": {"body": "    public Iterator getIteratorAt(int x, int y) {\n        rangeCheck(x, y);\n        Cell c = (Cell) matrix.get(x, y);\n\n        if (c != null) return c.iterator();\n        return roIter;\n    }", "comment": "/**\n     * Gets the iterator for the collection of objects at the specified\n     * coordinates. For an ordered grid the order of iteration will be first\n     * object inserted, first returned and so on. For an unordered grid,\n     * order is undefined.\n     *\n     * @param x the x coordinate\n     * @param y the y coordinate\n     *\n     * @return an iterator for the objects at the specified location. If no\n     * objects are at the location, the iterator will be empty.\n     * @throws IndexOutOfBoundsException if the given coordinates are out of\n     * range (x < 0 || x >= xSize || y < 0 || y >= ySize)\n     */"}}
{"code": {"body": "    public Cell getCellAt(int x, int y) {\n        rangeCheck(x, y);\n        return (Cell) matrix.get(x, y);\n    }", "comment": "/**\n     * Gets the Cell object at the specified coordinates.\n     *\n     * @param x the x coordinate\n     * @param y the y coordinate\n     * @throws IndexOutOfBoundsException if the given coordinates are out of\n     * range (x < 0 || x >= xSize || y < 0 || y >= ySize)\n     */"}}
{"code": {"body": "    public int getCellSizeAt(int x, int y) {\n        rangeCheck(x, y);\n        Cell c = (Cell) matrix.get(x, y);\n\n        if (c != null) return c.size();\n        return 0;\n    }", "comment": "/**\n     * Gets the size (number of occupants) of the cell at\n     * the specified location.\n     *\n     * @param x the x coordinate\n     * @param y the y coordinate*\n     * @throws IndexOutOfBoundsException if the given coordinates are out of\n     * range (x < 0 || x >= xSize || y < 0 || y >= ySize)\n     */"}}
{"code": {"body": "    public void removeObjectAt(int x, int y, Object obj) {\n        rangeCheck(x, y);\n        Cell c = (Cell) matrix.get(x, y);\n\n        if (c != null) c.remove(obj);\n    }", "comment": "/**\n     * Removes the specified object from the specified location.\n     *\n     * @param x the x coordinate\n     * @param y the y coordinate\n     * @param obj the object to remove\n     * @throws IndexOutOfBoundsException if the given coordinates are out of\n     * range (x < 0 || x >= xSize || y < 0 || y >= ySize)\n     */"}}
{"code": {"body": "    public ArrayList getVNNeighborsLoc(int x, int y, int xExtent, int yExtent,\n        boolean returnNulls) {\n        int[] extent = {xExtent, yExtent};\n\n        return vnNeigh.getNeighborsLoc(x, y, extent, returnNulls);\n    }", "comment": "/**\n     * Gets the extended von Neumann neighbors of the objects(s) at x, y. The\n     * extension in the x and y direction are specified by xExtent and yExtent.\n     * Objects are returned in west, east, north, south order. The\n     * most distant objects are returned first, that is, all the objects to the\n     * west starting with the most distant, then those to the east and so on.\n     * The returned ArrayList contains <code>ObjectLocation</code> objects\n     * that can be used to determined the exact location of the object returned.\n     * The objects at x,y are not returned.<p>\n     *\n     * If the neighboring objects contain their location information,\n     * <code>getVNNeighbors(...)</code> should be used as it is faster.\n     *\n     * @param x the x coordinate of the object\n     * @param y the y coordinate of the object\n     * @param xExtent the extension of the neighborhood in the x direction\n     * @param yExtent the extension of the neighborhood in the y direction\n     * @param returnNulls whether nulls should be returned\n     * @return an ArrayList of ObjectLocation objects. The object contained\n     * by the ObjectLocation object may be null.\n     * @throws IndexOutOfBoundsException if the given coordinates are out of\n     * range (x < 0 || x >= xSize || y < 0 || y >= ySize)\n     *\n     * @see ObjectLocation\n     */"}}
{"code": {"body": "    public ArrayList getMooreNeighborsLoc(int x, int y, int xExtent, int yExtent,\n        boolean returnNulls) {\n        int[] extent = {xExtent, yExtent};\n\n        return mNeigh.getNeighborsLoc(x, y, extent, returnNulls);\n    }", "comment": "/**\n     * Gets the extended Moore neighbors of the object(s) at x, y. The\n     * extension in the x and y direction are specified by xExtent and yExtent.\n     * The returned ArrayList contains <code>ObjectLocation</code> objects\n     * that can be used to determined the exact location of the object returned.\n     * The objects at x, y are not returned. Objects are returned by\n     * row starting with the \"NW corner\" and ending with the \"SE corner.\"<p>\n     *\n     * If the neighboring objects contain their location information,\n     * <code>getMooreNeighbors(...)</code> should be used as it is faster.\n     *\n     *\n     * @param x the x coordinate of the object\n     * @param y the y coordinate of the object\n     * @param xExtent the extension of the neighborhood in the x direction\n     * @param yExtent the extension of the neighborhood in the y direction\n     * @param returnNulls should the returned ArrayList contain null objects\n     * @return an ArrayList of ObjectLocation objects. The object contained\n     * by the ObjectLocation object may be null.\n     * @throws IndexOutOfBoundsException if the given coordinates are out of\n     * range (x < 0 || x >= xSize || y < 0 || y >= ySize)\n     *\n     * @see ObjectLocation\n     */"}}
{"code": {"body": "    public ArrayList getVNNeighbors(int x, int y, int xExtent, int yExtent,\n        boolean returnNulls) {\n        int[] extent = {xExtent, yExtent};\n\n        return vnNeigh.getNeighborsList(x, y, extent, returnNulls);\n    }", "comment": "/**\n     * Gets the extended von Neumann neighbors of the objects(s) at x, y. The\n     * extension in the x and y direction are specified by xExtent and yExtent.\n     * Objects are returned in west, east, north, south order. The\n     * most distant objects are returned first, that is, all the objects to the\n     * west starting with the most distant, then those to the east and so on.\n     * The objects at x,y are not returned.<p>\n     *\n     * If the neighboring objects do not contain their location information,\n     * <code>getVNNeighborsLoc(...)</code> can be used, although it is\n     * slower.\n     *\n     * \n     * @param x the x coordinate of the object\n     * @param y the y coordinate of the object\n     * @param xExtent the extension of the neighborhood in the x direction\n     * @param yExtent the extension of the neighborhood in the y direction\n     * @param returnNulls whether nulls should be returned\n     * @return an ArrayList of objects (and possibly nulls).\n     * @throws IndexOutOfBoundsException if the given coordinates are out of\n     * range (x < 0 || x >= xSize || y < 0 || y >= ySize)\n     */"}}
{"code": {"body": "    public ArrayList getMooreNeighbors(int x, int y, int xExtent, int yExtent,\n        boolean returnNulls) {\n        int[] extent = {xExtent, yExtent};\n\n        return mNeigh.getNeighborsList(x, y, extent, returnNulls);\n    }", "comment": "/**\n     * Gets the extended Moore neighbors of the object(s) at x, y. \n     * The objects at x, y are not returned. Objects are returned by\n     * row starting with the \"NW corner\" and ending with the \"SE corner.\"<p>\n     *\n     * If the neighboring objects do not contain their location information,\n     * <code>getMooreNeighborsLoc(...)</code> can be used although it is\n     * slower.\n     *\n     *\n     * @param x the x coordinate of the object\n     * @param y the y coordinate of the object\n     * @param xExtent the extension of the neighborhood in the x direction\n     * @param yExtent the extension of the neighborhood in the y direction\n     * @param returnNulls should the returned ArrayList contain null objects\n     * @return an ArrayList of objects (and possibly nulls) ordered by\n     * row starting with the \"NW corner\" and ending with the \"SE corner.\"\n     * @throws IndexOutOfBoundsException if the given coordinates are out of\n     * range (x < 0 || x >= xSize || y < 0 || y >= ySize)\n     *\n     * @see ObjectLocation\n     */"}}
{"code": {"body": "    public int getSizeX() {\n        return xSize;\n    }", "comment": "/**\n     * Gets the size of the x dimension\n     */"}}
{"code": {"body": "    public int getSizeY() {\n        return ySize;\n    }", "comment": "/**\n     * Gets the size of the y dimension\n     */"}}
{"code": {"body": "    public Dimension getSize() {\n        return new Dimension(xSize, ySize);\n    }", "comment": "/**\n     * Gets the dimension of the space\n     */"}}
{"code": {"body": "    public Object getObjectAt(int x, int y) {\n        rangeCheck(x, y);\n        return matrix.get(x, y);\n    }", "comment": "/**\n     * Gets the Object at the specified coordinate.\n     *\n     * @param x the x coordinate\n     * @param y the y coordinate\n     * @return the Cell at x,y\n     * @throws IndexOutOfBoundsException if the given coordinates are out of\n     * range (x < 0 || x >= xSize || y < 0 || y >= ySize)\n     */"}}
{"code": {"body": "    public double getValueAt(int x, int y) {\n        throw new UnsupportedOperationException();\n    }", "comment": "/**\n     * Gets the value at the specified coordinate if appropriate.\n     *\n     * @param x the x coordinate\n     * @param y the y coordinate\n     * @return the value at x, y\n     */"}}
{"code": {"body": "    public void putValueAt(int x, int y, double value) {\n        throw new UnsupportedOperationException();\n    }", "comment": "/**\n     * Puts the specified value at the specified coordinate.\n     *\n     * @param x the x coordinate\n     * @param y the y coordinate\n     * @param value the value to put at x,y\n     */"}}
{"code": {"body": "    public BaseMatrix getMatrix() {\n        return matrix;\n    }", "comment": "/**\n     * Gets the matrix collection class that contains all the values\n     */"}}
{"code": {"body": "    public void trim() {\n        for (int i = 0; i < xSize; i++) {\n            for (int j = 0; j < ySize; j++) {\n                int count = getCellSizeAt(i, j);\n\n                if (count == 0) matrix.remove(i, j);\n            }\n        }\n\n        matrix.trim();\n    }", "comment": "/**\n     * Releases any superfluous memory. This is only usefull when\n     * working with sparse grids.\n     */"}}
{"code": {"body": "public Aggravation() {\n        addMouseListener(new MouseAdapter() {\n            public void mousePressed(MouseEvent e) {\n\n                if (e.BUTTON1 == e.getButton() ) {\n                    \n                    \n                    Board.AddPiecePixel(e.getX(),e.getY());\n                    Board.CheckWin();\n                    \n                }\n\n                if (e.BUTTON3 == e.getButton()) {\n                    reset();\n                }\n                repaint();\n            }\n        });\n            \n\n    addMouseMotionListener(new MouseMotionAdapter() {\n      public void mouseDragged(MouseEvent e) {\n\n        repaint();\n      }\n    });\n\n    addMouseMotionListener(new MouseMotionAdapter() {\n      public void mouseMoved(MouseEvent e) {\n\n        repaint();\n      }\n    });\n\n        addKeyListener(new KeyAdapter() {\n\n            public void keyPressed(KeyEvent e) {\n                if (e.VK_UP == e.getKeyCode()) {\n                } else if (e.VK_DOWN == e.getKeyCode()) {\n                } else if (e.VK_LEFT == e.getKeyCode()) {\n                } else if (e.VK_RIGHT == e.getKeyCode()) {\n                } else if (e.VK_ESCAPE == e.getKeyCode()) {\n                    reset();\n                }\n                repaint();\n            }\n        });\n        init();\n        start();\n    }", "comment": "/*\nHow to Add Code to Repository\n1: git add -A\n2: git commit -m \"new Code\"\n3: git push origin master\n\n\nHow to Get Code from Repository\n1: git pull origin master\n\nHow to Get Clone from Repository\n1: git clone LINK\n\n\n*/"}}
{"code": {"body": "    public static void main(String[] args) {\n        Aggravation frame = new Aggravation();\n        frame.setSize(Window.WINDOW_WIDTH, Window.WINDOW_HEIGHT);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setVisible(true);\n    }", "comment": "/*\nHow to Add Code to Repository\n1: git add -A\n2: git commit -m \"new Code\"\n3: git push origin master\n\n\nHow to Get Code from Repository\n1: git pull origin master\n\nHow to Get Clone from Repository\n1: git clone LINK\n\n\n*/"}}
{"code": {"body": "    private void initTitleBarLayout(TitleBarLayout titleBarLayout) {\n        titleBarLayout.setTitleName(getIntent().getStringExtra(MainActivity.EXTRA_TITLE_NAME));\n    }", "comment": "/** \u521d\u59cb\u5316TitleBarLayout */"}}
{"code": {"body": "    private void showPermissionCheckDialog() {\n        CheckDialog dialog = new CheckDialog(getContext());\n        dialog.setContentMsg(R.string.splash_check_permission_title);\n        dialog.setPositiveText(R.string.splash_check_permission_confirm, new CheckDialog.Listener() {\n            @Override\n            public void onClick(Dialog dialog) {\n                RecordActivityPermissionsDispatcher.requestPermissionWithPermissionCheck(RecordActivity.this);\n                dialog.dismiss();\n            }\n        });\n        dialog.setNegativeText(R.string.splash_check_permission_unconfirmed, new CheckDialog.Listener() {\n            @Override\n            public void onClick(Dialog dialog) {\n                AppUtils.jumpAppDetailSetting(getContext());\n            }\n        });\n        dialog.setCanceledOnTouchOutside(false);\n        dialog.setOnCancelListener(new DialogInterface.OnCancelListener() {\n            @Override\n            public void onCancel(DialogInterface dialog) {\n                finish();\n            }\n        });\n        dialog.show();\n    }", "comment": "/** \u663e\u793a\u6743\u9650\u6838\u5bf9\u5f39\u6846 */"}}
{"code": {"body": "    public static void startAnim(Context context, View view, @AnimRes int animResId, int visibility){\n        view.clearAnimation();\n        Animation animation = AnimationUtils.loadAnimation(context, animResId);\n        view.startAnimation(animation);\n        view.setVisibility(visibility);\n    }", "comment": "/**\n     * \u5f00\u59cb\u52a8\u753b\n     * @param context \u4e0a\u4e0b\u6587\n     * @param view \u63a7\u4ef6\n     * @param animResId \u52a8\u753b\u8d44\u6e90id\n     * @param visibility \u52a8\u753b\u7ed3\u675f\u540e\u7684\u663e\u9690\u72b6\u6001\n     */"}}
{"code": {"body": "    public static void startRotateSelf(View view, float fromDegrees, float toDegrees, long duration, boolean fillAfter){\n        view.clearAnimation();\n        Animation animation = new RotateAnimation(fromDegrees, toDegrees, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);\n        animation.setDuration(duration);\n        animation.setFillAfter(fillAfter);\n        view.startAnimation(animation);\n    }", "comment": "/**\n     * \u65cb\u8f6c\u81ea\u8eab\n     * @param view \u63a7\u4ef6\n     * @param fromDegrees \u8d77\u59cb\u89d2\u5ea6\n     * @param toDegrees \u7ed3\u675f\u89d2\u5ea6\n     * @param duration \u65f6\u95f4\n     * @param fillAfter \u52a8\u753b\u8f6c\u5316\u7ed3\u675f\u540e\u88ab\u5e94\u7528\n     */"}}
{"code": {"body": "    public static void startScaleSelf(View view, float fromX, float toX, float fromY, float toY, long duration, boolean fillAfter){\n        view.clearAnimation();\n        Animation animation = new ScaleAnimation(fromX, toX, fromY, toY, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);\n        animation.setDuration(duration);\n        animation.setFillAfter(fillAfter);\n        view.startAnimation(animation);\n    }", "comment": "/**\n     * \u653e\u5927\u81ea\u8eab\n     * @param view \u63a7\u4ef6\n     * @param fromX X\u8f74\u8d77\u59cb\u5927\u5c0f\uff080.0~n\uff09\uff0c1.0\u8868\u793a\u63a7\u4ef6\u539f\u59cb\u5927\u5c0f\n     * @param toX X\u8f74\u7ed3\u675f\u5927\u5c0f\uff080.0~n\uff09\uff0c1.0\u8868\u793a\u63a7\u4ef6\u539f\u59cb\u5927\u5c0f\n     * @param fromY Y\u8f74\u8d77\u59cb\u5927\u5c0f\uff080.0~n\uff09\uff0c1.0\u8868\u793a\u63a7\u4ef6\u539f\u59cb\u5927\u5c0f\n     * @param toY Y\u8f74\u7ed3\u675f\u5927\u5c0f\uff080.0~n\uff09\uff0c1.0\u8868\u793a\u63a7\u4ef6\u539f\u59cb\u5927\u5c0f\n     * @param duration \u65f6\u95f4\n     * @param fillAfter \u52a8\u753b\u8f6c\u5316\u7ed3\u675f\u540e\u88ab\u5e94\u7528\n     */"}}
{"code": {"body": "\tpublic static void main(String... args) {\n\t\tif (args.length != 1) {\n\t\t\tSystem.out.println(\"\");\n\t\t\tSystem.exit(0);\n\t\t}\n\t\tTaskService service = new TaskService();\n\t\tservice.process(args[0]);\n\t}", "comment": "/**\n\t * FileApplication main method\n\t * \n\t * @param args      is list of java runtime argument\n\t */"}}
{"code": {"body": "\tpublic static String formatDate(Date d) {\n\t\treturn d != null ? DateFormat.getDateInstance().format(d) : \"\";\n\t}", "comment": "/**\n\t * Formats the input date to string.\n\t * @param d the date\n\t * @return the string representation of the date\n\t */"}}
{"code": {"body": "\tpublic static Date toDate(String s) {\n\t\tDate date = null;\n\t\ttry {\n\t\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"\");\n\t\t\tdate = sdf.parse(s);\n\t\t} catch (ParseException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn date;\n\t}", "comment": "/**\n\t * Parses the date string and returns the date value.\n\t * Input format is: <b>dd.MM.yyyy HH:mm:ss</b>.\n\t * \n\t * @param s the input string\n\t * @return the parsed date value, null if input is null or invalid\n\t */"}}
{"code": {"body": "\tpublic static void updateDate(DatePicker picker, Date date) {\n\t\tif (picker != null && date != null) {\n\t\t\tCalendar c = GregorianCalendar.getInstance();\n\t\t\tc.setTime(date);\n\t\t\t\n\t        int y = c.get(Calendar.YEAR);\n\t        int m = c.get(Calendar.MONTH);\n\t        int d = c.get(Calendar.DAY_OF_MONTH);\n\t        \n\t        picker.updateDate(y, m, d);\n\t\t}\n\t}", "comment": "/**\n\t * Convinient method to update a date in a {@link DatePicker}.\n\t * @param picker the date picker\n\t * @param date the date value\n\t */"}}
{"code": {"body": "        private static Map<String, File> newAccessOrder() {\n            return new LinkedHashMap<String, File>(\n                    MAX_SIZE, 0.75f, true );\n        }", "comment": "/**\n         * Creates a new access-ordered linked hash map.\n         */"}}
{"code": {"body": "        private static String fileName(String host, int port) {\n            if (host == null) {\n                throw new NullPointerException(\"\");\n            }\n            return host + \"\" + port;\n        }", "comment": "/**\n         * Gets the file name for the given host and port.\n         */"}}
{"code": {"body": "        private void makeRoom() {\n            if (size <= MAX_SIZE) {\n                return;\n            }\n\n            indexFiles();\n\n            \n            int removals = size - MAX_SIZE;\n            Iterator<File> i = accessOrder.values().iterator();\n            do {\n                delete(i.next());\n                i.remove();\n            } while (--removals > 0);\n        }", "comment": "/**\n         * Deletes old files if necessary.\n         */"}}
{"code": {"body": "        private void indexFiles() {\n            String[] initialFiles = this.initialFiles;\n            if (initialFiles != null) {\n                this.initialFiles = null;\n\n                \n                \n                Set<CacheFile> diskOnly = new TreeSet<CacheFile>();\n                for (String name : initialFiles) {\n                    \n                    if (!accessOrder.containsKey(name)) {\n                        diskOnly.add(new CacheFile(directory, name));\n                    }\n                }\n\n                if (!diskOnly.isEmpty()) {\n                    \n                    \n                    Map<String, File> newOrder = newAccessOrder();\n                    for (CacheFile cacheFile : diskOnly) {\n                        newOrder.put(cacheFile.name, cacheFile);\n                    }\n                    newOrder.putAll(accessOrder);\n    \n                    this.accessOrder = newOrder;\n                }\n            }\n        }", "comment": "/**\n         * Lazily updates accessOrder to know about all files as opposed to\n         * just the files accessed since this process started.\n         */"}}
{"code": {"body": "    public static synchronized SSLClientSessionCache usingDirectory(\n            File directory) throws IOException {\n        FileClientSessionCache.Impl cache = caches.get(directory);\n        if (cache == null) {\n            cache = new FileClientSessionCache.Impl(directory);\n            caches.put(directory, cache);\n        }\n        return cache;\n    }", "comment": "/**\n     * Returns a cache backed by the given directory. Creates the directory\n     * (including parent directories) if necessary. This cache should have\n     * exclusive access to the given directory.\n     *\n     * @param directory to store files in\n     * @return a cache backed by the given directory\n     * @throws IOException if the file exists and is not a directory or if\n     *  creating the directories fails\n     */"}}
{"code": {"body": "    static synchronized void reset() {\n        caches.clear();\n    }", "comment": "/** For testing. */"}}
{"code": {"body": "public AppTest( String testName )", "comment": "/**\n     * Create the test case\n     *\n     * @param testName name of the test case\n     */"}}
{"code": {"body": "    public static Test suite()\n    {\n        return new TestSuite( AppTest.class );\n    }", "comment": "/**\n     * @return the suite of tests being tested\n     */"}}
{"code": {"body": "    public void testApp()\n    {\n        assertTrue( true );\n    }", "comment": "/**\n     * Rigourous Test :-)\n     */"}}
{"code": {"body": "\tpublic String getJSON_DATA() {\n\t\treturn JSON_DATA;\n\t}", "comment": "/** \n\t * @return jSON_DATA \n\t */"}}
{"code": {"body": "\tpublic void setJSON_DATA(String jSON_DATA) {\n\t\tJSON_DATA = jSON_DATA;\n\t}", "comment": "/**\n\t * @param jSON_DATA the jSON_DATA to set\n\t */"}}
{"code": {"body": "\t\tpublic Heading opposite() {\n\t\t\tHeading r = NORTH;\n\t\t\tswitch (this) {\n\t\t\tcase NORTH:\n\t\t\t\tr = SOUTH;\n\t\t\t\tbreak;\n\t\t\tcase SOUTH:\n\t\t\t\tr = NORTH;\n\t\t\t\tbreak;\n\t\t\tcase EAST:\n\t\t\t\tr = WEST;\n\t\t\t\tbreak;\n\t\t\tcase WEST:\n\t\t\t\tr = EAST;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn r;\n\t\t}", "comment": "/** Opposite direction */"}}
{"code": {"body": "\t\tpublic void set(Attributes atts, DynamicAgentAttributes defaults,\n\t\t\t\tLocator locator) throws SAXException {\n\t\t\tlocX = MazeReader\n\t\t\t\t\t.getIntParam(atts, X_PARAM, defaults.locX, locator);\n\t\t\tlocY = MazeReader\n\t\t\t\t\t.getIntParam(atts, Y_PARAM, defaults.locY, locator);\n\t\t\theading = Heading.valueOf(MazeReader.getStringParam(atts,\n\t\t\t\t\tHEADING_PARAM, defaults.heading.toString(), locator));\n\t\t\tbumped = MazeReader.getBoolParam(atts, BUMPED_PARAM,\n\t\t\t\t\tdefaults.bumped, locator);\n\t\t\tmessage = MazeReader.getStringParam(atts, MESSAGE_PARAM,\n\t\t\t\t\tdefaults.message, locator);\n\t\t}", "comment": "/**\n\t\t * Initialize or reinitialize agent attributes based on XML data\n\t\t * \n\t\t * @param atts\n\t\t *            SAX attribute structure derived from XML data\n\t\t * @param defaults\n\t\t *            values to use when attributes are unspecified\n\t\t * @param locator\n\t\t *            file information for reporting errors\n\t\t * @throws SAXException\n\t\t *             in case data is formatted wrong\n\t\t */"}}
{"code": {"body": "\tpublic void update(Attributes atts, Locator loc) throws SAXException {\n\t\tform.update(atts, loc);\n\t\tstatus.update(atts, loc);\n\t}", "comment": "/**\n\t * Change the parameters of this agent to reflect the information in the\n\t * passed XML specification\n\t * \n\t * @param atts\n\t *            SAX attributes derived from XML data\n\t * @param loc\n\t *            file information for reporting errors\n\t * @throws SAXException\n\t *             in case of data format problems\n\t */"}}
{"code": {"body": "\tpublic int getLocX() {\n\t\treturn status.locX;\n\t}", "comment": "/**\n\t * @return current horizontal coordinate of agent\n\t */"}}
{"code": {"body": "\tpublic int getLocY() {\n\t\treturn status.locY;\n\t}", "comment": "/**\n\t * @return current vertical coordinate of agent\n\t */"}}
{"code": {"body": "\tpublic Heading getHeading() {\n\t\treturn status.heading;\n\t}", "comment": "/**\n\t * @return direction agent is currently facing\n\t */"}}
{"code": {"body": "\tpublic Boolean getBumped() {\n\t\treturn status.bumped;\n\t}", "comment": "/**\n\t * @return whether the agent has just hit a wall\n\t */"}}
{"code": {"body": "\tpublic String getMessage() {\n\t\treturn status.message;\n\t}", "comment": "/**\n\t * @return agent's current debugging status message\n\t */"}}
{"code": {"body": "\tpublic int getId() {\n\t\treturn id;\n\t}", "comment": "/**\n\t * @return unique integer identifying agent in the world\n\t */"}}
{"code": {"body": "\tpublic boolean isAlive() {\n\t\treturn isAlive;\n\t}", "comment": "/**\n\t * @return true if the agent is still treated as alive for the purposes of\n\t *         simulation.\n\t */"}}
{"code": {"body": "\tpublic void die() {\n\t\tisAlive = false;\n\t}", "comment": "/**\n\t * Mark an agent as dead.\n\t */"}}
{"code": {"body": "\tpublic void setLocX(int x) {\n\t\tstatus.locX = x;\n\t}", "comment": "/**\n\t * Update the agent's current horizontal coordinate to x\n\t * \n\t * @param x\n\t *            in grid cells\n\t */"}}
{"code": {"body": "\tpublic void setLocY(int y) {\n\t\tstatus.locY = y;\n\t}", "comment": "/**\n\t * Update the agent's current vertical coordinate to y\n\t * \n\t * @param y\n\t *            in grid cells\n\t */"}}
{"code": {"body": "\tpublic void setHeading(Heading h) {\n\t\tstatus.heading = h;\n\t}", "comment": "/**\n\t * Update the agent's current direction of travel to heading\n\t * \n\t * @param h\n\t *            one of the four cardinal directions\n\t */"}}
{"code": {"body": "\tpublic void setBumped(Boolean b) {\n\t\tstatus.bumped = b;\n\t}", "comment": "/**\n\t * Update the agent's current status as bumped\n\t * \n\t * @param b\n\t *            true or false\n\t */"}}
{"code": {"body": "\tpublic void setMessage(String s) {\n\t\tstatus.message = s;\n\t}", "comment": "/**\n\t * Update the agent's current status message\n\t * \n\t * @param s\n\t *            string message\n\t */"}}
{"code": {"body": "\tprotected boolean isBlocked(List<Percept> ps, Agent.Direction d) {\n\t\tfor (Percept p : ps)\n\t\t\tif (p.getDirection() == d && p.getDistance() < 2)\n\t\t\t\treturn true;\n\n\t\treturn false;\n\t}", "comment": "/**\n\t * Helper function for perception.\n\t * \n\t * Return true if one of the percepts in the passed list of percepts shows\n\t * that you can't proceed in the direction d.\n\t * \n\t * @param ps\n\t * @param d\n\t * @return\n\t */"}}
{"code": {"body": "\tprotected boolean isOpen(List<Percept> ps, Agent.Direction d) {\n\t\treturn !isBlocked(ps, d);\n\t}", "comment": "/**\n\t * Helper function for perception.\n\t * \n\t * Return true if, based on all the information you perceive, you must\n\t * conclude that there is no neighboring obstacle in direction d.\n\t * \n\t * @param ps\n\t * @param d\n\t * @return\n\t */"}}
{"code": {"body": "\tprotected boolean isEscape(Agent.Direction d) {\n\t\tint x = status.locX;\n\t\tint y = status.locY;\n\t\tAgent.Heading h = getHeadingFor(d);\n\n\t\tint newx = x + h.dx;\n\t\tint newy = y + h.dy;\n\n\t\treturn (newx < 0 || newy < 0 || newx >= myWorld.getDimension() || newy >= myWorld\n\t\t\t\t.getDimension());\n\t}", "comment": "/**\n\t * Helper function for perception\n\t * \n\t * Return true if moving in the specified direction would take you outside\n\t * of the map\n\t * \n\t * @param d\n\t * @return\n\t */"}}
{"code": {"body": "\tpublic Heading leftOf(Heading h) {\n\t\tswitch (h) {\n\t\tcase NORTH:\n\t\t\treturn Heading.WEST;\n\t\tcase EAST:\n\t\t\treturn Heading.NORTH;\n\t\tcase SOUTH:\n\t\t\treturn Heading.EAST;\n\t\tcase WEST:\n\t\t\treturn Heading.SOUTH;\n\t\t}\n\n\t\treturn Heading.SOUTH;\n\t}", "comment": "/**\n\t * Give the heading that's to the left of heading h\n\t */"}}
{"code": {"body": "\tprotected Agent.Direction getDirectionFor(Agent.Heading h) {\n\t\tif (status.heading == h)\n\t\t\treturn Agent.Direction.AHEAD;\n\t\tif (h == leftOf(status.heading))\n\t\t\treturn Agent.Direction.LEFT;\n\t\tif (h == leftOf(leftOf(status.heading)))\n\t\t\treturn Agent.Direction.BEHIND;\n\t\treturn Agent.Direction.RIGHT;\n\t}", "comment": "/**\n\t * Give the direction that corresponds to heading h\n\t * \n\t * @param h\n\t *            : a heading\n\t * @return the direction of h relative to the agent\n\t */"}}
{"code": {"body": "\tprotected Agent.Heading getHeadingFor(Agent.Direction d) {\n\t\tif (Agent.Direction.AHEAD == d)\n\t\t\treturn status.heading;\n\t\tif (Agent.Direction.LEFT == d)\n\t\t\treturn leftOf(status.heading);\n\t\tif (Agent.Direction.BEHIND == d)\n\t\t\treturn leftOf(leftOf(status.heading));\n\t\treturn leftOf(leftOf(leftOf(status.heading)));\n\t}", "comment": "/**\n\t * Give the heading that corresponds to direction d\n\t * \n\t * @param d\n\t *            : a direction\n\t * @return the absolute heading corresponding to d given where the agent is\n\t *         facing\n\t */"}}
{"code": {"body": "\tprotected void makeTurn(Agent.Direction d) {\n\t\tswitch (d) {\n\t\tcase AHEAD:\n\t\t\treturn;\n\t\tcase LEFT:\n\t\t\ttodo.add(new Intention(Intention.ActionType.TURN_LEFT));\n\t\t\tbreak;\n\t\tcase RIGHT:\n\t\t\ttodo.add(new Intention(Intention.ActionType.TURN_RIGHT));\n\t\t\tbreak;\n\t\tcase BEHIND:\n\t\t\ttodo.add(new Intention(Intention.ActionType.TURN_BACK));\n\t\t\tbreak;\n\t\t}\n\t\treturn;\n\t}", "comment": "/**\n\t * Add a turning action that will face the agent in the specified direction\n\t * \n\t * @param d\n\t */"}}
{"code": {"body": "\tprotected void planTurnTo(Agent.Heading h) {\n\t\tmakeTurn(getDirectionFor(h));\n\t}", "comment": "/**\n\t * Update the agent's intentions to include a turning action that will face\n\t * the agent in the specified heading\n\t * \n\t * @param h\n\t */"}}
{"code": {"body": "\tprivate void turnLeft() {\n\t\tstatus.heading = leftOf(status.heading);\n\t}", "comment": "/**\n\t * Change the heading of the agent in response to a command to turn left.\n\t */"}}
{"code": {"body": "\tprivate void step() {\n\t\tint newLocX = status.locX + status.heading.dx;\n\t\tint newLocY = status.locY + status.heading.dy;\n\t\tmyWorld.tryToMove(this, newLocX, newLocY);\n\t}", "comment": "/**\n\t * Negotiate with the world to move the agent a step of size given by\n\t * forwardV in the direction given by the current heading.\n\t */"}}
{"code": {"body": "\tpublic void act() {\n\t\tSet<Intention.ActionType> done = new HashSet<Intention.ActionType>();\n\n\t\tlastStatus = new DynamicAgentAttributes(status);\n\n\t\tfor (Intention a : todo) {\n\t\t\tIntention.ActionType t = a.getType();\n\t\t\tif (done.contains(t)) {\n\t\t\t\tSystem.err.println(\"\" + t.description\n\t\t\t\t\t\t+ \"\");\n\t\t\t}\n\t\t\tdone.add(t);\n\t\t\tswitch (t) {\n\t\t\tcase TURN_LEFT:\n\t\t\t\tturnLeft();\n\t\t\t\tbreak;\n\t\t\tcase TURN_BACK:\n\t\t\t\tturnLeft();\n\t\t\t\tturnLeft();\n\t\t\t\tbreak;\n\t\t\tcase TURN_RIGHT:\n\t\t\t\tturnLeft();\n\t\t\t\tturnLeft();\n\t\t\t\tturnLeft();\n\t\t\t\tbreak;\n\t\t\tcase STEP:\n\t\t\t\tstep();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}", "comment": "/**\n\t * Carry out the motion actions given by the agent's todo list. That\n\t * includes one turning action, and one step. Then move the agent one step.\n\t */"}}
{"code": {"body": "\tpublic void changelog(BufferedWriter out) throws IOException {\n\t\tout.write(\"\" + UPDATE + \"\" + ID_PARAM + OPEN\n\t\t\t\t+ Integer.toString(id) + CLOSE + \"\");\n\t\tstatus.log(out, form.debug);\n\t\tout.write(\"\");\n\t}", "comment": "/**\n\t * Write an XML description of the dynamic properties of the agent\n\t * \n\t * @param out\n\t *            destination channel for XML element\n\t * @throws IOException\n\t *             in case writing fails\n\t */"}}
{"code": {"body": "\tpublic static boolean inBound(int[] rowLength, int row, int col){\n\t\treturn (row >= 0 && col >= 0 && (row < rowLength[0]*2-1) && \n\t\t\t\tcol < rowLength[row]);\n\t}", "comment": "/**\n\t * check if input of board is in bound of board size\n\t * @param rowLength, the length of each row in board\n\t * @param row, row of piece being checked\n\t * @param col, column of piece being checked\n\t * @return boolean if piece is in bound\n\t */"}}
{"code": {"body": "\tpublic ArrayDeque<int[]> checkSurrounding(char[][] board, int[] rowLength, \n\t\t\tint row, int col, char player){\n\t\tArrayDeque<int[]> links = new ArrayDeque<int[]>(6);\n\t\tint maxBoardSize = board.length;\n\t\t\n\t\tif (row < (maxBoardSize/2)){\n\t\t\t\n\t\t\tif (inBound(rowLength, row-1, col-1) && \n\t\t\t\t\t(board[row-1][col-1] == player))\n\t\t\t\tlinks.add(arrayFormat(row-1,col-1));\n\t\t\t\n\t\t\tif (inBound(rowLength, row-1, col) && \n\t\t\t\t\t(board[row-1][col] == player))\n\t\t\t\tlinks.add(arrayFormat(row-1,col));\n\t\t\t\n\t\t\tif (inBound(rowLength, row, col-1) && \n\t\t\t\t\t(board[row][col-1] == player))\n\t\t\t\tlinks.add(arrayFormat(row,col-1));\n\t\t\t\n\t\t\tif (inBound(rowLength, row, col+1) && \n\t\t\t\t\t(board[row][col+1] == player))\n\t\t\t\tlinks.add(arrayFormat(row,col+1));\n\t\t\t\n\t\t\tif (inBound(rowLength, row+1, col) && \n\t\t\t\t\t(board[row+1][col] == player))\n\t\t\t\tlinks.add(arrayFormat(row+1,col));\n\t\t\t\n\t\t\tif (inBound(rowLength, row+1, col+1) && \n\t\t\t\t\t(board[row+1][col+1] == player))\n\t\t\t\tlinks.add(arrayFormat(row+1,col+1));\n\t\t\n\t\t}else if (row == (maxBoardSize/2)){\n\t\t\t\n\t\t\tif (inBound(rowLength, row-1, col-1) && \n\t\t\t\t\t(board[row-1][col-1] == player))\n\t\t\t\tlinks.add(arrayFormat(row-1,col-1));\n\t\t\t\n\t\t\tif (inBound(rowLength, row-1, col) && \n\t\t\t\t\t(board[row-1][col] == player))\n\t\t\t\tlinks.add(arrayFormat(row-1,col));\n\t\t\t\n\t\t\tif (inBound(rowLength, row, col-1) && \n\t\t\t\t\t(board[row][col-1] == player))\n\t\t\t\tlinks.add(arrayFormat(row,col-1));\n\t\t\t\n\t\t\tif (inBound(rowLength, row, col+1) && \n\t\t\t\t\t(board[row][col+1] == player))\n\t\t\t\tlinks.add(arrayFormat(row,col+1));\n\t\t\t\n\t\t\tif (inBound(rowLength, row+1, col-1) && \n\t\t\t\t\t(board[row+1][col-1] == player))\n\t\t\t\tlinks.add(arrayFormat(row+1,col-1));\n\t\t\t\n\t\t\tif (inBound(rowLength, row+1, col) && \n\t\t\t\t\t(board[row+1][col] == player))\n\t\t\t\tlinks.add(arrayFormat(row+1,col));\n\t\t\n\t\t}else{\n\t\t\t\n\t\t\tif (inBound(rowLength, row-1, col+1) && \n\t\t\t\t\t(board[row-1][col+1] == player))\n\t\t\t\tlinks.add(arrayFormat(row-1,col+1));\n\t\t\t\n\t\t\tif (inBound(rowLength, row-1, col) && \n\t\t\t\t\t(board[row-1][col] == player))\n\t\t\t\tlinks.add(arrayFormat(row-1,col));\n\t\t\t\n\t\t\tif (inBound(rowLength, row, col-1) && \n\t\t\t\t\t(board[row][col-1] == player))\n\t\t\t\tlinks.add(arrayFormat(row,col-1));\n\t\t\t\n\t\t\tif (inBound(rowLength, row, col+1) && \n\t\t\t\t\t(board[row][col+1] == player))\n\t\t\t\tlinks.add(arrayFormat(row,col+1));\n\t\t\t\n\t\t\tif (inBound(rowLength, row+1, col) && \n\t\t\t\t\t(board[row+1][col] == player))\n\t\t\t\tlinks.add(arrayFormat(row+1,col));\n\t\t\t\n\t\t\tif (inBound(rowLength, row+1, col-1) && \n\t\t\t\t\t(board[row+1][col-1] == player))\n\t\t\t\tlinks.add(arrayFormat(row+1,col-1));\n\t\t\t\n\t\t}\n\t\treturn links;\n\t}", "comment": "/**\n\t * check if surrounding of player piece contains more player pieces\n\t * @param board, board of game\n\t * @param rowLength, the length of each row in board\n\t * @param row, row of piece being checked\n\t * @param col, column of piece being checked\n\t * @param player, player in check (White or Black)\n\t * @return ArrayDeque<int[]>, returns an ArrayDeque of surrounding pieces\n\t */"}}
{"code": {"body": "\tpublic int[] arrayFormat(int row, int col)\n\t{\n\t\tint[] loc = new int[2];\n\t\tloc[0] = row;\n\t\tloc[1] = col;\n\t\treturn loc;\n\t}", "comment": "/**\n\t * Format the row and column position of a piece into an array format\n\t * @param row, row of piece\n\t * @param col, column of piece\n\t * @return int[], an integer array of [0] for row and [1] for column\n\t */"}}
{"code": {"body": "\tpublic boolean checkVisit(ArrayList<int[]> list, int row, int col){\n\t\tfor (int[] item: list){\n\t\t\tif ((item[0] == row) && (item[1] == col)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "comment": "/**\n\t * check if a piece is already in a visited ArrayList\n\t * @param list, an ArrayList of visited pieces\n\t * @param row, row of piece in check\n\t * @param col, column of piece in check\n\t * @return boolean, if the piece exist in the list\n\t */"}}
{"code": {"body": "\tpublic boolean checkLink(ArrayDeque<int[]> list, int row, int col){\n\t\tfor (int[] item: list){\n\t\t\tif ((item[0] == row) && (item[1] == col)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "comment": "/**\n\t * check if a piece is already in a visited ArrayDeque\n\t * @param list, an ArrayDeque of visited pieces\n\t * @param row, row of piece in check\n\t * @param col, column of piece in check\n\t * @return boolean, if the piece exist in the list\n\t */"}}
{"code": {"body": "\tpublic boolean checkLoopConnect(ArrayDeque<int[]> list, \n\t\t\tArrayDeque<int[]> list2){\n\t\tfor (int[] item: list){\n\t\t\tfor (int[] item2: list2){\n\t\t\t\tif ((item[0] == item2[0]) && (item[1] == item2[1])){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "comment": "/**\n\t * check if there is any similar pieces in both ArrayDeque\n\t * @param list, first ArrayDeque list\n\t * @param list2, second ArrayDeque list\n\t * @return boolean, if there exist a similar piece\n\t */"}}
{"code": {"body": "\tpublic ArrayList<int[]> boardDFS(char[][] board,int[] rowLength, int row, \n\t\t\tint col, char player,ArrayList<int[]> path){\n\t\tArrayDeque<int[]> links = checkSurrounding(board,rowLength,row,col,\n\t\t\t\tplayer);\n\t\tArrayDeque<int[]> stack = new ArrayDeque<int[]>();\n\t\tstack.addAll(links);\n\t\twhile (!stack.isEmpty()){\n\t\t\tint[] piece = stack.removeLast();\n\t\t\tpath.add(piece);\n\t\t\tlinks = checkSurrounding(board,rowLength,piece[0],piece[1],player);\n\t\t\tfor (int[] item:links){\n\t\t\t\tif (!checkVisit(path, item[0],item[1]) && \n\t\t\t\t\t\t!checkLink(stack, item[0],item[1])){\n\t\t\t\t\tstack.add(item);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn path;\n\t}", "comment": "/**\n\t * Performs a non-recursive Depth-First Search on a piece\n\t * @param board, board of game\n\t * @param rowLength, the length of each row in board\n\t * @param row, row of piece being checked\n\t * @param col, column of piece being checked\n\t * @param player, player in check (White or Black)\n\t * @param path, a list of connected pieces\n\t * @return ArrayList<int[]>, a list of connected pieces (path)\n\t */"}}
{"code": {"body": "\tpublic int[] getRowLength(){\n\t\treturn this.rowLength;\n\t}", "comment": "/**\n\t * @return Array of row lengths of board\n\t */"}}
{"code": {"body": "\tpublic char[][] getBoard(){\n\t\treturn this.board;\n\t}", "comment": "/**\n\t * @return the board\n\t */"}}
{"code": {"body": "\tpublic int getSize(){\n\t\treturn this.boardSize;\n\t}", "comment": "/**\n\t * @return size of board\n\t */"}}
{"code": {"body": "\tpublic int getMaxSize(){\n\t\treturn this.maxSize;\n\t}", "comment": "/**\n\t * @return maximum length of row in board\n\t */"}}
{"code": {"body": "\tpublic static void main(String[] args) {\n\t\t\n\t\tJaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();\n\t\tfactory.getInInterceptors().add(new LoggingInInterceptor());\n\t\tfactory.getOutInterceptors().add(new LoggingOutInterceptor());\n\t\tfactory.setServiceClass(HelloWorld.class);\n\t\tfactory.setAddress(\"\");\n\t\tHelloWorld client = (HelloWorld) factory.create();\n\n\t\tString reply = client.sayHi(\"\");\n\t\tSystem.out.println(\"\" + reply);\n\t}", "comment": "/**\n\t * @param args\n\t */"}}
{"code": {"body": "public ObjectFactory() {\n    }", "comment": "/**\n     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: org.netbeans.enterprise.bpel.asynchronoussampleschemanamespace\n     * \n     */"}}
{"code": {"body": "    public TypeA createTypeA() {\n        return new TypeA();\n    }", "comment": "/**\n     * Create an instance of {@link TypeA }\n     * \n     */"}}
{"code": {"body": "    public TypeB createTypeB() {\n        return new TypeB();\n    }", "comment": "/**\n     * Create an instance of {@link TypeB }\n     * \n     */"}}
{"code": {"body": "public ObjectFactory() {\n    }", "comment": "/**\n     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: org.netbeans.enterprise.bpel.asynchronoussampleschemanamespace\n     * \n     */"}}
{"code": {"body": "    public TypeA createTypeA() {\n        return new TypeA();\n    }", "comment": "/**\n     * Create an instance of {@link TypeA }\n     * \n     */"}}
{"code": {"body": "    public TypeB createTypeB() {\n        return new TypeB();\n    }", "comment": "/**\n     * Create an instance of {@link TypeB }\n     * \n     */"}}
{"code": {"body": "        public void onServiceConnected(ComponentName name, IBinder service) {\n            mIMyAidlInterface = IMyAidlInterface.Stub.asInterface(service);\n            try {\n                String string = mIMyAidlInterface.getString();\n                System.out.println(string);\n            } catch (RemoteException e) {\n                e.printStackTrace();\n            }\n        }", "comment": "/*    60                 Intent intent = new Intent();\n        61                 intent.setAction(\"com.example.service.MyService\");\n        62                 //\u4ece Android 5.0\u5f00\u59cb \u9690\u5f0fIntent\u7ed1\u5b9a\u670d\u52a1\u7684\u65b9\u5f0f\u5df2\u4e0d\u80fd\u4f7f\u7528,\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u8bbe\u7f6eService\u6240\u5728\u670d\u52a1\u7aef\u7684\u5305\u540d\n        63                 intent.setPackage(\"com.example.service\");\n        64                 bindService(intent, connection, BIND_AUTO_CREATE);*/"}}
{"code": {"body": "        public void onServiceDisconnected(ComponentName name) {\n\n        }", "comment": "/*    60                 Intent intent = new Intent();\n        61                 intent.setAction(\"com.example.service.MyService\");\n        62                 //\u4ece Android 5.0\u5f00\u59cb \u9690\u5f0fIntent\u7ed1\u5b9a\u670d\u52a1\u7684\u65b9\u5f0f\u5df2\u4e0d\u80fd\u4f7f\u7528,\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u8bbe\u7f6eService\u6240\u5728\u670d\u52a1\u7aef\u7684\u5305\u540d\n        63                 intent.setPackage(\"com.example.service\");\n        64                 bindService(intent, connection, BIND_AUTO_CREATE);*/"}}
{"code": {"body": "    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }", "comment": "/*    60                 Intent intent = new Intent();\n        61                 intent.setAction(\"com.example.service.MyService\");\n        62                 //\u4ece Android 5.0\u5f00\u59cb \u9690\u5f0fIntent\u7ed1\u5b9a\u670d\u52a1\u7684\u65b9\u5f0f\u5df2\u4e0d\u80fd\u4f7f\u7528,\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u8bbe\u7f6eService\u6240\u5728\u670d\u52a1\u7aef\u7684\u5305\u540d\n        63                 intent.setPackage(\"com.example.service\");\n        64                 bindService(intent, connection, BIND_AUTO_CREATE);*/"}}
{"code": {"body": "    public void start(View view) {\n        Intent intent = new Intent(\"\");\n        intent.setPackage(\"\");\n        bindService(intent, conn, BIND_AUTO_CREATE);\n    \n    }", "comment": "/*    60                 Intent intent = new Intent();\n        61                 intent.setAction(\"com.example.service.MyService\");\n        62                 //\u4ece Android 5.0\u5f00\u59cb \u9690\u5f0fIntent\u7ed1\u5b9a\u670d\u52a1\u7684\u65b9\u5f0f\u5df2\u4e0d\u80fd\u4f7f\u7528,\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u8bbe\u7f6eService\u6240\u5728\u670d\u52a1\u7aef\u7684\u5305\u540d\n        63                 intent.setPackage(\"com.example.service\");\n        64                 bindService(intent, connection, BIND_AUTO_CREATE);*/"}}
{"code": {"body": "\tpublic static void main(String[] args) {\n\t\t\n\t\tSystem.out.println(\"\");\n\n\t\tApplication.launch(MyApplication.class, args);\n\t}", "comment": "/**\n\t * Main function.\n\t * Start application GUI.\n\t *\n\t * @param args Input arguments, unused.\n\t */"}}
{"code": {"body": "    public Mat getLayerSizes() {\n        return new Mat(getLayerSizes_0(nativeObj));\n    }", "comment": "/**\n     * Integer vector specifying the number of neurons in each layer including the input and output layers.\n     *     The very first element specifies the number of elements in the input layer.\n     *     The last element - number of elements in the output layer.\n     * SEE: setLayerSizes\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public static ANN_MLP create() {\n        return ANN_MLP.__fromPtr__(create_0());\n    }", "comment": "/**\n     * Creates empty model\n     *\n     *     Use StatModel::train to train the model, Algorithm::load&lt;ANN_MLP&gt;(filename) to load the pre-trained model.\n     *     Note that the train method has optional flags: ANN_MLP::TrainFlags.\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public static ANN_MLP load(String filepath) {\n        return ANN_MLP.__fromPtr__(load_0(filepath));\n    }", "comment": "/**\n     * Loads and creates a serialized ANN from a file\n     *\n     * Use ANN::save to serialize and store an ANN to disk.\n     * Load the ANN from this file again, by calling this function with the path to the file.\n     *\n     * @param filepath path to serialized ANN\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public TermCriteria getTermCriteria() {\n        return new TermCriteria(getTermCriteria_0(nativeObj));\n    }", "comment": "/**\n     * SEE: setTermCriteria\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public double getAnnealCoolingRatio() {\n        return getAnnealCoolingRatio_0(nativeObj);\n    }", "comment": "/**\n     * SEE: setAnnealCoolingRatio\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public double getAnnealFinalT() {\n        return getAnnealFinalT_0(nativeObj);\n    }", "comment": "/**\n     * SEE: setAnnealFinalT\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public double getAnnealInitialT() {\n        return getAnnealInitialT_0(nativeObj);\n    }", "comment": "/**\n     * SEE: setAnnealInitialT\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public double getBackpropMomentumScale() {\n        return getBackpropMomentumScale_0(nativeObj);\n    }", "comment": "/**\n     * SEE: setBackpropMomentumScale\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public double getBackpropWeightScale() {\n        return getBackpropWeightScale_0(nativeObj);\n    }", "comment": "/**\n     * SEE: setBackpropWeightScale\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public double getRpropDW0() {\n        return getRpropDW0_0(nativeObj);\n    }", "comment": "/**\n     * SEE: setRpropDW0\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public double getRpropDWMax() {\n        return getRpropDWMax_0(nativeObj);\n    }", "comment": "/**\n     * SEE: setRpropDWMax\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public double getRpropDWMin() {\n        return getRpropDWMin_0(nativeObj);\n    }", "comment": "/**\n     * SEE: setRpropDWMin\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public double getRpropDWMinus() {\n        return getRpropDWMinus_0(nativeObj);\n    }", "comment": "/**\n     * SEE: setRpropDWMinus\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public double getRpropDWPlus() {\n        return getRpropDWPlus_0(nativeObj);\n    }", "comment": "/**\n     * SEE: setRpropDWPlus\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public int getAnnealItePerStep() {\n        return getAnnealItePerStep_0(nativeObj);\n    }", "comment": "/**\n     * SEE: setAnnealItePerStep\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public int getTrainMethod() {\n        return getTrainMethod_0(nativeObj);\n    }", "comment": "/**\n     * Returns current training method\n     * @return automatically generated\n     */"}}
{"code": {"body": "    public void setActivationFunction(int type) {\n        setActivationFunction_2(nativeObj, type);\n    }", "comment": "/**\n     * Initialize the activation function for each neuron.\n     *     Currently the default and the only fully supported activation function is ANN_MLP::SIGMOID_SYM.\n     *     @param type The type of activation function. See ANN_MLP::ActivationFunctions.\n     */"}}
{"code": {"body": "    public void setAnnealCoolingRatio(double val) {\n        setAnnealCoolingRatio_0(nativeObj, val);\n    }", "comment": "/**\n     *  getAnnealCoolingRatio SEE: getAnnealCoolingRatio\n     * @param val automatically generated\n     */"}}
{"code": {"body": "    public void setAnnealFinalT(double val) {\n        setAnnealFinalT_0(nativeObj, val);\n    }", "comment": "/**\n     *  getAnnealFinalT SEE: getAnnealFinalT\n     * @param val automatically generated\n     */"}}
{"code": {"body": "    public void setAnnealInitialT(double val) {\n        setAnnealInitialT_0(nativeObj, val);\n    }", "comment": "/**\n     *  getAnnealInitialT SEE: getAnnealInitialT\n     * @param val automatically generated\n     */"}}
{"code": {"body": "    public void setAnnealItePerStep(int val) {\n        setAnnealItePerStep_0(nativeObj, val);\n    }", "comment": "/**\n     *  getAnnealItePerStep SEE: getAnnealItePerStep\n     * @param val automatically generated\n     */"}}
{"code": {"body": "    public void setBackpropMomentumScale(double val) {\n        setBackpropMomentumScale_0(nativeObj, val);\n    }", "comment": "/**\n     *  getBackpropMomentumScale SEE: getBackpropMomentumScale\n     * @param val automatically generated\n     */"}}
{"code": {"body": "    public void setBackpropWeightScale(double val) {\n        setBackpropWeightScale_0(nativeObj, val);\n    }", "comment": "/**\n     *  getBackpropWeightScale SEE: getBackpropWeightScale\n     * @param val automatically generated\n     */"}}
{"code": {"body": "    public void setLayerSizes(Mat _layer_sizes) {\n        setLayerSizes_0(nativeObj, _layer_sizes.nativeObj);\n    }", "comment": "/**\n     * Integer vector specifying the number of neurons in each layer including the input and output layers.\n     *     The very first element specifies the number of elements in the input layer.\n     *     The last element - number of elements in the output layer. Default value is empty Mat.\n     * SEE: getLayerSizes\n     * @param _layer_sizes automatically generated\n     */"}}
{"code": {"body": "    public void setRpropDW0(double val) {\n        setRpropDW0_0(nativeObj, val);\n    }", "comment": "/**\n     *  getRpropDW0 SEE: getRpropDW0\n     * @param val automatically generated\n     */"}}
{"code": {"body": "    public void setRpropDWMax(double val) {\n        setRpropDWMax_0(nativeObj, val);\n    }", "comment": "/**\n     *  getRpropDWMax SEE: getRpropDWMax\n     * @param val automatically generated\n     */"}}
{"code": {"body": "    public void setRpropDWMin(double val) {\n        setRpropDWMin_0(nativeObj, val);\n    }", "comment": "/**\n     *  getRpropDWMin SEE: getRpropDWMin\n     * @param val automatically generated\n     */"}}
{"code": {"body": "    public void setRpropDWMinus(double val) {\n        setRpropDWMinus_0(nativeObj, val);\n    }", "comment": "/**\n     *  getRpropDWMinus SEE: getRpropDWMinus\n     * @param val automatically generated\n     */"}}
{"code": {"body": "    public void setRpropDWPlus(double val) {\n        setRpropDWPlus_0(nativeObj, val);\n    }", "comment": "/**\n     *  getRpropDWPlus SEE: getRpropDWPlus\n     * @param val automatically generated\n     */"}}
{"code": {"body": "    public void setTermCriteria(TermCriteria val) {\n        setTermCriteria_0(nativeObj, val.type, val.maxCount, val.epsilon);\n    }", "comment": "/**\n     *  getTermCriteria SEE: getTermCriteria\n     * @param val automatically generated\n     */"}}
{"code": {"body": "    public void setTrainMethod(int method) {\n        setTrainMethod_2(nativeObj, method);\n    }", "comment": "/**\n     * Sets training method and common parameters.\n     *     @param method Default value is ANN_MLP::RPROP. See ANN_MLP::TrainingMethods.\n     */"}}
